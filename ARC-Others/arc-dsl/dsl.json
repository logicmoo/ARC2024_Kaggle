Module(body=[FunctionDef(name='identity', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Any', ctx=Load()))], 
  kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' identity function ')), 
   Return(value=Name(id='x', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), 
    FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Numerical', ctx=Load())), 
     arg(arg='b', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=' addition ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()),
       args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), 
       args=[Name(id='b', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Name(id='b', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[])])]), Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Name(id='b', ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Name(id='b', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='subtract', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Numerical', ctx=Load())), arg(arg='b', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' subtraction ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[])])]), Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='multiply', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Numerical', ctx=Load())), arg(arg='b', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' multiplication ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Mult(), right=Name(id='b', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='a', ctx=Load()), op=Mult(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Name(id='a', ctx=Load()), op=Mult(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[])])]), Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='b', ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='b', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='divide', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Numerical', ctx=Load())), arg(arg='b', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' floor division ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='a', ctx=Load()), op=FloorDiv(), right=Name(id='b', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=FloorDiv(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=FloorDiv(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='a', ctx=Load()), op=FloorDiv(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Name(id='a', ctx=Load()), op=FloorDiv(), right=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load()))], orelse=[])])]), Return(value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=FloorDiv(), right=Name(id='b', ctx=Load())), BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=FloorDiv(), right=Name(id='b', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='invert', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' inversion with respect to addition ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=UnaryOp(op=USub(), operand=Name(id='n', ctx=Load())), orelse=Tuple(elts=[UnaryOp(op=USub(), operand=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load())), UnaryOp(op=USub(), operand=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load())))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='even', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' evenness ')), Return(value=Compare(left=BinOp(left=Name(id='n', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' scaling by two ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Constant(value=2)), orelse=Tuple(elts=[BinOp(left=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Constant(value=2)), BinOp(left=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Constant(value=2))], ctx=Load())))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='halve', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' scaling by one half ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=BinOp(left=Name(id='n', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), orelse=Tuple(elts=[BinOp(left=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=FloorDiv(), right=Constant(value=2)), BinOp(left=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=FloorDiv(), right=Constant(value=2))], ctx=Load())))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='flip', args=arguments(posonlyargs=[], args=[arg(arg='b', annotation=Name(id='Boolean', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' logical not ')), Return(value=UnaryOp(op=Not(), operand=Name(id='b', ctx=Load())))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='equality', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Any', ctx=Load())), arg(arg='b', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' equality ')), Return(value=Compare(left=Name(id='a', ctx=Load()), ops=[Eq()], comparators=[Name(id='b', ctx=Load())]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='contained', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' element of ')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Name(id='container', ctx=Load())]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='combine', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Container', ctx=Load())), arg(arg='b', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' union ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), args=[Tuple(elts=[Starred(value=Name(id='a', ctx=Load()), ctx=Load()), Starred(value=Name(id='b', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='FrozenSet', ctx=Load())), arg(arg='b', annotation=Name(id='FrozenSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' returns the intersection of two containers ')), Return(value=BinOp(left=Name(id='a', ctx=Load()), op=BitAnd(), right=Name(id='b', ctx=Load())))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='difference', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='FrozenSet', ctx=Load())), arg(arg='b', annotation=Name(id='FrozenSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' set difference ')), Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='dedupe', args=arguments(posonlyargs=[], args=[arg(arg='tup', annotation=Name(id='Tuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' remove duplicates ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='e', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='tup', ctx=Load())], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='tup', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='i', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='order', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='compfunc', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' order container by custom key ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='compfunc', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='repeat', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Any', ctx=Load())), arg(arg='num', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' repetition of item within vector ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='greater', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Integer', ctx=Load())), arg(arg='b', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' greater ')), Return(value=Compare(left=Name(id='a', ctx=Load()), ops=[Gt()], comparators=[Name(id='b', ctx=Load())]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='size', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' cardinality ')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='merge', args=arguments(posonlyargs=[], args=[arg(arg='containers', annotation=Name(id='ContainerContainer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' merging ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='containers', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='containers', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='c', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='IntegerSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' maximum ')), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=0))]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='IntegerSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' minimum ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=0))]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='valmax', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='compfunc', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' maximum by custom function ')), Return(value=Call(func=Name(id='compfunc', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='compfunc', ctx=Load())), keyword(arg='default', value=Constant(value=0))])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='valmin', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='compfunc', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' minimum by custom function ')), Return(value=Call(func=Name(id='compfunc', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='compfunc', ctx=Load())), keyword(arg='default', value=Constant(value=0))])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='argmax', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='compfunc', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' largest item by custom order ')), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='compfunc', ctx=Load()))]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='argmin', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='compfunc', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' smallest item by custom order ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='compfunc', ctx=Load()))]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='mostcommon', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' most common item ')), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Attribute(value=Name(id='container', ctx=Load()), attr='count', ctx=Load()))]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='leastcommon', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' least common item ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Attribute(value=Name(id='container', ctx=Load()), attr='count', ctx=Load()))]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='initset', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' initialize container ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Name(id='value', ctx=Load())])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='both', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Boolean', ctx=Load())), arg(arg='b', annotation=Name(id='Boolean', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' logical and ')), Return(value=BoolOp(op=And(), values=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='either', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Boolean', ctx=Load())), arg(arg='b', annotation=Name(id='Boolean', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' logical or ')), Return(value=BoolOp(op=Or(), values=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='increment', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' incrementing ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=1)), orelse=Tuple(elts=[BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='decrement', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' decrementing ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=1)), orelse=Tuple(elts=[BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='crement', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' incrementing positive and decrementing negative ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=1)), orelse=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=1)))))], orelse=[]), Return(value=Tuple(elts=[IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=1)), orelse=BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)))), IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1)), orelse=BinOp(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='sign', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Numerical', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' sign ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))))], orelse=[]), Return(value=Tuple(elts=[IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))), IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1))))], ctx=Load()))], decorator_list=[], returns=Name(id='Numerical', ctx=Load())), FunctionDef(name='positive', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' positive ')), Return(value=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='toivec', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' vector pointing vertically ')), Return(value=Tuple(elts=[Name(id='i', ctx=Load()), Constant(value=0)], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='tojvec', args=arguments(posonlyargs=[], args=[arg(arg='j', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' vector pointing horizontally ')), Return(value=Tuple(elts=[Constant(value=0), Name(id='j', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='sfilter', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='condition', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' keep elements in container that satisfy condition ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[Call(func=Name(id='condition', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='mfilter', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='function', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' filter and merge ')), Return(value=Call(func=Name(id='merge', ctx=Load()), args=[Call(func=Name(id='sfilter', ctx=Load()), args=[Name(id='container', ctx=Load()), Name(id='function', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='extract', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='condition', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' first element of container that satisfies condition ')), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[Call(func=Name(id='condition', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='totuple', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='FrozenSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' conversion to tuple ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='first', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' first item of container ')), Return(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='last', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' last item of container ')), Return(value=Subscript(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='insert', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='container', annotation=Name(id='FrozenSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' insert item into container ')), Return(value=Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='union', ctx=Load()), args=[Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Name(id='value', ctx=Load())])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' remove item from container ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[Compare(left=Name(id='e', ctx=Load()), ops=[NotEq()], comparators=[Name(id='value', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='other', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' other value in the container ')), Return(value=Call(func=Name(id='first', ctx=Load()), args=[Call(func=Name(id='remove', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='container', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='interval', args=arguments(posonlyargs=[], args=[arg(arg='start', annotation=Name(id='Integer', ctx=Load())), arg(arg='stop', annotation=Name(id='Integer', ctx=Load())), arg(arg='step', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' range ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='stop', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='astuple', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Integer', ctx=Load())), arg(arg='b', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' constructs a tuple ')), Return(value=Tuple(elts=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='product', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Container', ctx=Load())), arg(arg='b', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' cartesian product ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Name(id='b', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='pair', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Tuple', ctx=Load())), arg(arg='b', annotation=Name(id='Tuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' zipping of two tuples ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='TupleTuple', ctx=Load())), FunctionDef(name='branch', args=arguments(posonlyargs=[], args=[arg(arg='condition', annotation=Name(id='Boolean', ctx=Load())), arg(arg='a', annotation=Name(id='Any', ctx=Load())), arg(arg='b', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' if else branching ')), Return(value=IfExp(test=Name(id='condition', ctx=Load()), body=Name(id='a', ctx=Load()), orelse=Name(id='b', ctx=Load())))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='compose', args=arguments(posonlyargs=[], args=[arg(arg='outer', annotation=Name(id='Callable', ctx=Load())), arg(arg='inner', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' function composition ')), Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='outer', ctx=Load()), args=[Call(func=Name(id='inner', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='chain', args=arguments(posonlyargs=[], args=[arg(arg='h', annotation=Name(id='Callable', ctx=Load())), arg(arg='g', annotation=Name(id='Callable', ctx=Load())), arg(arg='f', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' function composition with three functions ')), Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='h', ctx=Load()), args=[Call(func=Name(id='g', ctx=Load()), args=[Call(func=Name(id='f', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], keywords=[])], keywords=[])))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='matcher', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='target', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' construction of equality function ')), Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Call(func=Name(id='function', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='target', ctx=Load())])))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='rbind', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='fixed', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' fix the rightmost argument ')), Assign(targets=[Name(id='n', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='function', ctx=Load()), attr='__code__', ctx=Load()), attr='co_argcount', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='fixed', ctx=Load())], keywords=[])))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load()), Name(id='fixed', ctx=Load())], keywords=[])))], orelse=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y'), arg(arg='z')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load()), Name(id='z', ctx=Load()), Name(id='fixed', ctx=Load())], keywords=[])))])])], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='lbind', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='fixed', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' fix the leftmost argument ')), Assign(targets=[Name(id='n', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='function', ctx=Load()), attr='__code__', ctx=Load()), attr='co_argcount', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='fixed', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='y'), arg(arg='z')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='fixed', ctx=Load()), Name(id='y', ctx=Load()), Name(id='z', ctx=Load())], keywords=[])))], orelse=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='y'), arg(arg='z'), arg(arg='a')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='function', ctx=Load()), args=[Name(id='fixed', ctx=Load()), Name(id='y', ctx=Load()), Name(id='z', ctx=Load()), Name(id='a', ctx=Load())], keywords=[])))])])], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='n', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' power of function ')), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='function', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='compose', ctx=Load()), args=[Name(id='function', ctx=Load()), Call(func=Name(id='power', ctx=Load()), args=[Name(id='function', ctx=Load()), BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='fork', args=arguments(posonlyargs=[], args=[arg(arg='outer', annotation=Name(id='Callable', ctx=Load())), arg(arg='a', annotation=Name(id='Callable', ctx=Load())), arg(arg='b', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' creates a wrapper function ')), Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='outer', ctx=Load()), args=[Call(func=Name(id='a', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), Call(func=Name(id='b', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), FunctionDef(name='apply', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply function to each item in container ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Name(id='function', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='rapply', args=arguments(posonlyargs=[], args=[arg(arg='functions', annotation=Name(id='Container', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply each function in container to value ')), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='functions', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Name(id='function', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='mapply', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='container', annotation=Name(id='ContainerContainer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply and merge ')), Return(value=Call(func=Name(id='merge', ctx=Load()), args=[Call(func=Name(id='apply', ctx=Load()), args=[Name(id='function', ctx=Load()), Name(id='container', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='papply', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='a', annotation=Name(id='Tuple', ctx=Load())), arg(arg='b', annotation=Name(id='Tuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply function on two vectors ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='function', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='mpapply', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='Callable', ctx=Load())), arg(arg='a', annotation=Name(id='Tuple', ctx=Load())), arg(arg='b', annotation=Name(id='Tuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply function on two vectors and merge ')), Return(value=Call(func=Name(id='merge', ctx=Load()), args=[Call(func=Name(id='papply', ctx=Load()), args=[Name(id='function', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='prapply', args=arguments(posonlyargs=[], args=[arg(arg='function'), arg(arg='a', annotation=Name(id='Container', ctx=Load())), arg(arg='b', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' apply function on cartesian product ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='function', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Name(id='b', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='mostcolor', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' most common color ')), Assign(targets=[Name(id='values', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='r', ctx=Load()), ifs=[], is_async=0)]), orelse=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0)]))), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Attribute(value=Name(id='values', ctx=Load()), attr='count', ctx=Load()))]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='leastcolor', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' least common color ')), Assign(targets=[Name(id='values', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='r', ctx=Load()), ifs=[], is_async=0)]), orelse=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0)]))), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Attribute(value=Name(id='values', ctx=Load()), attr='count', ctx=Load()))]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='height', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' height of grid or patch ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='lowermost', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=1)))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='width', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' width of grid or patch ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='piece', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='rightmost', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=1)))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='shape', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' height and width of grid or patch ')), Return(value=Tuple(elts=[Call(func=Name(id='height', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), Call(func=Name(id='width', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='portrait', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether height is greater than width ')), Return(value=Compare(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='width', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='colorcount', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load())), arg(arg='value', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' number of cells with color ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='colorfilter', args=arguments(posonlyargs=[], args=[arg(arg='objs', annotation=Name(id='Objects', ctx=Load())), arg(arg='value', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' filter objects by color ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='obj', ctx=Load()), generators=[comprehension(target=Name(id='obj', ctx=Store()), iter=Name(id='objs', ctx=Load()), ifs=[Compare(left=Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Objects', ctx=Load())), FunctionDef(name='sizefilter', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='n', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' filter items by size ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='n', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='FrozenSet', ctx=Load())), FunctionDef(name='asindices', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices of all grid cells ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='ofcolor', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='value', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices of all grid cells with value ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='ulcorner', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' index of upper left corner ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='min', ctx=Load()), Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='urcorner', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' index of upper right corner ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='ix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Subscript(value=Dict(keys=[Constant(value=0), Constant(value=1)], values=[Name(id='min', ctx=Load()), Name(id='max', ctx=Load())]), slice=Subscript(value=Name(id='ix', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), args=[Subscript(value=Name(id='ix', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='llcorner', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' index of lower left corner ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='ix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Subscript(value=Dict(keys=[Constant(value=0), Constant(value=1)], values=[Name(id='max', ctx=Load()), Name(id='min', ctx=Load())]), slice=Subscript(value=Name(id='ix', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), args=[Subscript(value=Name(id='ix', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='lrcorner', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' index of lower right corner ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='max', ctx=Load()), Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='crop', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='start', annotation=Name(id='IntegerTuple', ctx=Load())), arg(arg='dims', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' subgrid specified by start and dimension ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='r', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=1), ctx=Load()), upper=BinOp(left=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Name(id='dims', ctx=Load()), slice=Constant(value=1), ctx=Load()))), ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=0), ctx=Load()), upper=BinOp(left=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='dims', ctx=Load()), slice=Constant(value=0), ctx=Load()))), ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='toindices', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices of object cells ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='index', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='value', ctx=Store()), Name(id='index', ctx=Store())], ctx=Store()), iter=Name(id='patch', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Name(id='patch', ctx=Load()))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='recolor', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Integer', ctx=Load())), arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' recolor patch ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='value', ctx=Load()), Name(id='index', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Object', ctx=Load())), FunctionDef(name='shift', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load())), arg(arg='directions', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' shift patch ')), Assign(targets=[Tuple(elts=[Name(id='di', ctx=Store()), Name(id='dj', ctx=Store())], ctx=Store())], value=Name(id='directions', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='value', ctx=Load()), Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='di', ctx=Load())), BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Name(id='dj', ctx=Load()))], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='value', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='patch', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='di', ctx=Load())), BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Name(id='dj', ctx=Load()))], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Name(id='patch', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Patch', ctx=Load())), FunctionDef(name='normalize', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' moves upper left corner to origin ')), Return(value=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='patch', ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]))], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Patch', ctx=Load())), FunctionDef(name='dneighbors', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' directly adjacent indices ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=1)), Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), Tuple(elts=[Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='ineighbors', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' diagonally adjacent indices ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='neighbors', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' adjacent indices ')), Return(value=BinOp(left=Call(func=Name(id='dneighbors', ctx=Load()), args=[Name(id='loc', ctx=Load())], keywords=[]), op=BitOr(), right=Call(func=Name(id='ineighbors', ctx=Load()), args=[Name(id='loc', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='objects', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='univalued', annotation=Name(id='Boolean', ctx=Load())), arg(arg='diagonal', annotation=Name(id='Boolean', ctx=Load())), arg(arg='without_bg', annotation=Name(id='Boolean', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' objects occurring on the grid ')), Assign(targets=[Name(id='bg', ctx=Store())], value=IfExp(test=Name(id='without_bg', ctx=Load()), body=Call(func=Name(id='mostcolor', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='objs', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='occupied', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='unvisited', ctx=Store())], value=Call(func=Name(id='asindices', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='diagfun', ctx=Store())], value=IfExp(test=Name(id='diagonal', ctx=Load()), body=Name(id='neighbors', ctx=Load()), orelse=Name(id='dneighbors', ctx=Load()))), For(target=Name(id='loc', ctx=Store()), iter=Name(id='unvisited', ctx=Load()), body=[If(test=Compare(left=Name(id='loc', ctx=Load()), ops=[In()], comparators=[Name(id='occupied', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='val', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Eq()], comparators=[Name(id='bg', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Set(elts=[Tuple(elts=[Name(id='val', ctx=Load()), Name(id='loc', ctx=Load())], ctx=Load())])), Assign(targets=[Name(id='cands', ctx=Store())], value=Set(elts=[Name(id='loc', ctx=Load())])), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cands', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='neighborhood', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cand', ctx=Store()), iter=Name(id='cands', ctx=Load()), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Subscript(value=Name(id='cand', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Subscript(value=Name(id='cand', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load())), If(test=IfExp(test=Name(id='univalued', ctx=Load()), body=Compare(left=Name(id='val', ctx=Load()), ops=[Eq()], comparators=[Name(id='v', ctx=Load())]), orelse=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='bg', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='v', ctx=Load()), Name(id='cand', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='occupied', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='cand', ctx=Load())], keywords=[])), AugAssign(target=Name(id='neighborhood', ctx=Store()), op=BitOr(), value=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='diagfun', ctx=Load()), args=[Name(id='cand', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])])], is_async=0)]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cands', ctx=Store())], value=BinOp(left=Name(id='neighborhood', ctx=Load()), op=Sub(), right=Name(id='occupied', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='objs', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='objs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Objects', ctx=Load())), FunctionDef(name='partition', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' each cell with the same value part of the same object ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Call(func=Name(id='palette', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Objects', ctx=Load())), FunctionDef(name='fgpartition', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' each cell with the same value part of the same object without background ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=BinOp(left=Call(func=Name(id='palette', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=Sub(), right=Set(elts=[Call(func=Name(id='mostcolor', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])])), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Objects', ctx=Load())), FunctionDef(name='uppermost', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' row index of uppermost occupied cell ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='lowermost', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' row index of lowermost occupied cell ')), Return(value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='leftmost', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' column index of leftmost occupied cell ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='rightmost', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' column index of rightmost occupied cell ')), Return(value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='square', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether the piece forms a square ')), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='piece', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])]), orelse=BoolOp(op=And(), values=[Compare(left=BinOp(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='width', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='width', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])])])))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='vline', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether the piece forms a vertical line ')), Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='width', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='hline', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether the piece forms a horizontal line ')), Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='width', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='hmatching', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Patch', ctx=Load())), arg(arg='b', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether there exists a row for which both patches have cells ')), Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='vmatching', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Patch', ctx=Load())), arg(arg='b', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether there exists a column for which both patches have cells ')), Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='manhattan', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Patch', ctx=Load())), arg(arg='b', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' closest manhattan distance between two patches ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='ai', ctx=Load()), op=Sub(), right=Name(id='bi', ctx=Load()))], keywords=[]), op=Add(), right=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='aj', ctx=Load()), op=Sub(), right=Name(id='bj', ctx=Load()))], keywords=[])), generators=[comprehension(target=Tuple(elts=[Name(id='ai', ctx=Store()), Name(id='aj', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='bi', ctx=Store()), Name(id='bj', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='adjacent', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Patch', ctx=Load())), arg(arg='b', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether two patches are adjacent ')), Return(value=Compare(left=Call(func=Name(id='manhattan', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='bordering', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load())), arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' whether a patch is adjacent to a grid border ')), Return(value=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='lowermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Compare(left=Call(func=Name(id='rightmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]))], decorator_list=[], returns=Name(id='Boolean', ctx=Load())), FunctionDef(name='centerofmass', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' center of mass ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]))), Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='palette', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' colors occurring in object or grid ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='r', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='element', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerSet', ctx=Load())), FunctionDef(name='numcolors', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' number of colors occurring in object or grid ')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='palette', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='IntegerSet', ctx=Load())), FunctionDef(name='color', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' color of object ')), Return(value=Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='toobject', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load())), arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' object from patch and grid ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Object', ctx=Load())), FunctionDef(name='asobject', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' conversion of grid to object ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Object', ctx=Load())), FunctionDef(name='rot90', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' quarter clockwise rotation ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='row', ctx=Load()), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='rot180', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' half rotation ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Name(id='row', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='rot270', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' quarter anticlockwise rotation ')), Return(value=Subscript(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Name(id='row', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='hmirror', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' mirroring along horizontal ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Name(id='piece', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Call(func=Name(id='lrcorner', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[BinOp(left=Name(id='d', ctx=Load()), op=Sub(), right=Name(id='i', ctx=Load())), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[BinOp(left=Name(id='d', ctx=Load()), op=Sub(), right=Name(id='i', ctx=Load())), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Piece', ctx=Load())), FunctionDef(name='vmirror', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' mirroring along vertical ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='row', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Call(func=Name(id='lrcorner', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), BinOp(left=Name(id='d', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load()))], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), BinOp(left=Name(id='d', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load()))], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Piece', ctx=Load())), FunctionDef(name='dmirror', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' mirroring along diagonal ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Name(id='piece', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Tuple(elts=[BinOp(left=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())), op=Add(), right=Name(id='a', ctx=Load())), BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='a', ctx=Load())), op=Add(), right=Name(id='b', ctx=Load()))], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[BinOp(left=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())), op=Add(), right=Name(id='a', ctx=Load())), BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='a', ctx=Load())), op=Add(), right=Name(id='b', ctx=Load()))], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Name(id='piece', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Piece', ctx=Load())), FunctionDef(name='cmirror', args=arguments(posonlyargs=[], args=[arg(arg='piece', annotation=Name(id='Piece', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' mirroring along counterdiagonal ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='piece', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=GeneratorExp(elt=Subscript(value=Name(id='r', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Subscript(value=Name(id='piece', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='vmirror', ctx=Load()), args=[Call(func=Name(id='dmirror', ctx=Load()), args=[Call(func=Name(id='vmirror', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Piece', ctx=Load())), FunctionDef(name='fill', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='value', annotation=Name(id='Integer', ctx=Load())), arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' fill value at indices ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='grid_filled', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='grid_filled', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='grid_filled', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='paint', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' paint object to grid ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='grid_painted', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='value', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='obj', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='grid_painted', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='grid_painted', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='underfill', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='value', annotation=Name(id='Integer', ctx=Load())), arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' fill value at indices that are background ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='bg', ctx=Store())], value=Call(func=Name(id='mostcolor', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='g', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='bg', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='g', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='g', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='underpaint', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' paint object to grid where there is background ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='bg', ctx=Store())], value=Call(func=Name(id='mostcolor', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='value', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='obj', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='g', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='bg', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='g', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='g', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='hupscale', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='factor', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' upscale grid horizontally ')), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='row', ctx=Store()), iter=Name(id='grid', ctx=Load()), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=Name(id='row', ctx=Load()), body=[Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[]), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=Name(id='g', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='r', ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Name(id='g', ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='vupscale', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='factor', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' upscale grid vertically ')), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='row', ctx=Store()), iter=Name(id='grid', ctx=Load()), body=[Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=Name(id='g', ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='row', ctx=Load()), generators=[comprehension(target=Name(id='num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[]), Return(value=Name(id='g', ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='upscale', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Name(id='Element', ctx=Load())), arg(arg='factor', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' upscale object or grid ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='row', ctx=Store()), iter=Name(id='element', ctx=Load()), body=[Assign(targets=[Name(id='upscaled_row', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=Name(id='row', ctx=Load()), body=[Assign(targets=[Name(id='upscaled_row', ctx=Store())], value=BinOp(left=Name(id='upscaled_row', ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[]), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=Name(id='g', ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='upscaled_row', ctx=Load()), generators=[comprehension(target=Name(id='num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[]), Return(value=Name(id='g', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='di_inv', ctx=Store()), Name(id='dj_inv', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='di', ctx=Store()), Name(id='dj', ctx=Store())], ctx=Store())], value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='di_inv', ctx=Load())), UnaryOp(op=USub(), operand=Name(id='dj_inv', ctx=Load()))], ctx=Load())), Assign(targets=[Name(id='normed_obj', ctx=Store())], value=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='element', ctx=Load()), Tuple(elts=[Name(id='di', ctx=Load()), Name(id='dj', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='o', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='value', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='normed_obj', ctx=Load()), body=[For(target=Name(id='io', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), body=[For(target=Name(id='jo', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='factor', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='o', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='value', ctx=Load()), Tuple(elts=[BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Name(id='factor', ctx=Load())), op=Add(), right=Name(id='io', ctx=Load())), BinOp(left=BinOp(left=Name(id='j', ctx=Load()), op=Mult(), right=Name(id='factor', ctx=Load())), op=Add(), right=Name(id='jo', ctx=Load()))], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='shift', ctx=Load()), args=[Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), Tuple(elts=[Name(id='di_inv', ctx=Load()), Name(id='dj_inv', ctx=Load())], ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Element', ctx=Load())), FunctionDef(name='downscale', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='factor', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' downscale grid ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='j', ctx=Load()), op=Mod(), right=Name(id='factor', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Tuple(elts=[Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=Name(id='g', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='r', ctx=Load())], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='h', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='g', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dsg', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Name(id='factor', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='dsg', ctx=Store())], value=BinOp(left=Name(id='dsg', ctx=Load()), op=Add(), right=Tuple(elts=[Subscript(value=Name(id='g', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='dsg', ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='hconcat', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Grid', ctx=Load())), arg(arg='b', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' concatenate two grids horizontally ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='j', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='vconcat', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Grid', ctx=Load())), arg(arg='b', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' concatenate two grids vertically ')), Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Name(id='b', ctx=Load())))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='subgrid', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load())), arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' smallest subgrid containing object ')), Return(value=Call(func=Name(id='crop', ctx=Load()), args=[Name(id='grid', ctx=Load()), Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), Call(func=Name(id='shape', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='hsplit', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='n', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' split grid horizontally ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=FloorDiv(), right=Name(id='n', ctx=Load()))], ctx=Load())), Assign(targets=[Name(id='offset', ctx=Store())], value=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Mod(), right=Name(id='n', ctx=Load())), ops=[NotEq()], comparators=[Constant(value=0)])), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='crop', ctx=Load()), args=[Name(id='grid', ctx=Load()), Tuple(elts=[Constant(value=0), BinOp(left=BinOp(left=Name(id='w', ctx=Load()), op=Mult(), right=Name(id='i', ctx=Load())), op=Add(), right=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Name(id='offset', ctx=Load())))], ctx=Load()), Tuple(elts=[Name(id='h', ctx=Load()), Name(id='w', ctx=Load())], ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='vsplit', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='n', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' split grid vertically ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=FloorDiv(), right=Name(id='n', ctx=Load())), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='offset', ctx=Store())], value=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=Mod(), right=Name(id='n', ctx=Load())), ops=[NotEq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='hs', ctx=Store())], value=Tuple(elts=[BinOp(left=BinOp(left=Name(id='h', ctx=Load()), op=Mult(), right=Name(id='i', ctx=Load())), op=Add(), right=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Name(id='offset', ctx=Load())))], ctx=Load())), Assign(targets=[Name(id='g', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='crop', ctx=Load()), args=[Name(id='grid', ctx=Load()), Tuple(elts=[Name(id='hs', ctx=Load()), Constant(value=0)], ctx=Load()), Tuple(elts=[Name(id='h', ctx=Load()), Name(id='w', ctx=Load())], ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='g', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Tuple', ctx=Load())), FunctionDef(name='cellwise', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Grid', ctx=Load())), arg(arg='b', annotation=Name(id='Grid', ctx=Load())), arg(arg='fallback', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' cellwise match of two grids ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='resulting_grid', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='a_value', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=IfExp(test=Compare(left=Name(id='a_value', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Subscript(value=Name(id='b', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())]), body=Name(id='a_value', ctx=Load()), orelse=Name(id='fallback', ctx=Load()))), Assign(targets=[Name(id='row', ctx=Store())], value=BinOp(left=Name(id='row', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='value', ctx=Load())], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='resulting_grid', ctx=Store())], value=BinOp(left=Name(id='resulting_grid', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='row', ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Name(id='resulting_grid', ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='replace', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='replacee', annotation=Name(id='Integer', ctx=Load())), arg(arg='replacer', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' color substitution ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='replacee', ctx=Load())]), body=Name(id='replacer', ctx=Load()), orelse=Name(id='v', ctx=Load())), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='r', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='switch', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='a', annotation=Name(id='Integer', ctx=Load())), arg(arg='b', annotation=Name(id='Integer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' color switching ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=BoolOp(op=And(), values=[Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='a', ctx=Load())]), Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())])]), body=Name(id='v', ctx=Load()), orelse=Subscript(value=Dict(keys=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], values=[Name(id='b', ctx=Load()), Name(id='a', ctx=Load())]), slice=Name(id='v', ctx=Load()), ctx=Load())), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='r', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='center', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' center of the patch ')), Return(value=Tuple(elts=[BinOp(left=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=BinOp(left=Call(func=Name(id='height', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), BinOp(left=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=BinOp(left=Call(func=Name(id='width', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)))], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='position', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Patch', ctx=Load())), arg(arg='b', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' relative position between two patches ')), Assign(targets=[Tuple(elts=[Name(id='ia', ctx=Store()), Name(id='ja', ctx=Store())], ctx=Store())], value=Call(func=Name(id='center', ctx=Load()), args=[Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='ib', ctx=Store()), Name(id='jb', ctx=Store())], ctx=Store())], value=Call(func=Name(id='center', ctx=Load()), args=[Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='ia', ctx=Load()), ops=[Eq()], comparators=[Name(id='ib', ctx=Load())]), body=[Return(value=Tuple(elts=[Constant(value=0), IfExp(test=Compare(left=Name(id='ja', ctx=Load()), ops=[Lt()], comparators=[Name(id='jb', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='ja', ctx=Load()), ops=[Eq()], comparators=[Name(id='jb', ctx=Load())]), body=[Return(value=Tuple(elts=[IfExp(test=Compare(left=Name(id='ia', ctx=Load()), ops=[Lt()], comparators=[Name(id='ib', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1))), Constant(value=0)], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='ia', ctx=Load()), ops=[Lt()], comparators=[Name(id='ib', ctx=Load())]), body=[Return(value=Tuple(elts=[Constant(value=1), IfExp(test=Compare(left=Name(id='ja', ctx=Load()), ops=[Lt()], comparators=[Name(id='jb', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='ia', ctx=Load()), ops=[Gt()], comparators=[Name(id='ib', ctx=Load())]), body=[Return(value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), IfExp(test=Compare(left=Name(id='ja', ctx=Load()), ops=[Lt()], comparators=[Name(id='jb', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()))], orelse=[])])])])], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='loc', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' color at location ')), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Name(id='loc', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='j', ctx=Load()), Name(id='w', ctx=Load())])])), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='canvas', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Integer', ctx=Load())), arg(arg='dimensions', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' grid construction ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Subscript(value=Name(id='dimensions', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Subscript(value=Name(id='dimensions', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='corners', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices of corners ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), Call(func=Name(id='urcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), Call(func=Name(id='llcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), Call(func=Name(id='lrcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='IntegerTuple', ctx=Load())), arg(arg='b', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' line between two points ')), Assign(targets=[Tuple(elts=[Name(id='ai', ctx=Store()), Name(id='aj', ctx=Store())], ctx=Store())], value=Name(id='a', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='bi', ctx=Store()), Name(id='bj', ctx=Store())], ctx=Store())], value=Name(id='b', ctx=Load())), Assign(targets=[Name(id='si', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ei', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='sj', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ej', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), If(test=Compare(left=Name(id='ai', ctx=Load()), ops=[Eq()], comparators=[Name(id='bi', ctx=Load())]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='ai', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), Name(id='ej', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='aj', ctx=Load()), ops=[Eq()], comparators=[Name(id='bj', ctx=Load())]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='aj', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), Name(id='ei', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Compare(left=BinOp(left=Name(id='bi', ctx=Load()), op=Sub(), right=Name(id='ai', ctx=Load())), ops=[Eq()], comparators=[BinOp(left=Name(id='bj', ctx=Load()), op=Sub(), right=Name(id='aj', ctx=Load()))]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), Name(id='ei', ctx=Load())], keywords=[]), Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), Name(id='ej', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Compare(left=BinOp(left=Name(id='bi', ctx=Load()), op=Sub(), right=Name(id='ai', ctx=Load())), ops=[Eq()], comparators=[BinOp(left=Name(id='aj', ctx=Load()), op=Sub(), right=Name(id='bj', ctx=Load()))]), body=[Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), Name(id='ei', ctx=Load())], keywords=[]), Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='ej', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='sj', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[])])])]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='cover', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' remove object from grid ')), Return(value=Call(func=Name(id='fill', ctx=Load()), args=[Name(id='grid', ctx=Load()), Call(func=Name(id='mostcolor', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='trim', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' trim border of grid ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='r', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='move', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='obj', annotation=Name(id='Object', ctx=Load())), arg(arg='offset', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' move object on grid ')), Return(value=Call(func=Name(id='paint', ctx=Load()), args=[Call(func=Name(id='cover', ctx=Load()), args=[Name(id='grid', ctx=Load()), Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='shift', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='offset', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='tophalf', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' upper half of grid ')), Return(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='bottomhalf', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' lower half of grid ')), Return(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), op=Add(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)))), ctx=Load()))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='lefthalf', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' left half of grid ')), Return(value=Call(func=Name(id='rot270', ctx=Load()), args=[Call(func=Name(id='tophalf', ctx=Load()), args=[Call(func=Name(id='rot90', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='righthalf', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' right half of grid ')), Return(value=Call(func=Name(id='rot270', ctx=Load()), args=[Call(func=Name(id='bottomhalf', ctx=Load()), args=[Call(func=Name(id='rot90', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='vfrontier', args=arguments(posonlyargs=[], args=[arg(arg='location', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' vertical frontier ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Subscript(value=Name(id='location', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=30)], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='hfrontier', args=arguments(posonlyargs=[], args=[arg(arg='location', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' horizontal frontier ')), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Subscript(value=Name(id='location', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=30)], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='backdrop', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices in bounding box of patch ')), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='si', ctx=Store()), Name(id='sj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='ei', ctx=Store()), Name(id='ej', ctx=Store())], ctx=Store())], value=Call(func=Name(id='lrcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='delta', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' indices in bounding box but not part of patch ')), Return(value=BinOp(left=Call(func=Name(id='backdrop', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='toindices', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='gravitate', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='Patch', ctx=Load())), arg(arg='destination', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' direction to move source until adjacent to destination ')), Assign(targets=[Tuple(elts=[Name(id='si', ctx=Store()), Name(id='sj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='center', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='di', ctx=Store()), Name(id='dj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='center', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load())), If(test=Call(func=Name(id='vmatching', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='destination', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=IfExp(test=Compare(left=Name(id='si', ctx=Load()), ops=[Lt()], comparators=[Name(id='di', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1))))], orelse=[Assign(targets=[Name(id='j', ctx=Store())], value=IfExp(test=Compare(left=Name(id='sj', ctx=Load()), ops=[Lt()], comparators=[Name(id='dj', ctx=Load())]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1))))]), Assign(targets=[Tuple(elts=[Name(id='gi', ctx=Store()), Name(id='gj', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='adjacent', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='destination', ctx=Load())], keywords=[])), Compare(left=Name(id='c', ctx=Load()), ops=[Lt()], comparators=[Constant(value=42)])]), body=[AugAssign(target=Name(id='c', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='gi', ctx=Store()), op=Add(), value=Name(id='i', ctx=Load())), AugAssign(target=Name(id='gj', ctx=Store()), op=Add(), value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='source', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='gi', ctx=Load()), op=Sub(), right=Name(id='i', ctx=Load())), BinOp(left=Name(id='gj', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Name(id='IntegerTuple', ctx=Load())), FunctionDef(name='inbox', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' inbox for patch ')), Assign(targets=[Tuple(elts=[Name(id='ai', ctx=Store()), Name(id='aj', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='bi', ctx=Store()), Name(id='bj', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='lowermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='rightmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='si', ctx=Store()), Name(id='sj', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='min', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='ei', ctx=Store()), Name(id='ej', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='vlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='sj', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='ej', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='hlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='si', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='ei', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[BinOp(left=Name(id='vlines', ctx=Load()), op=BitOr(), right=Name(id='hlines', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='outbox', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' outbox for patch ')), Assign(targets=[Tuple(elts=[Name(id='ai', ctx=Store()), Name(id='aj', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='uppermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='leftmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='bi', ctx=Store()), Name(id='bj', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='lowermost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='rightmost', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='si', ctx=Store()), Name(id='sj', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='min', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='ei', ctx=Store()), Name(id='ej', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='vlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='sj', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='ej', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='hlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='si', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='ei', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[BinOp(left=Name(id='vlines', ctx=Load()), op=BitOr(), right=Name(id='hlines', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='box', args=arguments(posonlyargs=[], args=[arg(arg='patch', annotation=Name(id='Patch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' outline of patch ')), Assign(targets=[Tuple(elts=[Name(id='ai', ctx=Store()), Name(id='aj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ulcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='bi', ctx=Store()), Name(id='bj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='lrcorner', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='si', ctx=Store()), Name(id='sj', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='min', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='ei', ctx=Store()), Name(id='ej', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='ai', ctx=Load()), Name(id='bi', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Name(id='aj', ctx=Load()), Name(id='bj', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='vlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='sj', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='ej', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='si', ctx=Load()), BinOp(left=Name(id='ei', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='hlines', ctx=Store())], value=BinOp(left=SetComp(elt=Tuple(elts=[Name(id='si', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Tuple(elts=[Name(id='ei', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='sj', ctx=Load()), BinOp(left=Name(id='ej', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[BinOp(left=Name(id='vlines', ctx=Load()), op=BitOr(), right=Name(id='hlines', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='shoot', args=arguments(posonlyargs=[], args=[arg(arg='start', annotation=Name(id='IntegerTuple', ctx=Load())), arg(arg='direction', annotation=Name(id='IntegerTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' line from starting point and direction ')), Return(value=Call(func=Name(id='connect', ctx=Load()), args=[Name(id='start', ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=BinOp(left=Constant(value=42), op=Mult(), right=Subscript(value=Name(id='direction', ctx=Load()), slice=Constant(value=0), ctx=Load()))), BinOp(left=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=BinOp(left=Constant(value=42), op=Mult(), right=Subscript(value=Name(id='direction', ctx=Load()), slice=Constant(value=1), ctx=Load())))], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='occurrences', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load())), arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' locations of occurrences of object in grid ')), Assign(targets=[Name(id='occs', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='normed', ctx=Store())], value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='oh', ctx=Store()), Name(id='ow', ctx=Store())], ctx=Store())], value=Call(func=Name(id='shape', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='h2', ctx=Store()), Name(id='w2', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=BinOp(left=Name(id='h', ctx=Load()), op=Sub(), right=Name(id='oh', ctx=Load())), op=Add(), right=Constant(value=1)), BinOp(left=BinOp(left=Name(id='w', ctx=Load()), op=Sub(), right=Name(id='ow', ctx=Load())), op=Add(), right=Constant(value=1))], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='h2', ctx=Load())], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='w2', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='occurs', ctx=Store())], value=Constant(value=True)), For(target=Tuple(elts=[Name(id='v', ctx=Store()), Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='normed', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='a', ctx=Load()), Name(id='h', ctx=Load())]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='b', ctx=Load()), Name(id='w', ctx=Load())]), Compare(left=Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='v', ctx=Load())])])), body=[Assign(targets=[Name(id='occurs', ctx=Store())], value=Constant(value=False)), Break()], orelse=[])], orelse=[]), If(test=Name(id='occurs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='occs', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='occs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Indices', ctx=Load())), FunctionDef(name='frontiers', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' set of frontiers ')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='grid', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='row_indices', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='column_indices', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='dmirror', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='hfrontiers', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Tuple(elts=[Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='row_indices', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='vfrontiers', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Tuple(elts=[Subscript(value=Subscript(value=Name(id='grid', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Name(id='column_indices', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=BinOp(left=Name(id='hfrontiers', ctx=Load()), op=BitOr(), right=Name(id='vfrontiers', ctx=Load())))], decorator_list=[], returns=Name(id='Objects', ctx=Load())), FunctionDef(name='compress', args=arguments(posonlyargs=[], args=[arg(arg='grid', annotation=Name(id='Grid', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' removes frontiers from grid ')), Assign(targets=[Name(id='ri', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='ci', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='dmirror', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='j', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ci', ctx=Load())])], is_async=0)])], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ri', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Grid', ctx=Load())), FunctionDef(name='hperiod', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' horizontal periodicity ')), Assign(targets=[Name(id='normalized', ctx=Store())], value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Name(id='width', ctx=Load()), args=[Name(id='normalized', ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='w', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='offsetted', ctx=Store())], value=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='normalized', ctx=Load()), Tuple(elts=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='p', ctx=Load()))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pruned', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Tuple(elts=[Name(id='c', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='offsetted', ctx=Load()), ifs=[Compare(left=Name(id='j', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='pruned', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='normalized', ctx=Load())], keywords=[]), body=[Return(value=Name(id='p', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='w', ctx=Load()))], decorator_list=[], returns=Name(id='Integer', ctx=Load())), FunctionDef(name='vperiod', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' vertical periodicity ')), Assign(targets=[Name(id='normalized', ctx=Store())], value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='h', ctx=Store())], value=Call(func=Name(id='height', ctx=Load()), args=[Name(id='normalized', ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='h', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='offsetted', ctx=Store())], value=Call(func=Name(id='shift', ctx=Load()), args=[Name(id='normalized', ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='p', ctx=Load())), Constant(value=0)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pruned', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[SetComp(elt=Tuple(elts=[Name(id='c', ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='offsetted', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='pruned', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='normalized', ctx=Load())], keywords=[]), body=[Return(value=Name(id='p', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='h', ctx=Load()))], decorator_list=[], returns=Name(id='Integer', ctx=Load()))], type_ignores=[])
