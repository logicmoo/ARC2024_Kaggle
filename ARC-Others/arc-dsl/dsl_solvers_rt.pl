
read_dsl:-  make,     
      open('arc-dsl/solvers.py',read,In2,[]),read_python(In2),!,
      uast,!,
      open('arc-dsl/constants.py',read,In1,[]),read_python(In1),
      !.
read_michod:- read_sols,read_dsl.

uast:- open('arc-dsl/dsl.py.uast',read,In3,[]),read_uast_python(In3),close(In3).
read_uast_python(In):- %json_read(In,AST),
  %read_term(In,AST,[]),
  read_stream_to_codes(In,Codes),
  text_to_string(Codes,String),
  replace_in_string(['{'='[','}'=']',
        '\n'=' ','\r'=' ','\t'=' ','        '=' ','   '=' ','  '=' ',
          '  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ','  '=' ',
        ', }'=' }',', ]'=' ]'],String,SAST),!,
  %catch((atom_to_term(SAST,AST,Vs),maplist(call,Vs)),_,fail),
  atom_to_term(SAST,AST,Vs),maplist(call,Vs),
  do_uast_python(AST).

remove_i('@pos':_).
remove_i('@role':_).
remove_i(','()).
remove_i('{}'()).
remove_i('{}').
remove_i([]:_).
remove_i(_:[]).
remove_i(async:false).
remove_i(is_async:0).
remove_i("if" : '@token').
remove_i("for" : '@token').
 remove_i("uast:Block" : '@type').


s_ast({'@type':"uast:Identifier",'Name':J},J):-!.
s_ast({'@type':"python:BoxedName",boxed_value:J,ctx:"Load"},J).
s_ast({'@type':"python:BoxedName",boxed_value:J,ctx:"Store"},J).
s_ast({'@type':"python:Num",'@token':X},X).
s_ast({'@type':"python:Call",FCall}, FCall).
s_ast({'@type':"python:Tuple",ctx:_LoadSave,elts:L},L).
s_ast({'@type':"python:Assign",targets:To,value:From},setvars(To,From)).
s_ast((args:Args,func:Call),eval(Call,Args)).
s_ast([args:Args,func:Call],eval(Call,Args)).
s_ast(body_stmts : L,L).
s_ast( 'Statements' : L,L).


simplify_ast(I,O):- var(I),!,O=I.
simplify_ast(I,O):- \+ compound(I),!,O=I.
simplify_ast(I,O):- s_ast(I,O),!.
simplify_ast(K:I,K:O):- s_ast(I,O),!.
simplify_ast('{}'((Rm,I)),O):- remove_i(Rm),!,simplify_ast('{}'(I),O).
simplify_ast('{}'((I,Rm)),O):- remove_i(Rm),!,simplify_ast('{}'(I),O).
simplify_ast('{}'(Rm),'{}'):- remove_i(Rm),!.
simplify_ast('{}'(I),'{}'(O)):- !, simplify_ast(I,O).
%simplify_ast((J,I),O):- remove_i(I),!,simplify_ast(J,O).
%simplify_ast((I,J),(II,JJ)):- !, simplify_ast(I,II),simplify_ast(J,JJ).

simplify_ast([Rm|I],O):- remove_i(Rm),!,simplify_ast(I,O).
%simplify_ast([I],O):-!,simplify_ast(I,O).
simplify_ast([I|J],[II|JJ]):- !, simplify_ast(I,II),simplify_ast(J,JJ).
simplify_ast([A,I|J],[II|JJ]):- s_ast([A,I],II),!,simplify_ast(J,JJ).
simplify_ast(I,'<>'):- remove_i(I),!.

%simplify_ast(Rm:I,O):- remove_i(Rm),!, simplify_ast(I,O).
simplify_ast(','(I),O):- simplify_ast(I,O).
simplify_ast('{}'(I),O):-simplify_ast(I,O).
simplify_ast(I:II,O:OO):- !, simplify_ast(I,O),simplify_ast(II,OO).
simplify_ast(I,O):- compound_name_arguments(I,F,II),simplify_ast(II,OO),compound_name_arguments(O,F,OO).

d_simplify_ast(AST,ASTO):- once(simplify_ast(AST,AST1)),AST1\=@=AST,!,d_simplify_ast(AST1,ASTO).
d_simplify_ast(AST,AST).

do_uast_python(AST):-d_simplify_ast(AST,AST1), writeq(AST1),nl,nl,print(AST1),nl,nl.
  
:- dynamic(michod_solved/2).
:- dynamic(py_consts/2).

:- dynamic(michod_dsl/4).
print_sols:- make, T = michod_solved(TestID,Prog),
   %forall(T,(pp(fun(TestID)),maplist(writeln,Prog),nl)).
   %forall(T,(michod_solved_cor(TestID,Prog,Clause),portray_clause(user_output,Clause))).
   forall(T,(michod_solved_cor(TestID,Prog,Clause),pp(Clause))).
print_dsl:- T = michod_dsl(Fun,Params,_Cmt,Src),
   forall(T,(pp(fun(Fun,Params)),maplist(writeln,Src),nl)).
read_python(In):- 
 repeat, 
  read_line_to_string(In,S), 
   (S==end_of_file -> ! ; once(process_line(In,S)),fail).

%py_substs(N,V):- between(0,60,X),atom_concat(x,X,N),V='$VAR'(X).
py_substs(N,V):- between(0,60,X),atom_concat(x,X,N),atom_concat('X',X,XX),V='$VAR'(XX).
py_substs('T',true).
py_substs('F',false).
py_substs(N,V):- py_consts(N,V).
py_substs(C,(X,Y)):- fff(C,X,Y).
py_substs('IntegerTuple','Point').
fff('DOWN',1, 0).
fff('RIGHT',0, 1).
fff('UP',-1, 0).
fff('LEFT',0, -1).
fff('ORIGIN',0, 0).
fff('UNITY',1, 1).
fff('NEG_UNITY',-1, -1).
fff('UP_RIGHT',-1, 1).
fff('DOWN_LEFT',1, -1).
fff('ZERO_BY_TWO',0, 2).
fff('TWO_BY_ZERO',2, 0).
fff('TWO_BY_TWO',2, 2).
fff('THREE_BY_THREE',3, 3).

%michod_solved_cor(TestID,Prog):- michod_solved(TestID,Prog).
michod_solved_cor(TestID,Prog,Clause):- 
  michod_solved(TestID,Prog),
  Head=..[solve,TestID,'I','O'],
  
  maplist(predifiy,Prog,Preds),
  findall(N-V,py_substs(N,V),Substs),
  subst_1L(['O'-'$VAR'('OUT'),'I'-'$VAR'('IN')|Substs],(Head:-Preds),Clause).

predifiy(X=Y,Preds):- Y=..[F|A],append(A,[X],O),
   get_typearray(F,AT),add_argType(O,AT,OO),Preds=..[f,F|OO].

get_typearray(F,[]):- var(F),!. 
get_typearray(F,AT):- michod_dsl(F,AT,_,_),!.
get_typearray(_F,[]).

add_argType([O|OO],[AT|ATT],[ATO|ATOO]):-
  add_1argType(O,AT,ATO),!,
  add_argType(OO,ATT,ATOO).
add_argType(A,_,A).

add_1argType(O,(A:'Boolean'),A=O):-!.
add_1argType(O,('returns':T),O:out(T)):-!.
add_1argType(O,(A:'Boolean,'),A=O):-!.
add_1argType(O,'Callable',O):- downcase_atom(O,O).
add_1argType(O,function:'Callable',O):- downcase_atom(O,O).
add_1argType(O,A:T,OT):- atom(A),atom(T),upcase_atom(A,UA),upcase_atom(T,UA),!,add_1argType(O,T,OT).
add_1argType(O,AT,O:AT):-!.
add_1argType(A,_,A).

read_solve(In,Prog):- read_line_to_string(In,Str),read_solve(In,Str,Prog).
read_solve(In,Str,[Var=Fun|Prog]):- str_between([s(Var),' = ',s(Fun)],Str),read_solve(In,Prog).
read_solve(_,Str,[]):- str_between(['return O',_],Str).

process_line(In,end_of_file):- close(In).
process_line(_, Str):- str_between(['import',_],Str),!.
process_line(_, Str):- str_between(['from',_],Str),!.
%process_line(_, Str):- str_between([s(N),'=',s(V)],Str),asserta_new(py_const(N,V)),pp(N=V).
process_line(_, Str):- str_between([''],Str),!.
process_line(In,Str):- str_between(['def solve_',s(TestID),'(I)',_],Str),!,
  read_solve(In,Prog),
  assertz_new(michod_solved(TestID,Prog)).

process_line(In,Str):- str_between(['def ',s(Fun),'(',_],Str),
 read_params(In,Params),!,
 %read_cmt(In,Cmt),!, 
  read_until_blank(In,Src),
  writeln(Fun+Params=Src),
  assertz_new(michod_dsl(Fun,Params,_Cmt,Src)).

ltrim(Str,Rest):- string_concat('\t',Rest,Str). ltrim(Str,Rest):- string_concat(' ',Rest,Str). ltrim(Str,Str).
rtrim(Str,Rest):- string_concat(Rest,'\t',Str). rtrim(Str,Rest):- string_concat(Rest,' ',Str). rtrim(Str,Str).

trim(Str,StrO):- Str==end_of_file,!,StrO="".
trim(Str,StrO):- ltrim(Str,StrM),rtrim(StrM,StrO).

str_between([Const|Template],Str):- ground(Const),string_concat(Const,Rest,Str),!,str_between(Template,Rest).
str_between([Const|Template],Str):- ground(Const),trim(Str,Rest),Rest\==Str,!,str_between([Const|Template],Rest).
str_between([s(Var)],Str):- var(Var),!,read_funct(Str,Var),!.
str_between([Var],Str):- var(Var),Str=Var,!.

str_between([s(Var),Const|Template],Str):- var(Var),ground(Const),sub_string(Str,Left,_,_,Const),
  sub_string(Str,0,Left,_,SVar),read_funct(SVar,Var),!,string_concat(SVar,Rest,Str),str_between([Const|Template],Rest).
str_between([SVar,Const|Template],Str):- var(SVar),ground(Const),sub_string(Str,Left,_,_,Const),
  sub_string(Str,0,Left,_,SVar),string_concat(SVar,Rest,Str),str_between([Const|Template],Rest).
%str_between(Template,Str):- trim(Str,S),S\==Str,!,str_between(Template,Str).

%writeln(params:Str),
read_params(In,Prog):- read_line_to_string(In,Str), trim(Str,StrS),read_params(In,StrS,Prog).

read_params(_,Str,['returns':Type]):- str_between([') ->',s(Type),':',_],Str),!.
read_params(In,Str,[Name:Type|Prog]):- str_between([s(Name),':',s(Type),','],Str),!,read_params(In,Prog).
read_params(In,Str,[Name:Type|Prog]):- str_between([s(Name),':',s(Type)],Str),!,read_params(In,Prog).
read_cmt(In,Cmt):- read_line_to_string(In,Str), str_between(['"""',SType,'"""'],Str),trim(SType,Cmt).

read_until_blank(In,Src):- read_line_to_string(In,Str),trim(Str,T),
 (T=="" -> Src=[] ; (read_until_blank(In,More),Src=[Str|More])).

read_funct(SFun,Fun):- trim(SFun,SS),
 trim_comma(SS,S),catch((atom_to_term(S,Fun,Vs),maplist(call,Vs)),_,atom_string(Fun,S)).

trim_comma(SS,S):- atom_concat(S,',',SS),!.
trim_comma(S,S).




end_of_file.

root /opt/logicmoo_workspace/bin/cls /dev/tty
% /opt/logicmoo_workspace/lib/swipl/library/prolog_xref loaded into prolog_xref 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/pldoc/doc_html loaded into pldoc_html 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_colour loaded into prolog_colour 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_xref loaded into prolog_xref 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/pldoc/doc_html loaded into pldoc_html 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_colour loaded into prolog_colour 0.00 sec, 0 clauses
solve('67a3c6ac', IN, OUT) :-
    [f(vmirror, IN:'Piece', OUT:'Piece')].
solve('68b16354', IN, OUT) :-
    [f(hmirror, IN:'Piece', OUT:'Piece')].
solve('74dd1130', IN, OUT) :-
    [f(dmirror, IN:'Piece', OUT:'Piece')].
solve('3c9b0459', IN, OUT) :-
    [f(rot180, IN:'Grid', OUT:'Grid')].
solve('6150a2bd', IN, OUT) :-
    [f(rot180, IN:'Grid', OUT:'Grid')].
solve('9172f3a0', IN, OUT) :-
    [f(upscale, IN:'Element', 'THREE':'Integer', OUT:'Element')].
solve('9dfd6313', IN, OUT) :-
    [f(dmirror, IN:'Piece', OUT:'Piece')].
solve(a416b8f3, IN, OUT) :-
    [f(hconcat, IN:'Grid', IN:'Grid', OUT:'Grid')].
solve(b1948b0a, IN, OUT) :-
    [f(replace, IN:'Grid', 'SIX':'Integer', 'TWO':'Integer', OUT:'Grid')].
solve(c59eb873, IN, OUT) :-
    [f(upscale, IN:'Element', 'TWO':'Integer', OUT:'Element')].
solve(c8f0f002, IN, OUT) :-
    [f(replace, IN:'Grid', 'SEVEN':'Integer', 'FIVE':'Integer', OUT:'Grid')].
solve(d10ecb37, IN, OUT) :-
    [f(crop, IN:'Grid', (0, 0):'Point', (2, 2):'Point', OUT:'Grid')].
solve(d511f180, IN, OUT) :-
    [f(switch, IN:'Grid', 'FIVE':'Integer', 'EIGHT':'Integer', OUT:'Grid')].
solve(ed36ccf7, IN, OUT) :-
    [f(rot270, IN:'Grid', OUT:'Grid')].
solve('4c4377d9', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:'Piece'),
      f(vconcat, X1:'Grid', IN:'Grid', OUT:'Grid')
    ].
solve('6d0aefbc', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, IN:'Grid', X1:'Grid', OUT:'Grid')
    ].
solve('6fa7a44f', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:'Piece'),
      f(vconcat, IN:'Grid', X1:'Grid', OUT:'Grid')
    ].
solve('5614dbcf', IN, OUT) :-
    [ f(replace, IN:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X1:'Grid'),
      f(downscale, X1:'Grid', 'THREE':'Integer', OUT:'Grid')
    ].
solve('5bd6f4ac', IN, OUT) :-
    [ f(tojvec, 'SIX':'Integer', X1:'Point'),
      f(crop, IN:'Grid', X1:'Point', (3, 3):'Point', OUT:'Grid')
    ].
solve('5582e5ca', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(canvas, X1:'Integer', (3, 3):'Point', OUT:'Grid')
    ].
solve('8be77c9e', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:'Piece'),
      f(vconcat, IN:'Grid', X1:'Grid', OUT:'Grid')
    ].
solve(c9e6f938, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, IN:'Grid', X1:'Grid', OUT:'Grid')
    ].
solve('2dee498d', IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':'Integer', X1:'Tuple'),
      f(first, X1:'Container', OUT:'Any')
    ].
solve('1cf80156', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve(32597951, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(delta, X1:'Patch', X2:'Indices'),
      f(fill, IN:'Grid', 'THREE':'Integer', X2:'Patch', OUT:'Grid')
    ].
solve('25ff71a9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(move, IN:'Grid', X2:'Object', (1, 0):'Point', OUT:'Grid')
    ].
solve('0b148d64', IN, OUT) :-
    [ f(partition, IN:'Grid', X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('1f85a75f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('23b5c85d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('9ecd008a', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X2:'Indices'),
      f(subgrid, X2:'Patch', X1:'Grid', OUT:'Grid')
    ].
solve(ac0a08a4, IN, OUT) :-
    [ f(colorcount, IN:'Element', 'ZERO':'Integer', X1:'Integer'),
      f(subtract, 'NINE':'Numerical', X1:'Numerical', X2:'Numerical'),
      f(upscale, IN:'Element', X2:'Integer', OUT:'Element')
    ].
solve(be94b721, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve(c909285e, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve(f25ffba3, IN, OUT) :-
    [ f(bottomhalf, IN:'Grid', X1:'Grid'),
      f(hmirror, X1:'Piece', X2:'Piece'),
      f(vconcat, X2:'Grid', X1:'Grid', OUT:'Grid')
    ].
solve(c1d99e64, IN, OUT) :-
    [ f(frontiers, IN:'Grid', X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(fill, IN:'Grid', 'TWO':'Integer', X2:'Patch', OUT:'Grid')
    ].
solve(b91ae062, IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:'IntegerSet'),
      f(decrement, X1:'Numerical', X2:'Numerical'),
      f(upscale, IN:'Element', X2:'Integer', OUT:'Element')
    ].
solve('3aa6fb7a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(mapply, corners, X1:'ContainerContainer', X2:'FrozenSet'),
      f(underfill, IN:'Grid', 'ONE':'Integer', X2:'Patch', OUT:'Grid')
    ].
solve('7b7f7511', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch, condition=X1, tophalf:'Any', lefthalf:'Any', X2:'Any'),
      f(X2, IN, OUT)
    ].
solve('4258a5f9', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(mapply, neighbors, X1:'ContainerContainer', X2:'FrozenSet'),
      f(fill, IN:'Grid', 'ONE':'Integer', X2:'Patch', OUT:'Grid')
    ].
solve('2dc579da', IN, OUT) :-
    [ f(vsplit, IN:'Grid', 'TWO':'Integer', X1:'Tuple'),
      f(rbind, hsplit, 'TWO':'Any', X2:'Callable'),
      f(mapply, X2, X1:'ContainerContainer', X3:'FrozenSet'),
      f(argmax, X3:'Container', numcolors, OUT:'Any')
    ].
solve('28bf18c6', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(hconcat, X3:'Grid', X3:'Grid', OUT:'Grid')
    ].
solve('3af2c5a8', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, IN:'Grid', X1:'Grid', X2:'Grid'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(vconcat, X2:'Grid', X3:'Grid', OUT:'Grid')
    ].
solve('44f52bb0', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(equality, X1:'Any', IN:'Any', returns=X2),
      f(branch, condition=X2, 'ONE':'Any', 'SEVEN':'Any', X3:'Any'),
      f(canvas, X3:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve('62c24649', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, IN:'Grid', X1:'Grid', X2:'Grid'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(vconcat, X2:'Grid', X3:'Grid', OUT:'Grid')
    ].
solve('67e8384a', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, IN:'Grid', X1:'Grid', X2:'Grid'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(vconcat, X2:'Grid', X3:'Grid', OUT:'Grid')
    ].
solve('7468f01a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(vmirror, X3:'Piece', OUT:'Piece')
    ].
solve('662c240a', IN, OUT) :-
    [ f(vsplit, IN:'Grid', 'THREE':'Integer', X1:'Tuple'),
      f(fork, equality, dmirror, identity, X2:'Callable'),
      f(compose, flip, X2, X3:'Callable'),
      f(extract, X1:'Container', X3, OUT:'Any')
    ].
solve('42a50994', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(merge, X2:'ContainerContainer', X3:'Container'),
      f(cover, IN:'Grid', X3:'Patch', OUT:'Grid')
    ].
solve('56ff96f3', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(fork, recolor, color, backdrop, X2:'Callable'),
      f(mapply, X2, X1:'ContainerContainer', X3:'FrozenSet'),
      f(paint, IN:'Grid', X3:'Object', OUT:'Grid')
    ].
solve('50cb2852', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(compose, backdrop, inbox, X2:'Callable'),
      f(mapply, X2, X1:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve('4347f46a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(fork, difference, toindices, box, X2:'Callable'),
      f(mapply, X2, X1:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve('46f33fce', IN, OUT) :-
    [ f(rot180, IN:'Grid', X1:'Grid'),
      f(downscale, X1:'Grid', 'TWO':'Integer', X2:'Grid'),
      f(rot180, X2:'Grid', X3:'Grid'),
      f(upscale, X3:'Element', 'FOUR':'Integer', OUT:'Element')
    ].
solve(a740d043, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(replace, X3:'Grid', 'ONE':'Integer', 'ZERO':'Integer', OUT:'Grid')
    ].
solve(a79310a0, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(move, IN:'Grid', X2:'Object', (1, 0):'Point', X3:'Grid'),
      f(replace, X3:'Grid', 'EIGHT':'Integer', 'TWO':'Integer', OUT:'Grid')
    ].
solve(aabf363d, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(replace, IN:'Grid', X1:'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(leastcolor, X2:'Element', X3:'Integer'),
      f(replace,
        X2:'Grid',
        X3:'Integer',
        X1:'Integer',
        OUT:'Grid')
    ].
solve(ae4f1146, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(rbind, colorcount, 'ONE':'Any', X2:'Callable'),
      f(argmax, X1:'Container', X2, X3:'Any'),
      f(subgrid, X3:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve(b27ca6d3, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'TWO':'Integer', X2:'FrozenSet'),
      f(mapply, outbox, X2:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(ce22a75a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(apply, outbox, X1:'Container', X2:'Container'),
      f(mapply, backdrop, X2:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'ONE':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(dc1df850, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X2:'Objects'),
      f(mapply, outbox, X2:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'ONE':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(f25fbde4, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(upscale, X3:'Element', 'TWO':'Integer', OUT:'Element')
    ].
solve('44d8ac46', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(apply, delta, X1:'Container', X2:'Container'),
      f(mfilter, X2:'Container', square, X3:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve('1e0a9b12', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:'Grid'),
      f(rbind, order, identity:'Any', X2:'Callable'),
      f(apply, X2, X1:'Container', X3:'Container'),
      f(rot90, X3:'Grid', OUT:'Grid')
    ].
solve('0d3d703e', IN, OUT) :-
    [ f(switch, IN:'Grid', 'THREE':'Integer', 'FOUR':'Integer', X1:'Grid'),
      f(switch, X1:'Grid', 'EIGHT':'Integer', 'NINE':'Integer', X2:'Grid'),
      f(switch, X2:'Grid', 'TWO':'Integer', 'SIX':'Integer', X3:'Grid'),
      f(switch, X3:'Grid', 'ONE':'Integer', 'FIVE':'Integer', OUT:'Grid')
    ].
solve('3618c87e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(merge, X2:'ContainerContainer', X3:'Container'),
      f(move, IN:'Grid', X3:'Object', (2, 0):'Point', OUT:'Grid')
    ].
solve('1c786137', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(argmax, X1:'Container', height, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(trim, X3:'Grid', OUT:'Grid')
    ].
solve('8efcae92', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ONE':'Integer', X2:'Objects'),
      f(compose, size, delta, X3:'Callable'),
      f(argmax, X2:'Container', X3, X4:'Any'),
      f(subgrid, X4:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('445eab21', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(fork, multiply, height, width, X2:'Callable'),
      f(argmax, X1:'Container', X2, X3:'Any'),
      f(color, X3:'Object', X4:'Integer'),
      f(canvas, X4:'Integer', (2, 2):'Point', OUT:'Grid')
    ].
solve('6f8cd79b', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(apply, initset, X1:'Container', X2:'Container'),
      f(rbind, bordering, IN:'Any', X3:'Callable'),
      f(mfilter, X2:'Container', X3, X4:'FrozenSet'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve('2013d3e2', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(lefthalf, X3:'Grid', X4:'Grid'),
      f(tophalf, X4:'Grid', OUT:'Grid')
    ].
solve('41e4d17e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(fork, combine, vfrontier, hfrontier, X2:'Callable'),
      f(compose, X2, center, X3:'Callable'),
      f(mapply, X3, X1:'ContainerContainer', X4:'FrozenSet'),
      f(underfill, IN:'Grid', 'SIX':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve('9565186b', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(argmax, X2:'Container', size, X3:'Any'),
      f(canvas, 'FIVE':'Integer', X1:'Point', X4:'Grid'),
      f(paint, X4:'Grid', X3:'Object', OUT:'Grid')
    ].
solve(aedd82e4, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X2:'Objects'),
      f(sizefilter, X2:'Container', 'ONE':'Integer', X3:'FrozenSet'),
      f(merge, X3:'ContainerContainer', X4:'Container'),
      f(fill, IN:'Grid', 'ONE':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve(bb43febb, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X2:'Objects'),
      f(compose, backdrop, inbox, X3:'Callable'),
      f(mapply, X3, X2:'ContainerContainer', X4:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve(e98196ab, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:'Objects'),
      f(merge, X3:'ContainerContainer', X4:'Container'),
      f(paint, X2:'Grid', X4:'Object', OUT:'Grid')
    ].
solve(f76d97a5, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(first, X1:'Container', X2:'Any'),
      f(last, X1:'Container', X3:'Any'),
      f(switch, IN:'Grid', X2:'Integer', X3:'Integer', X4:'Grid'),
      f(replace, X4:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', OUT:'Grid')
    ].
solve(ce9e57f2, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(fork, connect, ulcorner, centerofmass, X2:'Callable'),
      f(mapply, X2, X1:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X3:'Patch', X4:'Grid'),
      f(switch, X4:'Grid', 'EIGHT':'Integer', 'TWO':'Integer', OUT:'Grid')
    ].
solve('22eb0ac0', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(fork, recolor, color, backdrop, X2:'Callable'),
      f(apply, X2, X1:'Container', X3:'Container'),
      f(mfilter, X3:'Container', hline, X4:'FrozenSet'),
      f(paint, IN:'Grid', X4:'Object', OUT:'Grid')
    ].
solve('9f236235', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:'Grid'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(vmirror, X1:'Piece', X3:'Piece'),
      f(valmin, X2:'Container', width, X4:'Integer'),
      f(downscale, X3:'Grid', X4:'Integer', OUT:'Grid')
    ].
solve(a699fb00, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(shift, X1:'Patch', (0, 1):'Point', X2:'Patch'),
      f(shift, X1:'Patch', (0, -1):'Point', X3:'Patch'),
      f(intersection, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve('46442a0e', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(rot180, IN:'Grid', X2:'Grid'),
      f(rot270, IN:'Grid', X3:'Grid'),
      f(hconcat, IN:'Grid', X1:'Grid', X4:'Grid'),
      f(hconcat, X3:'Grid', X2:'Grid', X5:'Grid'),
      f(vconcat, X4:'Grid', X5:'Grid', OUT:'Grid')
    ].
solve('7fe24cdd', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(rot180, IN:'Grid', X2:'Grid'),
      f(rot270, IN:'Grid', X3:'Grid'),
      f(hconcat, IN:'Grid', X1:'Grid', X4:'Grid'),
      f(hconcat, X3:'Grid', X2:'Grid', X5:'Grid'),
      f(vconcat, X4:'Grid', X5:'Grid', OUT:'Grid')
    ].
solve('0ca9ddb6', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(mapply, dneighbors, X1:'ContainerContainer', X3:'FrozenSet'),
      f(mapply, ineighbors, X2:'ContainerContainer', X4:'FrozenSet'),
      f(fill, IN:'Grid', 'SEVEN':'Integer', X3:'Patch', X5:'Grid'),
      f(fill, X5:'Grid', 'FOUR':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve('543a7ed5', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'SIX':'Integer', X2:'Objects'),
      f(mapply, outbox, X2:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X3:'Patch', X4:'Grid'),
      f(mapply, delta, X2:'ContainerContainer', X5:'FrozenSet'),
      f(fill, X4:'Grid', 'FOUR':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('0520fde7', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(lefthalf, X1:'Grid', X2:'Grid'),
      f(righthalf, X1:'Grid', X3:'Grid'),
      f(vmirror, X3:'Piece', X4:'Piece'),
      f(cellwise, X2:'Grid', X4:'Grid', 'ZERO':'Integer', X5:'Grid'),
      f(replace, X5:'Grid', 'ONE':'Integer', 'TWO':'Integer', OUT:'Grid')
    ].
solve(dae9d2b5, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'FOUR':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'THREE':'Integer', X4:'Indices'),
      f(combine, X3:'Container', X4:'Container', X5:'Container'),
      f(fill, X1:'Grid', 'SIX':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('8d5021e8', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(hconcat, X1:'Grid', IN:'Grid', X2:'Grid'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(vconcat, X2:'Grid', X3:'Grid', X4:'Grid'),
      f(vconcat, X4:'Grid', X2:'Grid', X5:'Grid'),
      f(hmirror, X5:'Piece', OUT:'Piece')
    ].
solve('928ad970', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(subgrid, X1:'Patch', IN:'Grid', X2:'Grid'),
      f(trim, X2:'Grid', X3:'Grid'),
      f(leastcolor, X3:'Element', X4:'Integer'),
      f(inbox, X1:'Patch', X5:'Indices'),
      f(fill, IN:'Grid', X4:'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(b60334d2, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(replace, IN:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(mapply, dneighbors, X1:'ContainerContainer', X3:'FrozenSet'),
      f(mapply, ineighbors, X1:'ContainerContainer', X4:'FrozenSet'),
      f(fill, X2:'Grid', 'ONE':'Integer', X3:'Patch', X5:'Grid'),
      f(fill, X5:'Grid', 'FIVE':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve(b94a9452, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(leastcolor, X3:'Element', X4:'Integer'),
      f(mostcolor, X3:'Element', X5:'Integer'),
      f(switch, X3:'Grid', X4:'Integer', X5:'Integer', OUT:'Grid')
    ].
solve(d037b0a7, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(rbind, shoot, (1, 0):'Any', X2:'Callable'),
      f(compose, X2, center, X3:'Callable'),
      f(fork, recolor, color, X3, X4:'Callable'),
      f(mapply, X4, X1:'ContainerContainer', X5:'FrozenSet'),
      f(paint, IN:'Grid', X5:'Object', OUT:'Grid')
    ].
solve(d0f5fe59, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(size, X1:'Container', X2:'Integer'),
      f(astuple, X2:'Integer', X2:'Integer', X3:'Point'),
      f(canvas, 'ZERO':'Integer', X3:'Point', X4:'Grid'),
      f(shoot, (0, 0):'Point', (1, 1):'Point', X5:'Indices'),
      f(fill, X4:'Grid', 'EIGHT':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(e3497940, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(vmirror, X2:'Piece', X3:'Piece'),
      f(objects,
        X3:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:'Objects'),
      f(merge, X4:'ContainerContainer', X5:'Container'),
      f(paint, X1:'Grid', X5:'Object', OUT:'Grid')
    ].
solve(e9afcf9a, IN, OUT) :-
    [ f(astuple, 'TWO':'Integer', 'ONE':'Integer', X1:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X1:'Point', X2:'Grid'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(hconcat, X2:'Grid', X3:'Grid', X4:'Grid'),
      f(hconcat, X4:'Grid', X4:'Grid', X5:'Grid'),
      f(hconcat, X5:'Grid', X4:'Grid', OUT:'Grid')
    ].
solve('48d8fb45', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(matcher, size, 'ONE':'Any', X2:'Callable'),
      f(extract, X1:'Container', X2, X3:'Any'),
      f(lbind, adjacent, X3:'Any', X4:'Callable'),
      f(extract, X1:'Container', X4, X5:'Any'),
      f(subgrid, X5:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve(d406998b, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(ofcolor, X1:'Grid', 'FIVE':'Integer', X2:'Indices'),
      f(compose, even, last, X3:'Callable'),
      f(sfilter, X2:'Container', X3, X4:'Container'),
      f(fill, X1:'Grid', 'THREE':'Integer', X4:'Patch', X5:'Grid'),
      f(vmirror, X5:'Piece', OUT:'Piece')
    ].
solve(5.117e+65, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(matcher, numcolors, 'TWO':'Any', X2:'Callable'),
      f(extract, X1:'Container', X2, X3:'Any'),
      f(subgrid, X3:'Patch', IN:'Grid', X4:'Grid'),
      f(mostcolor, X3:'Element', X5:'Integer'),
      f(replace, X4:'Grid', 'EIGHT':'Integer', X5:'Integer', OUT:'Grid')
    ].
solve('3906de3d', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:'Grid'),
      f(rbind, order, identity:'Any', X2:'Callable'),
      f(switch, X1:'Grid', 'ONE':'Integer', 'TWO':'Integer', X3:'Grid'),
      f(apply, X2, X3:'Container', X4:'Container'),
      f(switch, X4:'Grid', 'ONE':'Integer', 'TWO':'Integer', X5:'Grid'),
      f(cmirror, X5:'Piece', OUT:'Piece')
    ].
solve('00d62c1b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(rbind, bordering, IN:'Any', X3:'Callable'),
      f(compose, flip, X3, X4:'Callable'),
      f(mfilter, X2:'Container', X4, X5:'FrozenSet'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('7b6016b9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(rbind, bordering, IN:'Any', X2:'Callable'),
      f(compose, flip, X2, X3:'Callable'),
      f(mfilter, X1:'Container', X3, X4:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X4:'Patch', X5:'Grid'),
      f(replace, X5:'Grid', 'ZERO':'Integer', 'THREE':'Integer', OUT:'Grid')
    ].
solve('67385a82', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'THREE':'Integer', X2:'Objects'),
      f(sizefilter, X2:'Container', 'ONE':'Integer', X3:'FrozenSet'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(merge, X4:'ContainerContainer', X5:'Container'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(a5313dff, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(rbind, bordering, IN:'Any', X3:'Callable'),
      f(compose, flip, X3, X4:'Callable'),
      f(mfilter, X2:'Container', X4, X5:'FrozenSet'),
      f(fill, IN:'Grid', 'ONE':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(ea32f347, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(replace, IN:'Grid', 'FIVE':'Integer', 'FOUR':'Integer', X2:'Grid'),
      f(argmin, X1:'Container', size, X3:'Any'),
      f(argmax, X1:'Container', size, X4:'Any'),
      f(fill, X2:'Grid', 'ONE':'Integer', X4:'Patch', X5:'Grid'),
      f(fill, X5:'Grid', 'TWO':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(d631b094, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(other, X1:'Container', 'ZERO':'Any', X2:'Any'),
      f(ofcolor, IN:'Grid', X2:'Integer', X3:'Indices'),
      f(size, X3:'Container', X4:'Integer'),
      f(astuple, 'ONE':'Integer', X4:'Integer', X5:'Point'),
      f(canvas, X2:'Integer', X5:'Point', OUT:'Grid')
    ].
solve('10fcaaa3', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(hconcat, IN:'Grid', IN:'Grid', X2:'Grid'),
      f(vconcat, X2:'Grid', X2:'Grid', X3:'Grid'),
      f(ofcolor, X3:'Grid', X1:'Integer', X4:'Indices'),
      f(mapply, ineighbors, X4:'ContainerContainer', X5:'FrozenSet'),
      f(underfill, X3:'Grid', 'EIGHT':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('007bbfb7', IN, OUT) :-
    [ f(hupscale, IN:'Grid', 'THREE':'Integer', X1:'Grid'),
      f(vupscale, X1:'Grid', 'THREE':'Integer', X2:'Grid'),
      f(hconcat, IN:'Grid', IN:'Grid', X3:'Grid'),
      f(hconcat, X3:'Grid', IN:'Grid', X4:'Grid'),
      f(vconcat, X4:'Grid', X4:'Grid', X5:'Grid'),
      f(vconcat, X5:'Grid', X4:'Grid', X6:'Grid'),
      f(cellwise, X2:'Grid', X6:'Grid', 'ZERO':'Integer', OUT:'Grid')
    ].
solve('496994bd', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(height, IN:'Piece', X2:'Integer'),
      f(halve, X2:'Numerical', X3:'Numerical'),
      f(astuple, X3:'Integer', X1:'Integer', X4:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X4:'Point', X5:'Grid'),
      f(hmirror, X5:'Piece', X6:'Piece'),
      f(vconcat, X5:'Grid', X6:'Grid', OUT:'Grid')
    ].
solve('1f876c06', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(compose, last, first, X2:'Callable'),
      f(power, last, 'TWO':'Integer', X3:'Callable'),
      f(fork, connect, X2, X3, X4:'Callable'),
      f(fork, recolor, color, X4, X5:'Callable'),
      f(mapply, X5, X1:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', OUT:'Grid')
    ].
solve('05f2a901', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(colorfilter, X1:'Objects', 'EIGHT':'Integer', X4:'Objects'),
      f(first, X4:'Container', X5:'Any'),
      f(gravitate, X3:'Patch', X5:'Patch', X6:'Point'),
      f(move, IN:'Grid', X3:'Object', X6:'Point', OUT:'Grid')
    ].
solve('39a8645d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(apply, color, X2:'Container', X3:'Container'),
      f(mostcommon, X3:'Container', X4:'Any'),
      f(matcher, color, X4:'Any', X5:'Callable'),
      f(extract, X1:'Container', X5, X6:'Any'),
      f(subgrid, X6:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('1b2d62fb', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(intersection, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(replace, X1:'Grid', 'NINE':'Integer', 'ZERO':'Integer', X6:'Grid'),
      f(fill, X6:'Grid', 'EIGHT':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('90c28cc7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(dedupe, X3:'Tuple', X4:'Tuple'),
      f(rot90, X4:'Grid', X5:'Grid'),
      f(dedupe, X5:'Tuple', X6:'Tuple'),
      f(rot270, X6:'Grid', OUT:'Grid')
    ].
solve(b6afb2da, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(replace, IN:'Grid', 'FIVE':'Integer', 'TWO':'Integer', X2:'Grid'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X3:'Objects'),
      f(mapply, box, X3:'ContainerContainer', X4:'FrozenSet'),
      f(fill, X2:'Grid', 'FOUR':'Integer', X4:'Patch', X5:'Grid'),
      f(mapply, corners, X3:'ContainerContainer', X6:'FrozenSet'),
      f(fill, X5:'Grid', 'ONE':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(b9b7f026, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(rbind, adjacent, X2:'Any', X3:'Callable'),
      f(remove, X2:'Any', X1:'Container', X4:'Container'),
      f(extract, X4:'Container', X3, X5:'Any'),
      f(color, X5:'Object', X6:'Integer'),
      f(canvas, X6:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve(ba97ae07, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(apply, color, X2:'Container', X3:'Container'),
      f(mostcommon, X3:'Container', X4:'Any'),
      f(ofcolor, IN:'Grid', X4:'Integer', X5:'Indices'),
      f(backdrop, X5:'Patch', X6:'Indices'),
      f(fill, IN:'Grid', X4:'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(c9f8e694, IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(astuple, X1:'Integer', 'ONE':'Integer', X4:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X4:'Point', X5:'Grid'),
      f(hupscale, X5:'Grid', X2:'Integer', X6:'Grid'),
      f(fill, X6:'Grid', 'ZERO':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(d23f8c26, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(width, IN:'Piece', X2:'Integer'),
      f(halve, X2:'Numerical', X3:'Numerical'),
      f(matcher, last, X3:'Any', X4:'Callable'),
      f(compose, flip, X4, X5:'Callable'),
      f(sfilter, X1:'Container', X5, X6:'Container'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(d5d6de2d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sfilter, X1:'Container', square, X2:'Container'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(compose, backdrop, inbox, X4:'Callable'),
      f(mapply, X4, X3:'ContainerContainer', X5:'FrozenSet'),
      f(replace, IN:'Grid', 'TWO':'Integer', 'ZERO':'Integer', X6:'Grid'),
      f(fill, X6:'Grid', 'THREE':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(dbc1a6ce, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(product, X1:'Container', X1:'Container', X2:'FrozenSet'),
      f(fork, connect, first, last, X3:'Callable'),
      f(apply, X3, X2:'Container', X4:'Container'),
      f(fork, either, vline, hline, X5:'Callable'),
      f(mfilter, X4:'Container', X5, X6:'FrozenSet'),
      f(underfill, IN:'Grid', 'EIGHT':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(ded97339, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(product, X1:'Container', X1:'Container', X2:'FrozenSet'),
      f(fork, connect, first, last, X3:'Callable'),
      f(apply, X3, X2:'Container', X4:'Container'),
      f(fork, either, vline, hline, X5:'Callable'),
      f(mfilter, X4:'Container', X5, X6:'FrozenSet'),
      f(underfill, IN:'Grid', 'EIGHT':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(ea786f4a, IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(shoot, (0, 0):'Point', (1, 1):'Point', X2:'Indices'),
      f(decrement, X1:'Numerical', X3:'Numerical'),
      f(tojvec, X3:'Integer', X4:'Point'),
      f(shoot, X4:'Point', (1, -1):'Point', X5:'Indices'),
      f(combine, X2:'Container', X5:'Container', X6:'Container'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve('08ed6ac7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(order, X1:'Container', height, X3:'Tuple'),
      f(size, X2:'Container', X4:'Integer'),
      f(interval, X4:'Integer', 'ZERO':'Integer', 'NEG_ONE':'Integer', X5:'Tuple'),
      f(mpapply, recolor, X5:'Tuple', X3:'Tuple', X6:'Tuple'),
      f(paint, IN:'Grid', X6:'Object', OUT:'Grid')
    ].
solve(40853293, IN, OUT) :-
    [ f(partition, IN:'Grid', X1:'Objects'),
      f(fork, recolor, color, backdrop, X2:'Callable'),
      f(apply, X2, X1:'Container', X3:'Container'),
      f(mfilter, X3:'Container', hline, X4:'FrozenSet'),
      f(mfilter, X3:'Container', vline, X5:'FrozenSet'),
      f(paint, IN:'Grid', X4:'Object', X6:'Grid'),
      f(paint, X6:'Grid', X5:'Object', OUT:'Grid')
    ].
solve('5521c0d9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(cover, IN:'Grid', X2:'Patch', X3:'Grid'),
      f(chain, toivec, invert, height, X4:'Callable'),
      f(fork, shift, identity, X4, X5:'Callable'),
      f(mapply, X5, X1:'ContainerContainer', X6:'FrozenSet'),
      f(paint, X3:'Grid', X6:'Object', OUT:'Grid')
    ].
solve(f8ff0b80, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(order, X1:'Container', size, X2:'Tuple'),
      f(apply, color, X2:'Container', X3:'Container'),
      f(rbind, canvas, (1, 1):'Any', X4:'Callable'),
      f(apply, X4, X3:'Container', X5:'Container'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(hmirror, X6:'Piece', OUT:'Piece')
    ].
solve('85c4e7cd', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(compose, invert, size, X2:'Callable'),
      f(order, X1:'Container', size, X3:'Tuple'),
      f(order, X1:'Container', X2, X4:'Tuple'),
      f(apply, color, X4:'Container', X5:'Container'),
      f(mpapply, recolor, X5:'Tuple', X3:'Tuple', X6:'Tuple'),
      f(paint, IN:'Grid', X6:'Object', OUT:'Grid')
    ].
solve(d2abd087, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(matcher, size, 'SIX':'Any', X2:'Callable'),
      f(compose, flip, X2, X3:'Callable'),
      f(mfilter, X1:'Container', X2, X4:'FrozenSet'),
      f(mfilter, X1:'Container', X3, X5:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X4:'Patch', X6:'Grid'),
      f(fill, X6:'Grid', 'ONE':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('017c7c7b', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(equality, X1:'Any', X2:'Any', returns=X3),
      f(crop, IN:'Grid', (2, 0):'Point', (3, 3):'Point', X4:'Grid'),
      f(branch, condition=X3, X2:'Any', X4:'Any', X5:'Any'),
      f(vconcat, IN:'Grid', X5:'Grid', X6:'Grid'),
      f(replace, X6:'Grid', 'ONE':'Integer', 'TWO':'Integer', OUT:'Grid')
    ].
solve('363442ee', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(crop, IN:'Grid', (0, 0):'Point', (3, 3):'Point', X2:'Grid'),
      f(asobject, X2:'Grid', X3:'Object'),
      f(lbind, shift, X3:'Any', X4:'Callable'),
      f(compose, X4, decrement, X5:'Callable'),
      f(mapply, X5, X1:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', OUT:'Grid')
    ].
solve('5168d44c', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':'Integer', X1:'Indices'),
      f(height, X1:'Piece', X2:'Integer'),
      f(equality, X2:'Any', 'ONE':'Any', returns=X3),
      f(branch, condition=X3, (0, 2):'Any', (2, 0):'Any', X4:'Any'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X5:'Indices'),
      f(recolor, 'TWO':'Integer', X5:'Patch', X6:'Object'),
      f(move, IN:'Grid', X6:'Object', X4:'Point', OUT:'Grid')
    ].
solve(e9614598, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(fork, add, first, last, X2:'Callable'),
      f(X2, X1, X3),
      f(halve, X3:'Numerical', X4:'Numerical'),
      f(dneighbors, X4:'Point', X5:'Indices'),
      f(insert, X4:'Any', X5:'FrozenSet', X6:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(d9fac9be, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(argmax, X2:'Container', size, X3:'Any'),
      f(color, X3:'Object', X4:'Integer'),
      f(remove, 'ZERO':'Any', X1:'Container', X5:'Container'),
      f(other, X5:'Container', X4:'Any', X6:'Any'),
      f(canvas, X6:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve(e50d258f, IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(astuple, 'NINE':'Integer', X1:'Integer', X2:'Point'),
      f(canvas, 'ZERO':'Integer', X2:'Point', X3:'Grid'),
      f(vconcat, IN:'Grid', X3:'Grid', X4:'Grid'),
      f(objects,
        X4:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X5:'Objects'),
      f(rbind, colorcount, 'TWO':'Any', X6:'Callable'),
      f(argmax, X5:'Container', X6, X7:'Any'),
      f(subgrid, X7:'Patch', IN:'Grid', OUT:'Grid')
    ].
solve('810b9b61', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(apply, toindices, X1:'Container', X2:'Container'),
      f(fork, either, vline, hline, X3:'Callable'),
      f(sfilter, X2:'Container', X3, X4:'Container'),
      f(difference, X2:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(fork, equality, identity, box, X6:'Callable'),
      f(mfilter, X5:'Container', X6, X7:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('54d82841', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(compose, last, center, X3:'Callable'),
      f(apply, X3, X2:'Container', X4:'Container'),
      f(decrement, X1:'Numerical', X5:'Numerical'),
      f(lbind, astuple, X5:'Any', X6:'Callable'),
      f(apply, X6, X4:'Container', X7:'Container'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('60b61512', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(rbind, subgrid, IN:'Any', X2:'Callable'),
      f(compose, asindices, X2, X3:'Callable'),
      f(fork, shift, X3, ulcorner, X4:'Callable'),
      f(mapply, X4, X1:'ContainerContainer', X5:'FrozenSet'),
      f(fill, IN:'Grid', 'SEVEN':'Integer', X5:'Patch', X6:'Grid'),
      f(merge, X1:'ContainerContainer', X7:'Container'),
      f(paint, X6:'Grid', X7:'Object', OUT:'Grid')
    ].
solve('25d8a9c8', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(sizefilter, X2:'Container', 'THREE':'Integer', X3:'FrozenSet'),
      f(mfilter, X3:'Container', hline, X4:'FrozenSet'),
      f(toindices, X4:'Patch', X5:'Indices'),
      f(difference, X1:'FrozenSet', X5:'FrozenSet', X6:'FrozenSet'),
      f(fill, IN:'Grid', 'FIVE':'Integer', X5:'Patch', X7:'Grid'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve('239be575', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(lbind, contained, 'TWO':'Any', X2:'Callable'),
      f(compose, X2, palette, X3:'Callable'),
      f(sfilter, X1:'Container', X3, X4:'Container'),
      f(size, X4:'Container', X5:'Integer'),
      f(greater, X5:'Integer', 'ONE':'Integer', returns=X6),
      f(branch, condition=X6, 'ZERO':'Any', 'EIGHT':'Any', X7:'Any'),
      f(canvas, X7:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve('67a423a3', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(colorfilter, X2:'Objects', X1:'Integer', X3:'Objects'),
      f(merge, X3:'ContainerContainer', X4:'Container'),
      f(delta, X4:'Patch', X5:'Indices'),
      f(first, X5:'Container', X6:'Any'),
      f(neighbors, X6:'Point', X7:'Indices'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('5c0a986e', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X2:'Indices'),
      f(lrcorner, X1:'Patch', X3:'Point'),
      f(ulcorner, X2:'Patch', X4:'Point'),
      f(shoot, X3:'Point', (1, 1):'Point', X5:'Indices'),
      f(shoot, X4:'Point', (-1, -1):'Point', X6:'Indices'),
      f(fill, IN:'Grid', 'TWO':'Integer', X5:'Patch', X7:'Grid'),
      f(fill, X7:'Grid', 'ONE':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve('6430c8c4', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(astuple, 'FOUR':'Integer', 'FOUR':'Integer', X3:'Point'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X5:'Indices'),
      f(intersection, X4:'FrozenSet', X5:'FrozenSet', X6:'FrozenSet'),
      f(canvas, 'ZERO':'Integer', X3:'Point', X7:'Grid'),
      f(fill, X7:'Grid', 'THREE':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve('94f9d214', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(astuple, 'FOUR':'Integer', 'FOUR':'Integer', X5:'Point'),
      f(canvas, 'ZERO':'Integer', X5:'Point', X6:'Grid'),
      f(intersection, X3:'FrozenSet', X4:'FrozenSet', X7:'FrozenSet'),
      f(fill, X6:'Grid', 'TWO':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(a1570a43, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'THREE':'Integer', X2:'Indices'),
      f(recolor, 'TWO':'Integer', X1:'Patch', X3:'Object'),
      f(ulcorner, X2:'Patch', X4:'Point'),
      f(ulcorner, X1:'Patch', X5:'Point'),
      f(subtract, X4:'Numerical', X5:'Numerical', X6:'Numerical'),
      f(increment, X6:'Numerical', X7:'Numerical'),
      f(move, IN:'Grid', X3:'Object', X7:'Point', OUT:'Grid')
    ].
solve(ce4f8723, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(intersection, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(astuple, 'FOUR':'Integer', 'FOUR':'Integer', X6:'Point'),
      f(canvas, 'THREE':'Integer', X6:'Point', X7:'Grid'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(d13f3404, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(rbind, shoot, (1, 1):'Any', X2:'Callable'),
      f(compose, X2, center, X3:'Callable'),
      f(fork, recolor, color, X3, X4:'Callable'),
      f(mapply, X4, X1:'ContainerContainer', X5:'FrozenSet'),
      f(astuple, 'SIX':'Integer', 'SIX':'Integer', X6:'Point'),
      f(canvas, 'ZERO':'Integer', X6:'Point', X7:'Grid'),
      f(paint, X7:'Grid', X5:'Object', OUT:'Grid')
    ].
solve(dc433765, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'FOUR':'Integer', X2:'Indices'),
      f(first, X1:'Container', X3:'Any'),
      f(first, X2:'Container', X4:'Any'),
      f(subtract, X4:'Numerical', X3:'Numerical', X5:'Numerical'),
      f(sign, X5:'Numerical', X6:'Numerical'),
      f(recolor, 'THREE':'Integer', X1:'Patch', X7:'Object'),
      f(move, IN:'Grid', X7:'Object', X6:'Point', OUT:'Grid')
    ].
solve(f2829549, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(intersection, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(shape, X1:'Piece', X6:'Point'),
      f(canvas, 'ZERO':'Integer', X6:'Point', X7:'Grid'),
      f(fill, X7:'Grid', 'THREE':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve(fafffa47, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(shape, X2:'Piece', X3:'Point'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X5:'Indices'),
      f(intersection, X4:'FrozenSet', X5:'FrozenSet', X6:'FrozenSet'),
      f(canvas, 'ZERO':'Integer', X3:'Point', X7:'Grid'),
      f(fill, X7:'Grid', 'TWO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(fcb5c309, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(colorfilter, X2:'Objects', X1:'Integer', X3:'Objects'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(argmax, X4:'Container', size, X5:'Any'),
      f(color, X5:'Object', X6:'Integer'),
      f(subgrid, X5:'Patch', IN:'Grid', X7:'Grid'),
      f(replace,
        X7:'Grid',
        X6:'Integer',
        X1:'Integer',
        OUT:'Grid')
    ].
solve(ff805c23, IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:'Piece'),
      f(vmirror, IN:'Piece', X2:'Piece'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X3:'Indices'),
      f(subgrid, X3:'Patch', X1:'Grid', X4:'Grid'),
      f(subgrid, X3:'Patch', X2:'Grid', X5:'Grid'),
      f(palette, X4:'Element', X6:'IntegerSet'),
      f(contained, 'ONE':'Any', X6:'Container', returns=X7),
      f(branch, condition=X7, X5:'Any', X4:'Any', OUT:'Any')
    ].
solve(e76a88a6, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', numcolors, X2:'Any'),
      f(normalize, X2:'Patch', X3:'Patch'),
      f(remove, X2:'Any', X1:'Container', X4:'Container'),
      f(apply, ulcorner, X4:'Container', X5:'Container'),
      f(lbind, shift, X3:'Any', X6:'Callable'),
      f(mapply, X6, X5:'ContainerContainer', X7:'FrozenSet'),
      f(paint, IN:'Grid', X7:'Object', OUT:'Grid')
    ].
solve('7c008303', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':'Integer', X1:'Indices'),
      f(subgrid, X1:'Patch', IN:'Grid', X2:'Grid'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(replace, IN:'Grid', 'THREE':'Integer', 'ZERO':'Integer', X4:'Grid'),
      f(replace, X4:'Grid', 'EIGHT':'Integer', 'ZERO':'Integer', X5:'Grid'),
      f(compress, X5:'Grid', X6:'Grid'),
      f(upscale, X6:'Element', 'THREE':'Integer', X7:'Element'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X3:'Patch', OUT:'Grid')
    ].
solve('7f4411dc', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(rbind, difference, X2:'Any', X3:'Callable'),
      f(rbind, greater, 'TWO':'Any', X4:'Callable'),
      f(chain, X4, size, X3, X5:'Callable'),
      f(compose, X5, dneighbors, X6:'Callable'),
      f(sfilter, X2:'Container', X6, X7:'Container'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(b230c067, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(apply, normalize, X2:'Container', X3:'Container'),
      f(leastcommon, X3:'Container', X4:'Any'),
      f(matcher, normalize, X4:'Any', X5:'Callable'),
      f(extract, X1:'Container', X5, X6:'Any'),
      f(replace, IN:'Grid', 'EIGHT':'Integer', 'ONE':'Integer', X7:'Grid'),
      f(fill, X7:'Grid', 'TWO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(e8593010, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(sizefilter, X1:'Container', 'TWO':'Integer', X3:'FrozenSet'),
      f(merge, X2:'ContainerContainer', X4:'Container'),
      f(fill, IN:'Grid', 'THREE':'Integer', X4:'Patch', X5:'Grid'),
      f(merge, X3:'ContainerContainer', X6:'Container'),
      f(fill, X5:'Grid', 'TWO':'Integer', X6:'Patch', X7:'Grid'),
      f(replace, X7:'Grid', 'ZERO':'Integer', 'ONE':'Integer', OUT:'Grid')
    ].
solve('6d75e8bb', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(ulcorner, X2:'Patch', X3:'Point'),
      f(subgrid, X2:'Patch', IN:'Grid', X4:'Grid'),
      f(replace, X4:'Grid', 'ZERO':'Integer', 'TWO':'Integer', X5:'Grid'),
      f(asobject, X5:'Grid', X6:'Object'),
      f(shift, X6:'Patch', X3:'Point', X7:'Patch'),
      f(paint, IN:'Grid', X7:'Object', OUT:'Grid')
    ].
solve('3f7978a0', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(matcher, color, 'FIVE':'Any', X2:'Callable'),
      f(extract, X1:'Container', X2, X3:'Any'),
      f(ulcorner, X3:'Patch', X4:'Point'),
      f(subtract, X4:'Numerical', (1, 0):'Numerical', X5:'Numerical'),
      f(shape, X3:'Piece', X6:'Point'),
      f(add, X6:'Numerical', (2, 0):'Numerical', X7:'Numerical'),
      f(crop, IN:'Grid', X5:'Point', X7:'Point', OUT:'Grid')
    ].
solve('1190e5a7', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(frontiers, IN:'Grid', X2:'Objects'),
      f(sfilter, X2:'Container', vline, X3:'Container'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(astuple, X4:'Integer', X3:'Integer', X5:'Point'),
      f(apply, size, X5:'Container', X6:'Container'),
      f(increment, X6:'Numerical', X7:'Numerical'),
      f(canvas, X1:'Integer', X7:'Point', OUT:'Grid')
    ].
solve('6e02f1e3', IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:'IntegerSet'),
      f(canvas, 'ZERO':'Integer', (3, 3):'Point', X2:'Grid'),
      f(equality, X1:'Any', 'THREE':'Any', returns=X3),
      f(equality, X1:'Any', 'TWO':'Any', returns=X4),
      f(branch, condition=X3, (2, 0):'Any', (0, 0):'Any', X5:'Any'),
      f(branch, condition=X4, (2, 2):'Any', (0, 2):'Any', X6:'Any'),
      f(connect, X5:'Point', X6:'Point', X7:'Indices'),
      f(fill, X2:'Grid', 'FIVE':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(a61f2674, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(argmin, X1:'Container', size, X3:'Any'),
      f(replace, IN:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X4:'Grid'),
      f(recolor, 'ONE':'Integer', X2:'Patch', X5:'Object'),
      f(recolor, 'TWO':'Integer', X3:'Patch', X6:'Object'),
      f(combine, X5:'Container', X6:'Container', X7:'Container'),
      f(paint, X4:'Grid', X7:'Object', OUT:'Grid')
    ].
solve(fcc82909, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(rbind, add, (1, 0):'Any', X2:'Callable'),
      f(compose, X2, llcorner, X3:'Callable'),
      f(compose, toivec, numcolors, X4:'Callable'),
      f(fork, add, lrcorner, X4, X5:'Callable'),
      f(fork, astuple, X3, X5, X6:'Callable'),
      f(compose, box, X6, X7:'Callable'),
      f(mapply, X7, X1:'ContainerContainer', X8:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('72ca375d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(rbind, subgrid, IN:'Any', X3:'Callable'),
      f(apply, X3, X2:'Container', X4:'Container'),
      f(apply, vmirror, X4:'Container', X5:'Container'),
      f(papply, equality, X4:'Tuple', X5:'Tuple', X6:'Tuple'),
      f(pair, X4:'Tuple', X6:'Tuple', X7:'TupleTuple'),
      f(extract, X7:'Container', last, X8:'Any'),
      f(first, X8:'Container', OUT:'Any')
    ].
solve('253bf280', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(prapply, connect, X1, X1, X2),
      f(rbind, greater, 'ONE':'Any', X3:'Callable'),
      f(compose, X3, size, X4:'Callable'),
      f(sfilter, X2:'Container', X4, X5:'Container'),
      f(fork, either, vline, hline, X6:'Callable'),
      f(mfilter, X5:'Container', X6, X7:'FrozenSet'),
      f(fill, IN:'Grid', 'THREE':'Integer', X7:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'EIGHT':'Integer', X1:'Patch', OUT:'Grid')
    ].
solve('694f12f3', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'FOUR':'Integer', X2:'Objects'),
      f(compose, backdrop, inbox, X3:'Callable'),
      f(argmin, X2:'Container', size, X4:'Any'),
      f(argmax, X2:'Container', size, X5:'Any'),
      f(X3, X4, X6),
      f(X3, X5, X7),
      f(fill, IN:'Grid', 'ONE':'Integer', X6:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'TWO':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('1f642eb9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(first, X3:'Container', X4:'Any'),
      f(rbind, gravitate, X4:'Any', X5:'Callable'),
      f(compose, crement, X5, X6:'Callable'),
      f(fork, shift, identity, X6, X7:'Callable'),
      f(mapply, X7, X2:'ContainerContainer', X8:'FrozenSet'),
      f(paint, IN:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('31aa019c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(first, X2:'Container', X3:'Any'),
      f(neighbors, X3:'Point', X4:'Indices'),
      f(astuple, 'TEN':'Integer', 'TEN':'Integer', X5:'Point'),
      f(canvas, 'ZERO':'Integer', X5:'Point', X6:'Grid'),
      f(initset, X3:'Any', X7:'FrozenSet'),
      f(fill, X6:'Grid', X1:'Integer', X7:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'TWO':'Integer', X4:'Patch', OUT:'Grid')
    ].
solve('27a28665', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(valmax, X1:'Container', size, X2:'Integer'),
      f(equality, X2:'Any', 'ONE':'Any', returns=X3),
      f(equality, X2:'Any', 'FOUR':'Any', returns=X4),
      f(equality, X2:'Any', 'FIVE':'Any', returns=X5),
      f(branch, condition=X3, 'TWO':'Any', 'ONE':'Any', X6:'Any'),
      f(branch, condition=X4, 'THREE':'Any', X6:'Any', X7:'Any'),
      f(branch, condition=X5, 'SIX':'Any', X7:'Any', X8:'Any'),
      f(canvas, X8:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve('7ddcd7ec', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(first, X3:'Container', X4:'Any'),
      f(color, X4:'Object', X5:'Integer'),
      f(lbind, position, X4:'Any', X6:'Callable'),
      f(fork, shoot, center, X6, X7:'Callable'),
      f(mapply, X7, X2:'ContainerContainer', X8:'FrozenSet'),
      f(fill, IN:'Grid', X5:'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('3bd67248', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(decrement, X1:'Numerical', X2:'Numerical'),
      f(decrement, X2:'Numerical', X3:'Numerical'),
      f(astuple, X3:'Integer', 'ONE':'Integer', X4:'Point'),
      f(astuple, X2:'Integer', 'ONE':'Integer', X5:'Point'),
      f(shoot, X4:'Point', (-1, 1):'Point', X6:'Indices'),
      f(shoot, X5:'Point', (0, 1):'Point', X7:'Indices'),
      f(fill, IN:'Grid', 'TWO':'Integer', X6:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'FOUR':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('73251a56', IN, OUT) :-
    [ f(dmirror, IN:'Piece', X1:'Piece'),
      f(papply, pair, IN:'Tuple', X1:'Tuple', X2:'Tuple'),
      f(lbind, apply, maximum:'Any', X3:'Callable'),
      f(apply, X3, X2:'Container', X4:'Container'),
      f(mostcolor, X4:'Element', X5:'Integer'),
      f(replace, X4:'Grid', 'ZERO':'Integer', X5:'Integer', X6:'Grid'),
      f(index, X6:'Grid', (0, 0):'Point', X7:'Integer'),
      f(shoot, (0, 0):'Point', (1, 1):'Point', X8:'Indices'),
      f(fill, X6:'Grid', X7:'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('25d487eb', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(ofcolor, IN:'Grid', X1:'Integer', X3:'Indices'),
      f(center, X3:'Patch', X4:'Point'),
      f(merge, X2:'ContainerContainer', X5:'Container'),
      f(center, X5:'Patch', X6:'Point'),
      f(subtract, X6:'Numerical', X4:'Numerical', X7:'Numerical'),
      f(shoot, X4:'Point', X7:'Point', X8:'Indices'),
      f(underfill,
        IN:'Grid',
        X1:'Integer',
        X8:'Patch',
        OUT:'Grid')
    ].
solve('8f2ea7aa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(upscale, X3:'Element', 'THREE':'Integer', X4:'Element'),
      f(hconcat, X3:'Grid', X3:'Grid', X5:'Grid'),
      f(hconcat, X5:'Grid', X3:'Grid', X6:'Grid'),
      f(vconcat, X6:'Grid', X6:'Grid', X7:'Grid'),
      f(vconcat, X7:'Grid', X6:'Grid', X8:'Grid'),
      f(cellwise, X4:'Grid', X8:'Grid', 'ZERO':'Integer', OUT:'Grid')
    ].
solve(b8825c91, IN, OUT) :-
    [ f(replace, IN:'Grid', 'FOUR':'Integer', 'ZERO':'Integer', X1:'Grid'),
      f(dmirror, X1:'Piece', X2:'Piece'),
      f(papply, pair, X1:'Tuple', X2:'Tuple', X3:'Tuple'),
      f(lbind, apply, maximum:'Any', X4:'Callable'),
      f(apply, X4, X3:'Container', X5:'Container'),
      f(cmirror, X5:'Piece', X6:'Piece'),
      f(papply, pair, X5:'Tuple', X6:'Tuple', X7:'Tuple'),
      f(apply, X4, X7:'Container', X8:'Container'),
      f(cmirror, X8:'Piece', OUT:'Piece')
    ].
solve(cce03e0d, IN, OUT) :-
    [ f(upscale, IN:'Element', 'THREE':'Integer', X1:'Element'),
      f(hconcat, IN:'Grid', IN:'Grid', X2:'Grid'),
      f(hconcat, X2:'Grid', IN:'Grid', X3:'Grid'),
      f(vconcat, X3:'Grid', X3:'Grid', X4:'Grid'),
      f(vconcat, X4:'Grid', X3:'Grid', X5:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X6:'Indices'),
      f(ofcolor, X1:'Grid', 'ONE':'Integer', X7:'Indices'),
      f(combine, X6:'Container', X7:'Container', X8:'Container'),
      f(fill, X5:'Grid', 'ZERO':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(d364b489, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(shift, X1:'Patch', (1, 0):'Point', X2:'Patch'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X2:'Patch', X3:'Grid'),
      f(shift, X1:'Patch', (-1, 0):'Point', X4:'Patch'),
      f(fill, X3:'Grid', 'TWO':'Integer', X4:'Patch', X5:'Grid'),
      f(shift, X1:'Patch', (0, 1):'Point', X6:'Patch'),
      f(fill, X5:'Grid', 'SIX':'Integer', X6:'Patch', X7:'Grid'),
      f(shift, X1:'Patch', (0, -1):'Point', X8:'Patch'),
      f(fill, X7:'Grid', 'SEVEN':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(a5f85a15, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(interval, 'ONE':'Integer', 'NINE':'Integer', 'ONE':'Integer', X2:'Tuple'),
      f(apply, double, X2:'Container', X3:'Container'),
      f(apply, decrement, X3:'Container', X4:'Container'),
      f(papply, astuple, X4:'Tuple', X4:'Tuple', X5:'Tuple'),
      f(apply, ulcorner, X1:'Container', X6:'Container'),
      f(lbind, shift, X5:'Any', X7:'Callable'),
      f(mapply, X7, X6:'ContainerContainer', X8:'FrozenSet'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('3ac3eb23', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(chain, ineighbors, last, first, X2:'Callable'),
      f(fork, recolor, color, X2, X3:'Callable'),
      f(mapply, X3, X1:'ContainerContainer', X4:'FrozenSet'),
      f(paint, IN:'Grid', X4:'Object', X5:'Grid'),
      f(vsplit, X5:'Grid', 'THREE':'Integer', X6:'Tuple'),
      f(first, X6:'Container', X7:'Any'),
      f(vconcat, X7:'Grid', X7:'Grid', X8:'Grid'),
      f(vconcat, X7:'Grid', X8:'Grid', OUT:'Grid')
    ].
solve('444801d8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ONE':'Integer', X2:'Objects'),
      f(rbind, toobject, IN:'Any', X3:'Callable'),
      f(chain, leastcolor, X3, delta, X4:'Callable'),
      f(rbind, shift, (-1, 0):'Any', X5:'Callable'),
      f(compose, X5, backdrop, X6:'Callable'),
      f(fork, recolor, X4, X6, X7:'Callable'),
      f(mapply, X7, X2:'ContainerContainer', X8:'FrozenSet'),
      f(underpaint, IN:'Grid', X8:'Object', OUT:'Grid')
    ].
solve(22168020, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(remove, 'ZERO':'Any', X1:'Container', X2:'Container'),
      f(lbind, ofcolor, IN:'Any', X3:'Callable'),
      f(lbind, prapply, connect:'Any', X4:'Callable'),
      f(fork, X4, X3, X3, X5:'Callable'),
      f(compose, merge, X5, X6:'Callable'),
      f(fork, recolor, identity, X6, X7:'Callable'),
      f(mapply, X7, X2:'ContainerContainer', X8:'FrozenSet'),
      f(paint, IN:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('6e82a1ae', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(lbind, sizefilter, X1:'Any', X2:'Callable'),
      f(compose, merge, X2, X3:'Callable'),
      f(X3, 'TWO', X4),
      f(X3, 'THREE', X5),
      f(X3, 'FOUR', X6),
      f(fill, IN:'Grid', 'THREE':'Integer', X4:'Patch', X7:'Grid'),
      f(fill, X7:'Grid', 'TWO':'Integer', X5:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'ONE':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(b2862040, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'NINE':'Integer', X2:'Objects'),
      f(colorfilter, X1:'Objects', 'ONE':'Integer', X3:'Objects'),
      f(rbind, bordering, IN:'Any', X4:'Callable'),
      f(compose, flip, X4, X5:'Callable'),
      f(mfilter, X2:'Container', X5, X6:'FrozenSet'),
      f(rbind, adjacent, X6:'Any', X7:'Callable'),
      f(mfilter, X3:'Container', X7, X8:'FrozenSet'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('868de0fa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(sfilter, X1:'Container', square, X2:'Container'),
      f(compose, even, height, X3:'Callable'),
      f(sfilter, X2:'Container', X3, X4:'Container'),
      f(difference, X2:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(merge, X4:'ContainerContainer', X6:'Container'),
      f(merge, X5:'ContainerContainer', X7:'Container'),
      f(fill, IN:'Grid', 'TWO':'Integer', X6:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'SEVEN':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve('681b3aeb', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:'Grid'),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(argmax, X2:'Container', size, X3:'Any'),
      f(argmin, X2:'Container', size, X4:'Any'),
      f(color, X4:'Object', X5:'Integer'),
      f(canvas, X5:'Integer', (3, 3):'Point', X6:'Grid'),
      f(normalize, X3:'Patch', X7:'Patch'),
      f(paint, X6:'Grid', X7:'Object', X8:'Grid'),
      f(rot90, X8:'Grid', OUT:'Grid')
    ].
solve('8e5a5113', IN, OUT) :-
    [ f(crop, IN:'Grid', (0, 0):'Point', (3, 3):'Point', X1:'Grid'),
      f(rot90, X1:'Grid', X2:'Grid'),
      f(rot180, X1:'Grid', X3:'Grid'),
      f(astuple, X2:'Integer', X3:'Integer', X4:'Point'),
      f(astuple, 'FOUR':'Integer', 'EIGHT':'Integer', X5:'Point'),
      f(apply, tojvec, X5:'Container', X6:'Container'),
      f(apply, asobject, X4:'Container', X7:'Container'),
      f(mpapply, shift, X7:'Tuple', X6:'Tuple', X8:'Tuple'),
      f(paint, IN:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('025d127b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(apply, color, X1:'Container', X2:'Container'),
      f(merge, X1:'ContainerContainer', X3:'Container'),
      f(lbind, colorfilter, X1:'Any', X4:'Callable'),
      f(rbind, argmax, rightmost:'Any', X5:'Callable'),
      f(compose, X5, X4, X6:'Callable'),
      f(mapply, X6, X2:'ContainerContainer', X7:'FrozenSet'),
      f(difference, X3:'FrozenSet', X7:'FrozenSet', X8:'FrozenSet'),
      f(move, IN:'Grid', X8:'Object', (0, 1):'Point', OUT:'Grid')
    ].
solve('2281f1f4', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(product, X1:'Container', X1:'Container', X2:'FrozenSet'),
      f(power, first, 'TWO':'Integer', X3:'Callable'),
      f(power, last, 'TWO':'Integer', X4:'Callable'),
      f(fork, astuple, X3, X4, X5:'Callable'),
      f(apply, X5, X2:'Container', X6:'Container'),
      f(urcorner, X1:'Patch', X7:'Point'),
      f(remove, X7:'Any', X6:'Container', X8:'Container'),
      f(underfill, IN:'Grid', 'TWO':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(cf98881b, IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':'Integer', X1:'Tuple'),
      f(first, X1:'Container', X2:'Any'),
      f(remove, X2:'Any', X1:'Container', X3:'Container'),
      f(first, X3:'Container', X4:'Any'),
      f(last, X3:'Container', X5:'Any'),
      f(ofcolor, X4:'Grid', 'NINE':'Integer', X6:'Indices'),
      f(ofcolor, X2:'Grid', 'FOUR':'Integer', X7:'Indices'),
      f(fill, X5:'Grid', 'NINE':'Integer', X6:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'FOUR':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(d4f3cd78, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(delta, X1:'Patch', X2:'Indices'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X2:'Patch', X3:'Grid'),
      f(box, X1:'Patch', X4:'Indices'),
      f(difference, X4:'FrozenSet', X1:'FrozenSet', X5:'FrozenSet'),
      f(position, X4:'Patch', X5:'Patch', X6:'Point'),
      f(first, X5:'Container', X7:'Any'),
      f(shoot, X7:'Point', X6:'Point', X8:'Indices'),
      f(fill, X3:'Grid', 'EIGHT':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(bda2d7a6, IN, OUT) :-
    [ f(partition, IN:'Grid', X1:'Objects'),
      f(order, X1:'Container', size, X2:'Tuple'),
      f(apply, color, X2:'Container', X3:'Container'),
      f(last, X2:'Container', X4:'Any'),
      f(remove, X4:'Any', X2:'Container', X5:'Container'),
      f(repeat, X4:'Any', 'ONE':'Integer', X6:'Tuple'),
      f(combine, X6:'Container', X5:'Container', X7:'Container'),
      f(mpapply, recolor, X3:'Tuple', X7:'Tuple', X8:'Tuple'),
      f(paint, IN:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('137eaa0f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(matcher, first, 'FIVE':'Any', X2:'Callable'),
      f(rbind, sfilter, X2:'Any', X3:'Callable'),
      f(chain, invert, center, X3, X4:'Callable'),
      f(fork, shift, identity, X4, X5:'Callable'),
      f(canvas, 'ZERO':'Integer', (3, 3):'Point', X6:'Grid'),
      f(mapply, X5, X1:'ContainerContainer', X7:'FrozenSet'),
      f(shift, X7:'Patch', (1, 1):'Point', X8:'Patch'),
      f(paint, X6:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('6455b5f5', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(argmax, X1:'Container', size, X3:'Any'),
      f(valmin, X1:'Container', size, X4:'Integer'),
      f(sizefilter, X2:'Container', X4:'Integer', X5:'FrozenSet'),
      f(recolor, 'ONE':'Integer', X3:'Patch', X6:'Object'),
      f(merge, X5:'ContainerContainer', X7:'Container'),
      f(paint, IN:'Grid', X6:'Object', X8:'Grid'),
      f(fill, X8:'Grid', 'EIGHT':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(b8cdaf2b, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(shift, X2:'Patch', (-1, 0):'Point', X3:'Patch'),
      f(ulcorner, X3:'Patch', X4:'Point'),
      f(urcorner, X3:'Patch', X5:'Point'),
      f(shoot, X4:'Point', (-1, -1):'Point', X6:'Indices'),
      f(shoot, X5:'Point', (-1, 1):'Point', X7:'Indices'),
      f(combine, X6:'Container', X7:'Container', X8:'Container'),
      f(underfill,
        IN:'Grid',
        X1:'Integer',
        X8:'Patch',
        OUT:'Grid')
    ].
solve(bd4472b8, IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(astuple, 'TWO':'Integer', X1:'Integer', X2:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X2:'Point', X3:'Grid'),
      f(tophalf, X3:'Grid', X4:'Grid'),
      f(dmirror, X4:'Piece', X5:'Piece'),
      f(hupscale, X5:'Grid', X1:'Integer', X6:'Grid'),
      f(repeat, X6:'Any', 'TWO':'Integer', X7:'Tuple'),
      f(merge, X7:'ContainerContainer', X8:'Container'),
      f(vconcat, X3:'Grid', X8:'Grid', OUT:'Grid')
    ].
solve('4be741c5', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch, condition=X1, dmirror:'Any', identity:'Any', X2:'Any'),
      f(branch, condition=X1, height:'Any', width:'Any', X3:'Any'),
      f(X3, IN, X4),
      f(astuple, 'ONE':'Integer', X4:'Integer', X5:'Point'),
      f(X2, IN, X6),
      f(crop, X6:'Grid', (0, 0):'Point', X5:'Point', X7:'Grid'),
      f(apply, dedupe, X7:'Container', X8:'Container'),
      f(X2, X8, OUT)
    ].
solve(bbc9ae5d, IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(palette, IN:'Element', X2:'IntegerSet'),
      f(halve, X1:'Numerical', X3:'Numerical'),
      f(vupscale, IN:'Grid', X3:'Integer', X4:'Grid'),
      f(rbind, shoot, (1, 1):'Any', X5:'Callable'),
      f(other, X2:'Container', 'ZERO':'Any', X6:'Any'),
      f(ofcolor, X4:'Grid', X6:'Integer', X7:'Indices'),
      f(mapply, X5, X7:'ContainerContainer', X8:'FrozenSet'),
      f(fill, X4:'Grid', X6:'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(d90796e8, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'TWO':'Integer', X2:'FrozenSet'),
      f(lbind, contained, 'TWO':'Any', X3:'Callable'),
      f(compose, X3, palette, X4:'Callable'),
      f(mfilter, X2:'Container', X4, X5:'FrozenSet'),
      f(cover, IN:'Grid', X5:'Patch', X6:'Grid'),
      f(matcher, first, 'THREE':'Any', X7:'Callable'),
      f(sfilter, X5:'Container', X7, X8:'Container'),
      f(fill, X6:'Grid', 'EIGHT':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('2c608aff', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(argmax, X2:'Container', size, X3:'Any'),
      f(toindices, X3:'Patch', X4:'Indices'),
      f(ofcolor, IN:'Grid', X1:'Integer', X5:'Indices'),
      f(prapply, connect, X4, X5, X6),
      f(fork, either, vline, hline, X7:'Callable'),
      f(mfilter, X6:'Container', X7, X8:'FrozenSet'),
      f(underfill,
        IN:'Grid',
        X1:'Integer',
        X8:'Patch',
        OUT:'Grid')
    ].
solve(f8b3ba0a, IN, OUT) :-
    [ f(compress, IN:'Grid', X1:'Grid'),
      f(astuple, 'THREE':'Integer', 'ONE':'Integer', X2:'Point'),
      f(palette, X1:'Element', X3:'IntegerSet'),
      f(lbind, colorcount, X1:'Any', X4:'Callable'),
      f(compose, invert, X4, X5:'Callable'),
      f(order, X3:'Container', X5, X6:'Tuple'),
      f(rbind, canvas, (1, 1):'Any', X7:'Callable'),
      f(apply, X7, X6:'Container', X8:'Container'),
      f(merge, X8:'ContainerContainer', X9:'Container'),
      f(crop, X9:'Grid', (1, 0):'Point', X2:'Point', OUT:'Grid')
    ].
solve('80af3007', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(upscale, X3:'Element', 'THREE':'Integer', X4:'Element'),
      f(hconcat, X3:'Grid', X3:'Grid', X5:'Grid'),
      f(hconcat, X5:'Grid', X3:'Grid', X6:'Grid'),
      f(vconcat, X6:'Grid', X6:'Grid', X7:'Grid'),
      f(vconcat, X7:'Grid', X6:'Grid', X8:'Grid'),
      f(cellwise, X4:'Grid', X8:'Grid', 'ZERO':'Integer', X9:'Grid'),
      f(downscale, X9:'Grid', 'THREE':'Integer', OUT:'Grid')
    ].
solve('83302e8f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(sfilter, X2:'Container', square, X3:'Container'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(merge, X3:'ContainerContainer', X5:'Container'),
      f(recolor, 'THREE':'Integer', X5:'Patch', X6:'Object'),
      f(merge, X4:'ContainerContainer', X7:'Container'),
      f(recolor, 'FOUR':'Integer', X7:'Patch', X8:'Object'),
      f(paint, IN:'Grid', X6:'Object', X9:'Grid'),
      f(paint, X9:'Grid', X8:'Object', OUT:'Grid')
    ].
solve('1fad071e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ONE':'Integer', X2:'Objects'),
      f(sizefilter, X2:'Container', 'FOUR':'Integer', X3:'FrozenSet'),
      f(size, X3:'Container', X4:'Integer'),
      f(subtract, 'FIVE':'Numerical', X4:'Numerical', X5:'Numerical'),
      f(astuple, 'ONE':'Integer', X4:'Integer', X6:'Point'),
      f(canvas, 'ONE':'Integer', X6:'Point', X7:'Grid'),
      f(astuple, 'ONE':'Integer', X5:'Integer', X8:'Point'),
      f(canvas, 'ZERO':'Integer', X8:'Point', X9:'Grid'),
      f(hconcat, X7:'Grid', X9:'Grid', OUT:'Grid')
    ].
solve('11852cab', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(vmirror, X2:'Piece', X4:'Piece'),
      f(dmirror, X2:'Piece', X5:'Piece'),
      f(cmirror, X2:'Piece', X6:'Piece'),
      f(paint, IN:'Grid', X3:'Object', X7:'Grid'),
      f(paint, X7:'Grid', X4:'Object', X8:'Grid'),
      f(paint, X8:'Grid', X5:'Object', X9:'Grid'),
      f(paint, X9:'Grid', X6:'Object', OUT:'Grid')
    ].
solve('3428a4f5', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(astuple, 'SIX':'Integer', 'FIVE':'Integer', X3:'Point'),
      f(ofcolor, X1:'Grid', 'TWO':'Integer', X4:'Indices'),
      f(ofcolor, X2:'Grid', 'TWO':'Integer', X5:'Indices'),
      f(combine, X4:'Container', X5:'Container', X6:'Container'),
      f(intersection, X4:'FrozenSet', X5:'FrozenSet', X7:'FrozenSet'),
      f(difference, X6:'FrozenSet', X7:'FrozenSet', X8:'FrozenSet'),
      f(canvas, 'ZERO':'Integer', X3:'Point', X9:'Grid'),
      f(fill, X9:'Grid', 'THREE':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('178fcbfb', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(mapply, vfrontier, X2:'ContainerContainer', X3:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X3:'Patch', X4:'Grid'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X5:'Objects'),
      f(difference, X1:'FrozenSet', X5:'FrozenSet', X6:'FrozenSet'),
      f(compose, hfrontier, center, X7:'Callable'),
      f(fork, recolor, color, X7, X8:'Callable'),
      f(mapply, X8, X6:'ContainerContainer', X9:'FrozenSet'),
      f(paint, X4:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('3de23699', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(sizefilter, X1:'Container', 'FOUR':'Integer', X2:'FrozenSet'),
      f(first, X2:'Container', X3:'Any'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X4:'FrozenSet'),
      f(first, X4:'Container', X5:'Any'),
      f(color, X3:'Object', X6:'Integer'),
      f(color, X5:'Object', X7:'Integer'),
      f(subgrid, X3:'Patch', IN:'Grid', X8:'Grid'),
      f(trim, X8:'Grid', X9:'Grid'),
      f(replace,
        X9:'Grid',
        X7:'Integer',
        X6:'Integer',
        OUT:'Grid')
    ].
solve('54d9e175', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(compose, neighbors, center, X3:'Callable'),
      f(fork, recolor, color, X3, X4:'Callable'),
      f(mapply, X4, X2:'ContainerContainer', X5:'FrozenSet'),
      f(paint, IN:'Grid', X5:'Object', X6:'Grid'),
      f(replace, X6:'Grid', 'ONE':'Integer', 'SIX':'Integer', X7:'Grid'),
      f(replace, X7:'Grid', 'TWO':'Integer', 'SEVEN':'Integer', X8:'Grid'),
      f(replace, X8:'Grid', 'THREE':'Integer', 'EIGHT':'Integer', X9:'Grid'),
      f(replace, X9:'Grid', 'FOUR':'Integer', 'NINE':'Integer', OUT:'Grid')
    ].
solve('5ad4f10b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(color, X2:'Object', X3:'Integer'),
      f(subgrid, X2:'Patch', IN:'Grid', X4:'Grid'),
      f(leastcolor, X4:'Element', X5:'Integer'),
      f(replace, X4:'Grid', X5:'Integer', 'ZERO':'Integer', X6:'Grid'),
      f(replace, X6:'Grid', X3:'Integer', X5:'Integer', X7:'Grid'),
      f(height, X7:'Piece', X8:'Integer'),
      f(divide, X8:'Numerical', 'THREE':'Numerical', X9:'Numerical'),
      f(downscale, X7:'Grid', X9:'Integer', OUT:'Grid')
    ].
solve('623ea044', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(center, X2:'Patch', X3:'Point'),
      f(color, X2:'Object', X4:'Integer'),
      f(astuple, (1, 1):'Integer', (-1, -1):'Integer', X5:'Point'),
      f(astuple, (-1, 1):'Integer', (1, -1):'Integer', X6:'Point'),
      f(combine, X5:'Container', X6:'Container', X7:'Container'),
      f(lbind, shoot, X3:'Any', X8:'Callable'),
      f(mapply, X8, X7:'ContainerContainer', X9:'FrozenSet'),
      f(fill, IN:'Grid', X4:'Integer', X9:'Patch', OUT:'Grid')
    ].
solve('6b9890af', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(argmin, X1:'Container', size, X3:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X4:'Grid'),
      f(width, X4:'Piece', X5:'Integer'),
      f(divide, X5:'Numerical', 'THREE':'Numerical', X6:'Numerical'),
      f(upscale, X3:'Element', X6:'Integer', X7:'Element'),
      f(normalize, X7:'Patch', X8:'Patch'),
      f(shift, X8:'Patch', (1, 1):'Point', X9:'Patch'),
      f(paint, X4:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('794b24be', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(size, X1:'Container', X2:'Integer'),
      f(decrement, X2:'Numerical', X3:'Numerical'),
      f(canvas, 'ZERO':'Integer', (3, 3):'Point', X4:'Grid'),
      f(tojvec, X3:'Integer', X5:'Point'),
      f(connect, (0, 0):'Point', X5:'Point', X6:'Indices'),
      f(equality, X2:'Any', 'FOUR':'Any', returns=X7),
      f(insert, (1, 1):'Any', X6:'FrozenSet', X8:'FrozenSet'),
      f(branch, condition=X7, X8:'Any', X6:'Any', X9:'Any'),
      f(fill, X4:'Grid', 'TWO':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve('88a10436', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(center, X3:'Patch', X4:'Point'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X5:'FrozenSet'),
      f(first, X5:'Container', X6:'Any'),
      f(normalize, X6:'Patch', X7:'Patch'),
      f(shift, X7:'Patch', X4:'Point', X8:'Patch'),
      f(shift, X8:'Patch', (-1, -1):'Point', X9:'Patch'),
      f(paint, IN:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('88a62173', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(tophalf, X1:'Grid', X3:'Grid'),
      f(tophalf, X2:'Grid', X4:'Grid'),
      f(bottomhalf, X1:'Grid', X5:'Grid'),
      f(bottomhalf, X2:'Grid', X6:'Grid'),
      f(astuple, X3:'Integer', X4:'Integer', X7:'Point'),
      f(astuple, X5:'Integer', X6:'Integer', X8:'Point'),
      f(combine, X7:'Container', X8:'Container', X9:'Container'),
      f(leastcommon, X9:'Container', OUT:'Any')
    ].
solve(890034000000000.0, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(inbox, X2:'Patch', X3:'Indices'),
      f(recolor, 'ZERO':'Integer', X3:'Patch', X4:'Object'),
      f(occurrences, IN:'Grid', X4:'Object', X5:'Indices'),
      f(normalize, X2:'Patch', X6:'Patch'),
      f(shift, X6:'Patch', (-1, -1):'Point', X7:'Patch'),
      f(lbind, shift, X7:'Any', X8:'Callable'),
      f(mapply, X8, X5:'ContainerContainer', X9:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X9:'Patch', OUT:'Grid')
    ].
solve('99b1bc43', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(ofcolor, X1:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X4:'Indices'),
      f(combine, X3:'Container', X4:'Container', X5:'Container'),
      f(intersection, X3:'FrozenSet', X4:'FrozenSet', X6:'FrozenSet'),
      f(difference, X5:'FrozenSet', X6:'FrozenSet', X7:'FrozenSet'),
      f(shape, X1:'Piece', X8:'Point'),
      f(canvas, 'ZERO':'Integer', X8:'Point', X9:'Grid'),
      f(fill, X9:'Grid', 'THREE':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(a9f96cdd, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(replace, IN:'Grid', 'TWO':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(shift, X1:'Patch', (-1, -1):'Point', X3:'Patch'),
      f(fill, X2:'Grid', 'THREE':'Integer', X3:'Patch', X4:'Grid'),
      f(shift, X1:'Patch', (-1, 1):'Point', X5:'Patch'),
      f(fill, X4:'Grid', 'SIX':'Integer', X5:'Patch', X6:'Grid'),
      f(shift, X1:'Patch', (1, -1):'Point', X7:'Patch'),
      f(fill, X6:'Grid', 'EIGHT':'Integer', X7:'Patch', X8:'Grid'),
      f(shift, X1:'Patch', (1, 1):'Point', X9:'Patch'),
      f(fill, X8:'Grid', 'SEVEN':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(af902bf9, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':'Integer', X1:'Indices'),
      f(prapply, connect, X1, X1, X2),
      f(fork, either, vline, hline, X3:'Callable'),
      f(mfilter, X2:'Container', X3, X4:'FrozenSet'),
      f(underfill, IN:'Grid', 'NEG_ONE':'Integer', X4:'Patch', X5:'Grid'),
      f(objects,
        X5:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X6:'Objects'),
      f(compose, backdrop, inbox, X7:'Callable'),
      f(mapply, X7, X6:'ContainerContainer', X8:'FrozenSet'),
      f(fill, X5:'Grid', 'TWO':'Integer', X8:'Patch', X9:'Grid'),
      f(replace, X9:'Grid', 'NEG_ONE':'Integer', 'ZERO':'Integer', OUT:'Grid')
    ].
solve(b548a754, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(replace, IN:'Grid', 'EIGHT':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(leastcolor, X2:'Element', X3:'Integer'),
      f(replace, X2:'Grid', X3:'Integer', 'ZERO':'Integer', X4:'Grid'),
      f(leastcolor, X4:'Element', X5:'Integer'),
      f(merge, X1:'ContainerContainer', X6:'Container'),
      f(backdrop, X6:'Patch', X7:'Indices'),
      f(box, X6:'Patch', X8:'Indices'),
      f(fill, IN:'Grid', X3:'Integer', X7:'Patch', X9:'Grid'),
      f(fill, X9:'Grid', X5:'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(bdad9b1f, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X2:'Indices'),
      f(center, X1:'Patch', X3:'Point'),
      f(center, X2:'Patch', X4:'Point'),
      f(hfrontier, X3:'Point', X5:'Indices'),
      f(vfrontier, X4:'Point', X6:'Indices'),
      f(intersection, X5:'FrozenSet', X6:'FrozenSet', X7:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X5:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'EIGHT':'Integer', X6:'Patch', X9:'Grid'),
      f(fill, X9:'Grid', 'FOUR':'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(c3e719e8, IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(hconcat, IN:'Grid', IN:'Grid', X2:'Grid'),
      f(upscale, IN:'Element', 'THREE':'Integer', X3:'Element'),
      f(ofcolor, X3:'Grid', X1:'Integer', X4:'Indices'),
      f(asindices, X3:'Grid', X5:'Indices'),
      f(difference, X5:'FrozenSet', X4:'FrozenSet', X6:'FrozenSet'),
      f(hconcat, X2:'Grid', IN:'Grid', X7:'Grid'),
      f(vconcat, X7:'Grid', X7:'Grid', X8:'Grid'),
      f(vconcat, X8:'Grid', X7:'Grid', X9:'Grid'),
      f(fill, X9:'Grid', 'ZERO':'Integer', X6:'Patch', OUT:'Grid')
    ].
solve(de1cd16c, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(sizefilter, X2:'Container', 'ONE':'Integer', X3:'FrozenSet'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(rbind, subgrid, IN:'Any', X5:'Callable'),
      f(apply, X5, X4:'Container', X6:'Container'),
      f(rbind, colorcount, X1:'Any', X7:'Callable'),
      f(argmax, X6:'Container', X7, X8:'Any'),
      f(mostcolor, X8:'Element', X9:'Integer'),
      f(canvas, X9:'Integer', (1, 1):'Point', OUT:'Grid')
    ].
solve(d8c310e9, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(hperiod, X2:'Object', X3:'Integer'),
      f(multiply, X3:'Numerical', 'THREE':'Numerical', X4:'Numerical'),
      f(tojvec, X3:'Integer', X5:'Point'),
      f(tojvec, X4:'Integer', X6:'Point'),
      f(shift, X2:'Patch', X5:'Point', X7:'Patch'),
      f(shift, X2:'Patch', X6:'Point', X8:'Patch'),
      f(paint, IN:'Grid', X7:'Object', X9:'Grid'),
      f(paint, X9:'Grid', X8:'Object', OUT:'Grid')
    ].
solve(a3325580, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(valmax, X1:'Container', size, X2:'Integer'),
      f(sizefilter, X1:'Container', X2:'Integer', X3:'FrozenSet'),
      f(order, X3:'Container', leftmost, X4:'Tuple'),
      f(apply, color, X4:'Container', X5:'Container'),
      f(astuple, 'ONE':'Integer', X2:'Integer', X6:'Point'),
      f(rbind, canvas, X6:'Any', X7:'Callable'),
      f(apply, X7, X5:'Container', X8:'Container'),
      f(merge, X8:'ContainerContainer', X9:'Container'),
      f(dmirror, X9:'Piece', OUT:'Piece')
    ].
solve('8eb1be9a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(interval, 'NEG_TWO':'Integer', 'FOUR':'Integer', 'ONE':'Integer', X3:'Tuple'),
      f(lbind, shift, X2:'Any', X4:'Callable'),
      f(height, X2:'Piece', X5:'Integer'),
      f(rbind, multiply, X5:'Any', X6:'Callable'),
      f(apply, X6, X3:'Container', X7:'Container'),
      f(apply, toivec, X7:'Container', X8:'Container'),
      f(mapply, X4, X8:'ContainerContainer', X9:'FrozenSet'),
      f(paint, IN:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('321b1fc6', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'EIGHT':'Integer', X2:'Objects'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(first, X3:'Container', X4:'Any'),
      f(cover, IN:'Grid', X4:'Patch', X5:'Grid'),
      f(normalize, X4:'Patch', X6:'Patch'),
      f(lbind, shift, X6:'Any', X7:'Callable'),
      f(apply, ulcorner, X2:'Container', X8:'Container'),
      f(mapply, X7, X8:'ContainerContainer', X9:'FrozenSet'),
      f(paint, X5:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('1caeab9d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X2:'Indices'),
      f(lowermost, X2:'Patch', X3:'Integer'),
      f(lbind, subtract, X3:'Any', X4:'Callable'),
      f(chain, toivec, X4, lowermost, X5:'Callable'),
      f(fork, shift, identity, X5, X6:'Callable'),
      f(merge, X1:'ContainerContainer', X7:'Container'),
      f(cover, IN:'Grid', X7:'Patch', X8:'Grid'),
      f(mapply, X6, X1:'ContainerContainer', X9:'FrozenSet'),
      f(paint, X8:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('77fdfe62', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(subgrid, X1:'Patch', IN:'Grid', X2:'Grid'),
      f(replace, IN:'Grid', 'EIGHT':'Integer', 'ZERO':'Integer', X3:'Grid'),
      f(replace, X3:'Grid', 'ONE':'Integer', 'ZERO':'Integer', X4:'Grid'),
      f(compress, X4:'Grid', X5:'Grid'),
      f(width, X2:'Piece', X6:'Integer'),
      f(halve, X6:'Numerical', X7:'Numerical'),
      f(upscale, X5:'Element', X7:'Integer', X8:'Element'),
      f(ofcolor, X2:'Grid', 'ZERO':'Integer', X9:'Indices'),
      f(fill, X8:'Grid', 'ZERO':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(c0f76784, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(sfilter, X2:'Container', square, X3:'Container'),
      f(sizefilter, X3:'Container', 'ONE':'Integer', X4:'FrozenSet'),
      f(merge, X4:'ContainerContainer', X5:'Container'),
      f(argmax, X3:'Container', size, X6:'Any'),
      f(merge, X3:'ContainerContainer', X7:'Container'),
      f(fill, IN:'Grid', 'SEVEN':'Integer', X7:'Patch', X8:'Grid'),
      f(fill, X8:'Grid', 'EIGHT':'Integer', X6:'Patch', X9:'Grid'),
      f(fill, X9:'Grid', 'SIX':'Integer', X5:'Patch', OUT:'Grid')
    ].
solve('1b60fb0c', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X2:'Indices'),
      f(ofcolor, X1:'Grid', 'ONE':'Integer', X3:'Indices'),
      f(neighbors, (0, 0):'Point', X4:'Indices'),
      f(mapply, neighbors, X4:'ContainerContainer', X5:'FrozenSet'),
      f(lbind, shift, X3:'Any', X6:'Callable'),
      f(apply, X6, X5:'Container', X7:'Container'),
      f(lbind, intersection, X2:'Any', X8:'Callable'),
      f(argmax, X7:'Container', X8, X9:'Any'),
      f(underfill, IN:'Grid', 'TWO':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(ddf7fa4f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X3:'Objects'),
      f(product, X2:'Container', X3:'Container', X4:'FrozenSet'),
      f(fork, vmatching, first, last, X5:'Callable'),
      f(sfilter, X4:'Container', X5, X6:'Container'),
      f(compose, color, first, X7:'Callable'),
      f(fork, recolor, X7, last, X8:'Callable'),
      f(mapply, X8, X6:'ContainerContainer', X9:'FrozenSet'),
      f(paint, IN:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('47c1f68c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(vmirror, IN:'Piece', X2:'Piece'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X3:'Objects'),
      f(merge, X3:'ContainerContainer', X4:'Container'),
      f(mostcolor, X4:'Element', X5:'Integer'),
      f(cellwise, IN:'Grid', X2:'Grid', X1:'Integer', X6:'Grid'),
      f(hmirror, X6:'Piece', X7:'Piece'),
      f(cellwise, X6:'Grid', X7:'Grid', X1:'Integer', X8:'Grid'),
      f(compress, X8:'Grid', X9:'Grid'),
      f(replace,
        X9:'Grid',
        X1:'Integer',
        X5:'Integer',
        OUT:'Grid')
    ].
solve('6c434453', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'EIGHT':'Integer', X2:'FrozenSet'),
      f(dneighbors, (1, 1):'Point', X3:'Indices'),
      f(insert, (1, 1):'Any', X3:'FrozenSet', X4:'FrozenSet'),
      f(merge, X2:'ContainerContainer', X5:'Container'),
      f(cover, IN:'Grid', X5:'Patch', X6:'Grid'),
      f(apply, ulcorner, X2:'Container', X7:'Container'),
      f(lbind, shift, X4:'Any', X8:'Callable'),
      f(mapply, X8, X7:'ContainerContainer', X9:'FrozenSet'),
      f(fill, X6:'Grid', 'TWO':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(23581191, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(fork, combine, vfrontier, hfrontier, X2:'Callable'),
      f(compose, X2, center, X3:'Callable'),
      f(fork, recolor, color, X3, X4:'Callable'),
      f(mapply, X4, X1:'ContainerContainer', X5:'FrozenSet'),
      f(paint, IN:'Grid', X5:'Object', X6:'Grid'),
      f(fork, intersection, first, last, X7:'Callable'),
      f(apply, X3, X1:'Container', X8:'Container'),
      f(X7, X8, X9),
      f(fill, X6:'Grid', 'TWO':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(c8cbb738, IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(fgpartition, IN:'Grid', X2:'Objects'),
      f(valmax, X2:'Container', shape, X3:'Integer'),
      f(canvas, X1:'Integer', X3:'Point', X4:'Grid'),
      f(apply, normalize, X2:'Container', X5:'Container'),
      f(lbind, subtract, X3:'Any', X6:'Callable'),
      f(chain, halve, X6, shape, X7:'Callable'),
      f(fork, shift, identity, X7, X8:'Callable'),
      f(mapply, X8, X5:'ContainerContainer', X9:'FrozenSet'),
      f(paint, X4:'Grid', X9:'Object', OUT:'Grid')
    ].
solve('3eda0437', IN, OUT) :-
    [ f(interval, 'TWO':'Integer', 'TEN':'Integer', 'ONE':'Integer', X1:'Tuple'),
      f(prapply, astuple, X1, X1, X2),
      f(lbind, canvas, 'ZERO':'Any', X3:'Callable'),
      f(lbind, occurrences, IN:'Any', X4:'Callable'),
      f(lbind, lbind, shift:'Any', X5:'Callable'),
      f(fork, apply, X5, X4, X6:'Callable'),
      f(chain, X6, asobject, X3, X7:'Callable'),
      f(mapply, X7, X2:'ContainerContainer', X8:'FrozenSet'),
      f(argmax, X8:'Container', size, X9:'Any'),
      f(fill, IN:'Grid', 'SIX':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(dc0a314f, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':'Integer', X1:'Indices'),
      f(replace, IN:'Grid', 'THREE':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(dmirror, X2:'Piece', X3:'Piece'),
      f(papply, pair, X2:'Tuple', X3:'Tuple', X4:'Tuple'),
      f(lbind, apply, maximum:'Any', X5:'Callable'),
      f(apply, X5, X4:'Container', X6:'Container'),
      f(cmirror, X6:'Piece', X7:'Piece'),
      f(papply, pair, X6:'Tuple', X7:'Tuple', X8:'Tuple'),
      f(apply, X5, X8:'Container', X9:'Container'),
      f(subgrid, X1:'Patch', X9:'Grid', OUT:'Grid')
    ].
solve(d4469b4b, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(other, X1:'Container', 'ZERO':'Any', X2:'Any'),
      f(equality, X2:'Any', 'ONE':'Any', returns=X3),
      f(equality, X2:'Any', 'TWO':'Any', returns=X4),
      f(branch, condition=X3, (1, 1):'Any', (2, 2):'Any', X5:'Any'),
      f(branch, condition=X4, (0, 1):'Any', X5:'Any', X6:'Any'),
      f(fork, combine, vfrontier, hfrontier, X7:'Callable'),
      f(X7, X6, X8),
      f(canvas, 'ZERO':'Integer', (3, 3):'Point', X9:'Grid'),
      f(fill, X9:'Grid', 'FIVE':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve('6ecd11f4', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(argmin, X1:'Container', size, X3:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X4:'Grid'),
      f(subgrid, X3:'Patch', IN:'Grid', X5:'Grid'),
      f(width, X4:'Piece', X6:'Integer'),
      f(width, X5:'Piece', X7:'Integer'),
      f(divide, X6:'Numerical', X7:'Numerical', X8:'Numerical'),
      f(downscale, X4:'Grid', X8:'Integer', X9:'Grid'),
      f(ofcolor, X9:'Grid', 'ZERO':'Integer', X10:'Indices'),
      f(fill, X5:'Grid', 'ZERO':'Integer', X10:'Patch', OUT:'Grid')
    ].
solve('760b3cac', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X2:'Indices'),
      f(ulcorner, X1:'Patch', X3:'Point'),
      f(index, IN:'Grid', X3:'Point', X4:'Integer'),
      f(equality, X4:'Any', 'FOUR':'Any', returns=X5),
      f(branch, condition=X5, 'NEG_ONE':'Any', 'ONE':'Any', X6:'Any'),
      f(multiply, X6:'Numerical', 'THREE':'Numerical', X7:'Numerical'),
      f(tojvec, X7:'Integer', X8:'Point'),
      f(vmirror, X2:'Piece', X9:'Piece'),
      f(shift, X9:'Patch', X8:'Point', X10:'Patch'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X10:'Patch', OUT:'Grid')
    ].
solve(c444b776, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(argmin, X2:'Container', size, X3:'Any'),
      f(backdrop, X3:'Patch', X4:'Indices'),
      f(toobject, X4:'Patch', IN:'Grid', X5:'Object'),
      f(normalize, X5:'Patch', X6:'Patch'),
      f(lbind, shift, X6:'Any', X7:'Callable'),
      f(compose, X7, ulcorner, X8:'Callable'),
      f(remove, X3:'Any', X2:'Container', X9:'Container'),
      f(mapply, X8, X9:'ContainerContainer', X10:'FrozenSet'),
      f(paint, IN:'Grid', X10:'Object', OUT:'Grid')
    ].
solve(d4a91cb9, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(first, X1:'Container', X3:'Any'),
      f(first, X2:'Container', X4:'Any'),
      f(last, X3:'Container', X5:'Any'),
      f(first, X4:'Container', X6:'Any'),
      f(astuple, X6:'Integer', X5:'Integer', X7:'Point'),
      f(connect, X7:'Point', X3:'Point', X8:'Indices'),
      f(connect, X7:'Point', X4:'Point', X9:'Indices'),
      f(combine, X8:'Container', X9:'Container', X10:'Container'),
      f(underfill, IN:'Grid', 'FOUR':'Integer', X10:'Patch', OUT:'Grid')
    ].
solve(eb281b96, IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(decrement, X1:'Numerical', X3:'Numerical'),
      f(astuple, X3:'Integer', X2:'Integer', X4:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X4:'Point', X5:'Grid'),
      f(hmirror, X5:'Piece', X6:'Piece'),
      f(vconcat, IN:'Grid', X6:'Grid', X7:'Grid'),
      f(double, X3:'Numerical', X8:'Numerical'),
      f(astuple, X8:'Integer', X2:'Integer', X9:'Point'),
      f(crop, X7:'Grid', (1, 0):'Point', X9:'Point', X10:'Grid'),
      f(vconcat, X7:'Grid', X10:'Grid', OUT:'Grid')
    ].
solve(ff28f65a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X2:'Objects'),
      f(size, X2:'Container', X3:'Integer'),
      f(double, X3:'Numerical', X4:'Numerical'),
      f(interval, 'ZERO':'Integer', X4:'Integer', 'TWO':'Integer', X5:'Tuple'),
      f(apply, tojvec, X5:'Container', X6:'Container'),
      f(astuple, 'ONE':'Integer', 'NINE':'Integer', X7:'Point'),
      f(canvas, 'ZERO':'Integer', X7:'Point', X8:'Grid'),
      f(fill, X8:'Grid', 'ONE':'Integer', X6:'Patch', X9:'Grid'),
      f(hsplit, X9:'Grid', 'THREE':'Integer', X10:'Tuple'),
      f(merge, X10:'ContainerContainer', OUT:'Container')
    ].
solve('7e0986d6', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(replace, IN:'Grid', X1:'Integer', 'ZERO':'Integer', X3:'Grid'),
      f(leastcolor, X3:'Element', X4:'Integer'),
      f(rbind, colorcount, X4:'Any', X5:'Callable'),
      f(rbind, greater, 'ONE':'Any', X6:'Callable'),
      f(compose, X6, X5, X7:'Callable'),
      f(rbind, toobject, X3:'Any', X8:'Callable'),
      f(chain, X7, X8, dneighbors, X9:'Callable'),
      f(sfilter, X2:'Container', X9, X10:'Container'),
      f(fill, X3:'Grid', X4:'Integer', X10:'Patch', OUT:'Grid')
    ].
solve('09629e4f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(rbind, subgrid, IN:'Any', X2:'Callable'),
      f(apply, X2, X1:'Container', X3:'Container'),
      f(argmin, X3:'Container', numcolors, X4:'Any'),
      f(upscale, X4:'Element', 'FOUR':'Integer', X5:'Element'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X6:'Indices'),
      f(shift, X6:'Patch', (1, 1):'Point', X7:'Patch'),
      f(fill, X5:'Grid', 'FIVE':'Integer', X7:'Patch', X8:'Grid'),
      f(shape, X8:'Piece', X9:'Point'),
      f(decrement, X9:'Numerical', X10:'Numerical'),
      f(crop, X8:'Grid', (1, 1):'Point', X10:'Point', OUT:'Grid')
    ].
solve(a85d4709, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(lbind, matcher, last:'Any', X2:'Callable'),
      f(lbind, sfilter, X1:'Any', X3:'Callable'),
      f(lbind, mapply, hfrontier:'Any', X4:'Callable'),
      f(chain, X4, X3, X2, X5:'Callable'),
      f(X5, 'ZERO', X6),
      f(X5, 'TWO', X7),
      f(X5, 'ONE', X8),
      f(fill, IN:'Grid', 'TWO':'Integer', X6:'Patch', X9:'Grid'),
      f(fill, X9:'Grid', 'THREE':'Integer', X7:'Patch', X10:'Grid'),
      f(fill, X10:'Grid', 'FOUR':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(feca6190, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(size, X1:'Container', X2:'Integer'),
      f(multiply, X2:'Numerical', 'FIVE':'Numerical', X3:'Numerical'),
      f(astuple, X3:'Integer', X3:'Integer', X4:'Point'),
      f(canvas, 'ZERO':'Integer', X4:'Point', X5:'Grid'),
      f(rbind, shoot, (1, 1):'Any', X6:'Callable'),
      f(compose, X6, center, X7:'Callable'),
      f(fork, recolor, color, X7, X8:'Callable'),
      f(mapply, X8, X1:'ContainerContainer', X9:'FrozenSet'),
      f(paint, X5:'Grid', X9:'Object', X10:'Grid'),
      f(hmirror, X10:'Piece', OUT:'Piece')
    ].
solve(a68b268e, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:'Grid'),
      f(bottomhalf, IN:'Grid', X2:'Grid'),
      f(lefthalf, X1:'Grid', X3:'Grid'),
      f(righthalf, X1:'Grid', X4:'Grid'),
      f(lefthalf, X2:'Grid', X5:'Grid'),
      f(righthalf, X2:'Grid', X6:'Grid'),
      f(ofcolor, X4:'Grid', 'FOUR':'Integer', X7:'Indices'),
      f(ofcolor, X3:'Grid', 'SEVEN':'Integer', X8:'Indices'),
      f(ofcolor, X5:'Grid', 'EIGHT':'Integer', X9:'Indices'),
      f(fill, X6:'Grid', 'EIGHT':'Integer', X9:'Patch', X10:'Grid'),
      f(fill, X10:'Grid', 'FOUR':'Integer', X7:'Patch', X11:'Grid'),
      f(fill, X11:'Grid', 'SEVEN':'Integer', X8:'Patch', OUT:'Grid')
    ].
solve(beb8660c, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(compose, invert, size, X3:'Callable'),
      f(order, X2:'Container', X3, X4:'Tuple'),
      f(apply, normalize, X4:'Container', X5:'Container'),
      f(size, X5:'Container', X6:'Integer'),
      f(interval, 'ZERO':'Integer', X6:'Integer', 'ONE':'Integer', X7:'Tuple'),
      f(apply, toivec, X7:'Container', X8:'Container'),
      f(mpapply, shift, X5:'Tuple', X8:'Tuple', X9:'Tuple'),
      f(canvas, 'ZERO':'Integer', X1:'Point', X10:'Grid'),
      f(paint, X10:'Grid', X9:'Object', X11:'Grid'),
      f(rot180, X11:'Grid', OUT:'Grid')
    ].
solve('913fb3ed', IN, OUT) :-
    [ f(lbind, ofcolor, IN:'Any', X1:'Callable'),
      f(lbind, mapply, neighbors:'Any', X2:'Callable'),
      f(chain, X2, X1, last, X3:'Callable'),
      f(fork, recolor, first, X3, X4:'Callable'),
      f(astuple, 'SIX':'Integer', 'THREE':'Integer', X5:'Point'),
      f(astuple, 'FOUR':'Integer', 'EIGHT':'Integer', X6:'Point'),
      f(astuple, 'ONE':'Integer', 'TWO':'Integer', X7:'Point'),
      f(initset, X5:'Any', X8:'FrozenSet'),
      f(insert, X6:'Any', X8:'FrozenSet', X9:'FrozenSet'),
      f(insert, X7:'Any', X9:'FrozenSet', X10:'FrozenSet'),
      f(mapply, X4, X10:'ContainerContainer', X11:'FrozenSet'),
      f(paint, IN:'Grid', X11:'Object', OUT:'Grid')
    ].
solve('0962bcdd', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(replace, IN:'Grid', 'ZERO':'Integer', X1:'Integer', X2:'Grid'),
      f(leastcolor, X2:'Element', X3:'Integer'),
      f(ofcolor, IN:'Grid', X3:'Integer', X4:'Indices'),
      f(mapply, dneighbors, X4:'ContainerContainer', X5:'FrozenSet'),
      f(fill, IN:'Grid', X3:'Integer', X5:'Patch', X6:'Grid'),
      f(objects,
        X6:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X7:'Objects'),
      f(fork, connect, ulcorner, lrcorner, X8:'Callable'),
      f(fork, connect, llcorner, urcorner, X9:'Callable'),
      f(fork, combine, X8, X9, X10:'Callable'),
      f(mapply, X10, X7:'ContainerContainer', X11:'FrozenSet'),
      f(fill, X6:'Grid', X1:'Integer', X11:'Patch', OUT:'Grid')
    ].
solve('3631a71a', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(replace, IN:'Grid', 'NINE':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(lbind, apply, maximum:'Any', X3:'Callable'),
      f(dmirror, X2:'Piece', X4:'Piece'),
      f(papply, pair, X2:'Tuple', X4:'Tuple', X5:'Tuple'),
      f(apply, X3, X5:'Container', X6:'Container'),
      f(subtract, X1:'Numerical', (2, 2):'Numerical', X7:'Numerical'),
      f(crop, X6:'Grid', (2, 2):'Point', X7:'Point', X8:'Grid'),
      f(vmirror, X8:'Piece', X9:'Piece'),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X10:'Objects'),
      f(merge, X10:'ContainerContainer', X11:'Container'),
      f(shift, X11:'Patch', (2, 2):'Point', X12:'Patch'),
      f(paint, X6:'Grid', X12:'Object', OUT:'Grid')
    ].
solve(5269061, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(neighbors, (0, 0):'Point', X2:'Indices'),
      f(mapply, neighbors, X2:'ContainerContainer', X3:'FrozenSet'),
      f(rbind, multiply, 'THREE':'Any', X4:'Callable'),
      f(apply, X4, X3:'Container', X5:'Container'),
      f(merge, X1:'ContainerContainer', X6:'Container'),
      f(lbind, shift, X6:'Any', X7:'Callable'),
      f(mapply, X7, X5:'ContainerContainer', X8:'FrozenSet'),
      f(shift, X8:'Patch', (-1, 1):'Point', X9:'Patch'),
      f(shift, X8:'Patch', (1, -1):'Point', X10:'Patch'),
      f(paint, IN:'Grid', X8:'Object', X11:'Grid'),
      f(paint, X11:'Grid', X9:'Object', X12:'Grid'),
      f(paint, X12:'Grid', X10:'Object', OUT:'Grid')
    ].
solve(95990924, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(apply, ulcorner, X1:'Container', X2:'Container'),
      f(apply, urcorner, X1:'Container', X3:'Container'),
      f(apply, llcorner, X1:'Container', X4:'Container'),
      f(apply, lrcorner, X1:'Container', X5:'Container'),
      f(shift, X2:'Patch', (-1, -1):'Point', X6:'Patch'),
      f(shift, X3:'Patch', (-1, 1):'Point', X7:'Patch'),
      f(shift, X4:'Patch', (1, -1):'Point', X8:'Patch'),
      f(shift, X5:'Patch', (1, 1):'Point', X9:'Patch'),
      f(fill, IN:'Grid', 'ONE':'Integer', X6:'Patch', X10:'Grid'),
      f(fill, X10:'Grid', 'TWO':'Integer', X7:'Patch', X11:'Grid'),
      f(fill, X11:'Grid', 'THREE':'Integer', X8:'Patch', X12:'Grid'),
      f(fill, X12:'Grid', 'FOUR':'Integer', X9:'Patch', OUT:'Grid')
    ].
solve(e509e548, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(rbind, subgrid, IN:'Any', X2:'Callable'),
      f(chain, palette, trim, X2, X3:'Callable'),
      f(lbind, contained, 'THREE':'Any', X4:'Callable'),
      f(compose, X4, X3, X5:'Callable'),
      f(fork, add, height, width, X6:'Callable'),
      f(compose, decrement, X6, X7:'Callable'),
      f(fork, equality, size, X7, X8:'Callable'),
      f(mfilter, X1:'Container', X5, X9:'FrozenSet'),
      f(mfilter, X1:'Container', X8, X10:'FrozenSet'),
      f(replace, IN:'Grid', 'THREE':'Integer', 'SIX':'Integer', X11:'Grid'),
      f(fill, X11:'Grid', 'TWO':'Integer', X9:'Patch', X12:'Grid'),
      f(fill, X12:'Grid', 'ONE':'Integer', X10:'Patch', OUT:'Grid')
    ].
solve(d43fd935, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'THREE':'Integer', X2:'Indices'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X3:'FrozenSet'),
      f(rbind, vmatching, X2:'Any', X4:'Callable'),
      f(rbind, hmatching, X2:'Any', X5:'Callable'),
      f(fork, either, X4, X5, X6:'Callable'),
      f(sfilter, X3:'Container', X6, X7:'Container'),
      f(rbind, gravitate, X2:'Any', X8:'Callable'),
      f(fork, add, center, X8, X9:'Callable'),
      f(fork, connect, center, X9, X10:'Callable'),
      f(fork, recolor, color, X10, X11:'Callable'),
      f(mapply, X11, X7:'ContainerContainer', X12:'FrozenSet'),
      f(paint, IN:'Grid', X12:'Object', OUT:'Grid')
    ].
solve(db3e9e38, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'SEVEN':'Integer', X1:'Indices'),
      f(lrcorner, X1:'Patch', X2:'Point'),
      f(shoot, X2:'Point', (-1, 1):'Point', X3:'Indices'),
      f(shoot, X2:'Point', (-1, -1):'Point', X4:'Indices'),
      f(combine, X3:'Container', X4:'Container', X5:'Container'),
      f(rbind, shoot, (-1, 0):'Any', X6:'Callable'),
      f(mapply, X6, X5:'ContainerContainer', X7:'FrozenSet'),
      f(last, X2:'Container', X8:'Any'),
      f(rbind, subtract, X8:'Any', X9:'Callable'),
      f(chain, even, X9, last, X10:'Callable'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X7:'Patch', X11:'Grid'),
      f(sfilter, X7:'Container', X10, X12:'Container'),
      f(fill, X11:'Grid', 'SEVEN':'Integer', X12:'Patch', OUT:'Grid')
    ].
solve(e73095fd, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(fork, equality, toindices, backdrop, X3:'Callable'),
      f(sfilter, X2:'Container', X3, X4:'Container'),
      f(lbind, mapply, dneighbors:'Any', X5:'Callable'),
      f(chain, X5, corners, outbox, X6:'Callable'),
      f(fork, difference, X6, outbox, X7:'Callable'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X8:'Indices'),
      f(rbind, intersection, X8:'Any', X9:'Callable'),
      f(matcher, size, 'ZERO':'Any', X10:'Callable'),
      f(chain, X10, X9, X7, X11:'Callable'),
      f(mfilter, X4:'Container', X11, X12:'FrozenSet'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X12:'Patch', OUT:'Grid')
    ].
solve('1bfc4729', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(tophalf, IN:'Grid', X2:'Grid'),
      f(bottomhalf, IN:'Grid', X3:'Grid'),
      f(leastcolor, X2:'Element', X4:'Integer'),
      f(leastcolor, X3:'Element', X5:'Integer'),
      f(ofcolor, X2:'Grid', X4:'Integer', X6:'Indices'),
      f(first, X6:'Container', X7:'Any'),
      f(hfrontier, X7:'Point', X8:'Indices'),
      f(box, X1:'Patch', X9:'Indices'),
      f(combine, X8:'Container', X9:'Container', X10:'Container'),
      f(fill, X2:'Grid', X4:'Integer', X10:'Patch', X11:'Grid'),
      f(hmirror, X11:'Piece', X12:'Piece'),
      f(replace,
        X12:'Grid',
        X4:'Integer',
        X5:'Integer',
        X13:'Grid'),
      f(vconcat, X11:'Grid', X13:'Grid', OUT:'Grid')
    ].
solve('93b581b8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(dmirror, X2:'Piece', X3:'Piece'),
      f(cmirror, X3:'Piece', X4:'Piece'),
      f(upscale, X4:'Element', 'THREE':'Integer', X5:'Element'),
      f(astuple, 'NEG_TWO':'Integer', 'NEG_TWO':'Integer', X6:'Point'),
      f(shift, X5:'Patch', X6:'Point', X7:'Patch'),
      f(underpaint, IN:'Grid', X7:'Object', X8:'Grid'),
      f(toindices, X2:'Patch', X9:'Indices'),
      f(mapply, vfrontier, X9:'ContainerContainer', X10:'FrozenSet'),
      f(mapply, hfrontier, X9:'ContainerContainer', X11:'FrozenSet'),
      f(combine, X10:'Container', X11:'Container', X12:'Container'),
      f(fill, X8:'Grid', 'ZERO':'Integer', X12:'Patch', X13:'Grid'),
      f(paint, X13:'Grid', X2:'Object', OUT:'Grid')
    ].
solve('9edfc990', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X3:'Indices'),
      f(rbind, adjacent, X3:'Any', X4:'Callable'),
      f(mfilter, X2:'Container', X4, X5:'FrozenSet'),
      f(recolor, 'ONE':'Integer', X5:'Patch', X6:'Object'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(add, 'NINE':'Numerical', 'FOUR':'Numerical', X8:'Numerical'),
      f(astuple, 'SIX':'Integer', X8:'Integer', X9:'Point'),
      f(initset, X9:'Any', X10:'FrozenSet'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X10:'Patch', X11:'Grid'),
      f(index, X7:'Grid', X9:'Point', X12:'Integer'),
      f(equality, X12:'Any', 'ONE':'Any', returns=X13),
      f(branch, condition=X13, X11:'Any', X7:'Any', OUT:'Any')
    ].
solve(a65b410d, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(urcorner, X1:'Patch', X2:'Point'),
      f(add, X2:'Numerical', (-1, 1):'Numerical', X3:'Numerical'),
      f(add, X2:'Numerical', (1, -1):'Numerical', X4:'Numerical'),
      f(shoot, X3:'Point', (-1, 1):'Point', X5:'Indices'),
      f(shoot, X4:'Point', (1, -1):'Point', X6:'Indices'),
      f(fill, IN:'Grid', 'THREE':'Integer', X5:'Patch', X7:'Grid'),
      f(fill, X7:'Grid', 'ONE':'Integer', X6:'Patch', X8:'Grid'),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X9:'Objects'),
      f(rbind, shoot, (0, -1):'Any', X10:'Callable'),
      f(compose, X10, urcorner, X11:'Callable'),
      f(fork, recolor, color, X11, X12:'Callable'),
      f(mapply, X12, X9:'ContainerContainer', X13:'FrozenSet'),
      f(paint, X8:'Grid', X13:'Object', OUT:'Grid')
    ].
solve('7447852a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(compose, last, center, X3:'Callable'),
      f(order, X2:'Container', X3, X4:'Tuple'),
      f(size, X4:'Container', X5:'Integer'),
      f(interval, 'ZERO':'Integer', X5:'Integer', 'THREE':'Integer', X6:'Tuple'),
      f(rbind, contained, X6:'Any', X7:'Callable'),
      f(compose, X7, last, X8:'Callable'),
      f(interval, 'ZERO':'Integer', X5:'Integer', 'ONE':'Integer', X9:'Tuple'),
      f(pair, X4:'Tuple', X9:'Tuple', X10:'TupleTuple'),
      f(sfilter, X10:'Container', X8, X11:'Container'),
      f(mapply, first, X11:'ContainerContainer', X12:'FrozenSet'),
      f(recolor, 'FOUR':'Integer', X12:'Patch', X13:'Object'),
      f(paint, IN:'Grid', X13:'Object', OUT:'Grid')
    ].
solve(97999447, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(apply, toindices, X1:'Container', X2:'Container'),
      f(rbind, shoot, (0, 1):'Any', X3:'Callable'),
      f(compose, X3, center, X4:'Callable'),
      f(fork, recolor, color, X4, X5:'Callable'),
      f(mapply, X5, X1:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(interval, 'ZERO':'Integer', 'FIVE':'Integer', 'ONE':'Integer', X8:'Tuple'),
      f(apply, double, X8:'Container', X9:'Container'),
      f(apply, increment, X9:'Container', X10:'Container'),
      f(apply, tojvec, X10:'Container', X11:'Container'),
      f(prapply, shift, X2, X11, X12),
      f(merge, X12:'ContainerContainer', X13:'Container'),
      f(fill, X7:'Grid', 'FIVE':'Integer', X13:'Patch', OUT:'Grid')
    ].
solve('91714a58', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(asindices, IN:'Grid', X2:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:'Objects'),
      f(argmax, X3:'Container', size, X4:'Any'),
      f(mostcolor, X4:'Element', X5:'Integer'),
      f(canvas, 'ZERO':'Integer', X1:'Point', X6:'Grid'),
      f(paint, X6:'Grid', X4:'Object', X7:'Grid'),
      f(rbind, toobject, X7:'Any', X8:'Callable'),
      f(rbind, colorcount, X5:'Any', X9:'Callable'),
      f(chain, X9, X8, neighbors, X10:'Callable'),
      f(lbind, greater, 'THREE':'Any', X11:'Callable'),
      f(compose, X11, X10, X12:'Callable'),
      f(sfilter, X2:'Container', X12, X13:'Container'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X13:'Patch', OUT:'Grid')
    ].
solve(a61ba2ce, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(lbind, index, IN:'Any', X2:'Callable'),
      f(matcher, X2, 'ZERO':'Any', X3:'Callable'),
      f(lbind, extract, X1:'Any', X4:'Callable'),
      f(rbind, subgrid, IN:'Any', X5:'Callable'),
      f(lbind, compose, X3:'Any', X6:'Callable'),
      f(chain, X5, X4, X6, X7:'Callable'),
      f(X7, ulcorner, X8),
      f(X7, urcorner, X9),
      f(X7, llcorner, X10),
      f(X7, lrcorner, X11),
      f(hconcat, X11:'Grid', X10:'Grid', X12:'Grid'),
      f(hconcat, X9:'Grid', X8:'Grid', X13:'Grid'),
      f(vconcat, X12:'Grid', X13:'Grid', OUT:'Grid')
    ].
solve('8e1813be', IN, OUT) :-
    [ f(replace, IN:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X1:'Grid'),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(vline, X3:'Patch', returns=X4),
      f(branch, condition=X4, dmirror:'Any', identity:'Any', X5:'Any'),
      f(X5, X1, X6),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X7:'Objects'),
      f(order, X7:'Container', uppermost, X8:'Tuple'),
      f(apply, color, X8:'Container', X9:'Container'),
      f(dedupe, X9:'Tuple', X10:'Tuple'),
      f(size, X10:'Container', X11:'Integer'),
      f(rbind, repeat, X11:'Any', X12:'Callable'),
      f(apply, X12, X10:'Container', X13:'Container'),
      f(X5, X13, OUT)
    ].
solve(bc1d5164, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(crop, IN:'Grid', (0, 0):'Point', (3, 3):'Point', X2:'Grid'),
      f(crop, IN:'Grid', (2, 0):'Point', (3, 3):'Point', X3:'Grid'),
      f(tojvec, 'FOUR':'Integer', X4:'Point'),
      f(crop, IN:'Grid', X4:'Point', (3, 3):'Point', X5:'Grid'),
      f(astuple, 'TWO':'Integer', 'FOUR':'Integer', X6:'Point'),
      f(crop, IN:'Grid', X6:'Point', (3, 3):'Point', X7:'Grid'),
      f(canvas, 'ZERO':'Integer', (3, 3):'Point', X8:'Grid'),
      f(rbind, ofcolor, X1:'Any', X9:'Callable'),
      f(astuple, X2:'Integer', X3:'Integer', X10:'Point'),
      f(astuple, X5:'Integer', X7:'Integer', X11:'Point'),
      f(combine, X10:'Container', X11:'Container', X12:'Container'),
      f(mapply, X9, X12:'ContainerContainer', X13:'FrozenSet'),
      f(fill, X8:'Grid', X1:'Integer', X13:'Patch', OUT:'Grid')
    ].
solve(ce602527, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:'Piece'),
      f(fgpartition, X1:'Grid', X2:'Objects'),
      f(order, X2:'Container', size, X3:'Tuple'),
      f(last, X3:'Container', X4:'Any'),
      f(remove, X4:'Any', X3:'Container', X5:'Container'),
      f(compose, toindices, normalize, X6:'Callable'),
      f(rbind, upscale, 'TWO':'Any', X7:'Callable'),
      f(chain, toindices, X7, normalize, X8:'Callable'),
      f(X6, X4, X9),
      f(rbind, intersection, X9:'Any', X10:'Callable'),
      f(chain, size, X10, X8, X11:'Callable'),
      f(argmax, X5:'Container', X11, X12:'Any'),
      f(subgrid, X12:'Patch', X1:'Grid', X13:'Grid'),
      f(vmirror, X13:'Piece', OUT:'Piece')
    ].
solve('5c2c9af4', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', X1:'Integer', X2:'Indices'),
      f(center, X2:'Patch', X3:'Point'),
      f(ulcorner, X2:'Patch', X4:'Point'),
      f(subtract, X3:'Numerical', X4:'Numerical', X5:'Numerical'),
      f(multiply, 'NEG_ONE':'Numerical', 'NINE':'Numerical', X6:'Numerical'),
      f(interval, 'ZERO':'Integer', 'NINE':'Integer', 'ONE':'Integer', X7:'Tuple'),
      f(interval, 'ZERO':'Integer', X6:'Integer', 'NEG_ONE':'Integer', X8:'Tuple'),
      f(lbind, multiply, X5:'Any', X9:'Callable'),
      f(apply, X9, X7:'Container', X10:'Container'),
      f(apply, X9, X8:'Container', X11:'Container'),
      f(pair, X10:'Tuple', X11:'Tuple', X12:'TupleTuple'),
      f(mapply, box, X12:'ContainerContainer', X13:'FrozenSet'),
      f(shift, X13:'Patch', X3:'Point', X14:'Patch'),
      f(fill, IN:'Grid', X1:'Integer', X14:'Patch', OUT:'Grid')
    ].
solve('75b8110e', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(tophalf, X1:'Grid', X3:'Grid'),
      f(bottomhalf, X1:'Grid', X4:'Grid'),
      f(tophalf, X2:'Grid', X5:'Grid'),
      f(bottomhalf, X2:'Grid', X6:'Grid'),
      f(rbind, ofcolor, 'ZERO':'Any', X7:'Callable'),
      f(fork, difference, asindices, X7, X8:'Callable'),
      f(fork, toobject, X8, identity, X9:'Callable'),
      f(X9, X5, X10),
      f(X9, X4, X11),
      f(X9, X6, X12),
      f(paint, X3:'Grid', X12:'Object', X13:'Grid'),
      f(paint, X13:'Grid', X11:'Object', X14:'Grid'),
      f(paint, X14:'Grid', X10:'Object', OUT:'Grid')
    ].
solve('941d9a10', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(colorfilter, X2:'Objects', 'ZERO':'Integer', X3:'Objects'),
      f(apply, toindices, X3:'Container', X4:'Container'),
      f(lbind, lbind, contained:'Any', X5:'Callable'),
      f(lbind, extract, X4:'Any', X6:'Callable'),
      f(compose, X6, X5, X7:'Callable'),
      f(decrement, X1:'Numerical', X8:'Numerical'),
      f(astuple, 'FIVE':'Integer', 'FIVE':'Integer', X9:'Point'),
      f(X7, (0, 0), X10),
      f(X7, X8, X11),
      f(X7, X9, X12),
      f(fill, IN:'Grid', 'ONE':'Integer', X10:'Patch', X13:'Grid'),
      f(fill, X13:'Grid', 'THREE':'Integer', X11:'Patch', X14:'Grid'),
      f(fill, X14:'Grid', 'TWO':'Integer', X12:'Patch', OUT:'Grid')
    ].
solve(c3f564a4, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(dmirror, IN:'Piece', X2:'Piece'),
      f(invert, 'NINE':'Numerical', X3:'Numerical'),
      f(papply, pair, IN:'Tuple', X2:'Tuple', X4:'Tuple'),
      f(lbind, apply, maximum:'Any', X5:'Callable'),
      f(apply, X5, X4:'Container', X6:'Container'),
      f(ofcolor, X6:'Grid', 'ZERO':'Integer', X7:'Indices'),
      f(difference, X1:'FrozenSet', X7:'FrozenSet', X8:'FrozenSet'),
      f(toobject, X8:'Patch', X6:'Grid', X9:'Object'),
      f(interval, X3:'Integer', 'NINE':'Integer', 'ONE':'Integer', X10:'Tuple'),
      f(interval,
        'NINE':'Integer',
        X3:'Integer',
        'NEG_ONE':'Integer',
        X11:'Tuple'),
      f(pair, X10:'Tuple', X11:'Tuple', X12:'TupleTuple'),
      f(lbind, shift, X9:'Any', X13:'Callable'),
      f(mapply, X13, X12:'ContainerContainer', X14:'FrozenSet'),
      f(paint, X6:'Grid', X14:'Object', OUT:'Grid')
    ].
solve('1a07d186', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(apply, color, X3:'Container', X4:'Container'),
      f(rbind, contained, X4:'Any', X5:'Callable'),
      f(compose, X5, color, X6:'Callable'),
      f(sfilter, X2:'Container', X6, X7:'Container'),
      f(lbind, colorfilter, X3:'Any', X8:'Callable'),
      f(chain, first, X8, color, X9:'Callable'),
      f(fork, gravitate, identity, X9, X10:'Callable'),
      f(fork, shift, identity, X10, X11:'Callable'),
      f(mapply, X11, X7:'ContainerContainer', X12:'FrozenSet'),
      f(merge, X2:'ContainerContainer', X13:'Container'),
      f(cover, IN:'Grid', X13:'Patch', X14:'Grid'),
      f(paint, X14:'Grid', X12:'Object', OUT:'Grid')
    ].
solve(d687bc17, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X3:'FrozenSet'),
      f(apply, color, X3:'Container', X4:'Container'),
      f(rbind, contained, X4:'Any', X5:'Callable'),
      f(compose, X5, color, X6:'Callable'),
      f(sfilter, X2:'Container', X6, X7:'Container'),
      f(lbind, colorfilter, X3:'Any', X8:'Callable'),
      f(chain, first, X8, color, X9:'Callable'),
      f(fork, gravitate, identity, X9, X10:'Callable'),
      f(fork, shift, identity, X10, X11:'Callable'),
      f(merge, X2:'ContainerContainer', X12:'Container'),
      f(mapply, X11, X7:'ContainerContainer', X13:'FrozenSet'),
      f(cover, IN:'Grid', X12:'Patch', X14:'Grid'),
      f(paint, X14:'Grid', X13:'Object', OUT:'Grid')
    ].
solve('9af7a82c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(order, X1:'Container', size, X2:'Tuple'),
      f(valmax, X1:'Container', size, X3:'Integer'),
      f(rbind, astuple, 'ONE':'Any', X4:'Callable'),
      f(lbind, subtract, X3:'Any', X5:'Callable'),
      f(compose, X4, size, X6:'Callable'),
      f(chain, X4, X5, size, X7:'Callable'),
      f(fork, canvas, color, X6, X8:'Callable'),
      f(lbind, canvas, 'ZERO':'Any', X9:'Callable'),
      f(compose, X9, X7, X10:'Callable'),
      f(fork, vconcat, X8, X10, X11:'Callable'),
      f(compose, cmirror, X11, X12:'Callable'),
      f(apply, X12, X2:'Container', X13:'Container'),
      f(merge, X13:'ContainerContainer', X14:'Container'),
      f(cmirror, X14:'Piece', OUT:'Piece')
    ].
solve('6e19193c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(rbind, toobject, IN:'Any', X3:'Callable'),
      f(compose, first, delta, X4:'Callable'),
      f(rbind, colorcount, X1:'Any', X5:'Callable'),
      f(matcher, X5, 'TWO':'Any', X6:'Callable'),
      f(chain, X6, X3, dneighbors, X7:'Callable'),
      f(rbind, sfilter, X7:'Any', X8:'Callable'),
      f(chain, first, X8, toindices, X9:'Callable'),
      f(fork, subtract, X4, X9, X10:'Callable'),
      f(fork, shoot, X4, X10, X11:'Callable'),
      f(mapply, X11, X2:'ContainerContainer', X12:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X12:'Patch', X13:'Grid'),
      f(mapply, delta, X2:'ContainerContainer', X14:'FrozenSet'),
      f(fill, X13:'Grid', 'ZERO':'Integer', X14:'Patch', OUT:'Grid')
    ].
solve(ef135b50, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X2:'Indices'),
      f(product, X1:'Container', X1:'Container', X3:'FrozenSet'),
      f(power, first, 'TWO':'Integer', X4:'Callable'),
      f(compose, first, last, X5:'Callable'),
      f(fork, equality, X4, X5, X6:'Callable'),
      f(sfilter, X3:'Container', X6, X7:'Container'),
      f(fork, connect, first, last, X8:'Callable'),
      f(mapply, X8, X7:'ContainerContainer', X9:'FrozenSet'),
      f(intersection,
        X9:'FrozenSet',
        X2:'FrozenSet',
        X10:'FrozenSet'),
      f(fill, IN:'Grid', 'NINE':'Integer', X10:'Patch', X11:'Grid'),
      f(trim, X11:'Grid', X12:'Grid'),
      f(asobject, X12:'Grid', X13:'Object'),
      f(shift, X13:'Patch', (1, 1):'Point', X14:'Patch'),
      f(paint, IN:'Grid', X14:'Object', OUT:'Grid')
    ].
solve(cbded52d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(product, X2:'Container', X2:'Container', X3:'FrozenSet'),
      f(fork, vmatching, first, last, X4:'Callable'),
      f(fork, hmatching, first, last, X5:'Callable'),
      f(fork, either, X4, X5, X6:'Callable'),
      f(sfilter, X3:'Container', X6, X7:'Container'),
      f(compose, center, first, X8:'Callable'),
      f(compose, center, last, X9:'Callable'),
      f(fork, connect, X8, X9, X10:'Callable'),
      f(chain, initset, center, X10, X11:'Callable'),
      f(compose, color, first, X12:'Callable'),
      f(fork, recolor, X12, X11, X13:'Callable'),
      f(mapply, X13, X7:'ContainerContainer', X14:'FrozenSet'),
      f(paint, IN:'Grid', X14:'Object', OUT:'Grid')
    ].
solve('8a004b2b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'FOUR':'Integer', X2:'Indices'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(argmax, X1:'Container', lowermost, X4:'Any'),
      f(normalize, X4:'Patch', X5:'Patch'),
      f(replace, X3:'Grid', 'FOUR':'Integer', 'ZERO':'Integer', X6:'Grid'),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X7:'Objects'),
      f(merge, X7:'ContainerContainer', X8:'Container'),
      f(width, X8:'Piece', X9:'Integer'),
      f(ulcorner, X8:'Patch', X10:'Point'),
      f(width, X4:'Piece', X11:'Integer'),
      f(divide, X9:'Numerical', X11:'Numerical', X12:'Numerical'),
      f(upscale, X5:'Element', X12:'Integer', X13:'Element'),
      f(shift, X13:'Patch', X10:'Point', X14:'Patch'),
      f(paint, X3:'Grid', X14:'Object', OUT:'Grid')
    ].
solve(e26a3af2, IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(apply, mostcommon, IN:'Container', X2:'Container'),
      f(apply, mostcommon, X1:'Container', X3:'Container'),
      f(repeat, X2:'Any', 'ONE':'Integer', X4:'Tuple'),
      f(repeat, X3:'Any', 'ONE':'Integer', X5:'Tuple'),
      f(compose, size, dedupe, X6:'Callable'),
      f(X6, X2, X7),
      f(X6, X3, X8),
      f(greater, X8:'Integer', X7:'Integer', returns=X9),
      f(branch, condition=X9, height:'Any', width:'Any', X10:'Any'),
      f(X10, IN, X11),
      f(rot90, X4:'Grid', X12:'Grid'),
      f(branch, condition=X9, X5:'Any', X12:'Any', X13:'Any'),
      f(branch, condition=X9, vupscale:'Any', hupscale:'Any', X14:'Any'),
      f(X14, X13, X11, OUT)
    ].
solve('6cf79266', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ZERO':'Integer', X1:'Indices'),
      f(astuple, 'ZERO':'Integer', (0, 0):'Integer', X2:'Point'),
      f(initset, X2:'Any', X3:'FrozenSet'),
      f(upscale, X3:'Element', 'THREE':'Integer', X4:'Element'),
      f(toindices, X4:'Patch', X5:'Indices'),
      f(lbind, shift, X5:'Any', X6:'Callable'),
      f(rbind, difference, X1:'Any', X7:'Callable'),
      f(chain, size, X7, X6, X8:'Callable'),
      f(matcher, X8, 'ZERO':'Any', X9:'Callable'),
      f(lbind, add, (-1, -1):'Any', X10:'Callable'),
      f(chain, flip, X9, X10, X11:'Callable'),
      f(fork, both, X9, X11, X12:'Callable'),
      f(sfilter, X1:'Container', X12, X13:'Container'),
      f(mapply, X6, X13:'ContainerContainer', X14:'FrozenSet'),
      f(fill, IN:'Grid', 'ONE':'Integer', X14:'Patch', OUT:'Grid')
    ].
solve(a87f7484, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(dmirror, IN:'Piece', X2:'Piece'),
      f(portrait, IN:'Piece', returns=X3),
      f(branch, condition=X3, X2:'Any', IN:'Any', X4:'Any'),
      f(size, X1:'Container', X5:'Integer'),
      f(decrement, X5:'Numerical', X6:'Numerical'),
      f(hsplit, X4:'Grid', X6:'Integer', X7:'Tuple'),
      f(rbind, ofcolor, 'ZERO':'Any', X8:'Callable'),
      f(apply, X8, X7:'Container', X9:'Container'),
      f(mostcommon, X9:'Container', X10:'Any'),
      f(matcher, X8, X10:'Any', X11:'Callable'),
      f(compose, flip, X11, X12:'Callable'),
      f(extract, X7:'Container', X12, X13:'Any'),
      f(dmirror, X13:'Piece', X14:'Piece'),
      f(branch, condition=X3, X14:'Any', X13:'Any', OUT:'Any')
    ].
solve('4093f84a', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(replace, IN:'Grid', X1:'Integer', 'FIVE':'Integer', X2:'Grid'),
      f(rot270, X2:'Grid', X3:'Grid'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X4:'Indices'),
      f(portrait, X4:'Piece', returns=X5),
      f(branch, condition=X5, X2:'Any', X3:'Any', X6:'Any'),
      f(lefthalf, X6:'Grid', X7:'Grid'),
      f(righthalf, X6:'Grid', X8:'Grid'),
      f(rbind, order, identity:'Any', X9:'Callable'),
      f(rbind, order, invert:'Any', X10:'Callable'),
      f(apply, X9, X7:'Container', X11:'Container'),
      f(apply, X10, X8:'Container', X12:'Container'),
      f(hconcat, X11:'Grid', X12:'Grid', X13:'Grid'),
      f(rot90, X13:'Grid', X14:'Grid'),
      f(branch, condition=X5, X13:'Any', X14:'Any', OUT:'Any')
    ].
solve(ba26e723, IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(hsplit, IN:'Grid', X1:'Integer', X2:'Tuple'),
      f(interval, 'ZERO':'Integer', X1:'Integer', 'ONE':'Integer', X3:'Tuple'),
      f(rbind, divide, 'THREE':'Any', X4:'Callable'),
      f(rbind, multiply, 'THREE':'Any', X5:'Callable'),
      f(compose, X5, X4, X6:'Callable'),
      f(fork, equality, identity, X6, X7:'Callable'),
      f(apply, X7, X3:'Container', X8:'Container'),
      f(rbind, ofcolor, 'FOUR':'Any', X9:'Callable'),
      f(apply, X9, X2:'Container', X10:'Container'),
      f(apply, tojvec, X3:'Container', X11:'Container'),
      f(papply, shift, X10:'Tuple', X11:'Tuple', X12:'Tuple'),
      f(pair, X8:'Tuple', X12:'Tuple', X13:'TupleTuple'),
      f(sfilter, X13:'Container', first, X14:'Container'),
      f(mapply, last, X14:'ContainerContainer', X15:'FrozenSet'),
      f(fill, IN:'Grid', 'SIX':'Integer', X15:'Patch', OUT:'Grid')
    ].
solve('4612dd53', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':'Integer', X1:'Indices'),
      f(box, X1:'Patch', X2:'Indices'),
      f(fill, IN:'Grid', 'TWO':'Integer', X2:'Patch', X3:'Grid'),
      f(subgrid, X1:'Patch', X3:'Grid', X4:'Grid'),
      f(ofcolor, X4:'Grid', 'ONE':'Integer', X5:'Indices'),
      f(mapply, vfrontier, X5:'ContainerContainer', X6:'FrozenSet'),
      f(mapply, hfrontier, X5:'ContainerContainer', X7:'FrozenSet'),
      f(size, X6:'Container', X8:'Integer'),
      f(size, X7:'Container', X9:'Integer'),
      f(greater, X8:'Integer', X9:'Integer', returns=X10),
      f(branch, condition=X10, X7:'Any', X6:'Any', X11:'Any'),
      f(fill, X4:'Grid', 'TWO':'Integer', X11:'Patch', X12:'Grid'),
      f(ofcolor, X12:'Grid', 'TWO':'Integer', X13:'Indices'),
      f(ulcorner, X1:'Patch', X14:'Point'),
      f(shift, X13:'Patch', X14:'Point', X15:'Patch'),
      f(underfill, IN:'Grid', 'TWO':'Integer', X15:'Patch', OUT:'Grid')
    ].
solve('29c11459', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:'Grid'),
      f(righthalf, IN:'Grid', X2:'Grid'),
      f(objects,
        X2:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:'Objects'),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:'Objects'),
      f(compose, hfrontier, center, X5:'Callable'),
      f(fork, recolor, color, X5, X6:'Callable'),
      f(mapply, X6, X4:'ContainerContainer', X7:'FrozenSet'),
      f(paint, X1:'Grid', X7:'Object', X8:'Grid'),
      f(mapply, X6, X3:'ContainerContainer', X9:'FrozenSet'),
      f(paint, IN:'Grid', X9:'Object', X10:'Grid'),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X11:'Objects'),
      f(apply, urcorner, X11:'Container', X12:'Container'),
      f(shift, X12:'Patch', (0, 1):'Point', X13:'Patch'),
      f(merge, X11:'ContainerContainer', X14:'Container'),
      f(paint, X10:'Grid', X14:'Object', X15:'Grid'),
      f(fill, X15:'Grid', 'FIVE':'Integer', X13:'Patch', OUT:'Grid')
    ].
solve('963e52fc', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(asobject, IN:'Grid', X2:'Object'),
      f(hperiod, X2:'Object', X3:'Integer'),
      f(height, X2:'Piece', X4:'Integer'),
      f(astuple, X4:'Integer', X3:'Integer', X5:'Point'),
      f(ulcorner, X2:'Patch', X6:'Point'),
      f(crop, IN:'Grid', X6:'Point', X5:'Point', X7:'Grid'),
      f(rot90, X7:'Grid', X8:'Grid'),
      f(double, X1:'Numerical', X9:'Numerical'),
      f(divide, X9:'Numerical', X3:'Numerical', X10:'Numerical'),
      f(increment, X10:'Numerical', X11:'Numerical'),
      f(repeat, X8:'Any', X11:'Integer', X12:'Tuple'),
      f(merge, X12:'ContainerContainer', X13:'Container'),
      f(rot270, X13:'Grid', X14:'Grid'),
      f(astuple, X4:'Integer', X9:'Integer', X15:'Point'),
      f(crop, X14:'Grid', (0, 0):'Point', X15:'Point', OUT:'Grid')
    ].
solve(ae3edfdc, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(replace, IN:'Grid', 'THREE':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(replace, X2:'Grid', 'SEVEN':'Integer', 'ZERO':'Integer', X3:'Grid'),
      f(lbind, colorfilter, X1:'Any', X4:'Callable'),
      f(lbind, rbind, gravitate:'Any', X5:'Callable'),
      f(chain, X5, first, X4, X6:'Callable'),
      f(X6, 'TWO', X7),
      f(X6, 'ONE', X8),
      f(X4, 'THREE', X9),
      f(X4, 'SEVEN', X10),
      f(fork, shift, identity, X7, X11:'Callable'),
      f(fork, shift, identity, X8, X12:'Callable'),
      f(mapply, X11, X9:'ContainerContainer', X13:'FrozenSet'),
      f(mapply, X12, X10:'ContainerContainer', X14:'FrozenSet'),
      f(paint, X3:'Grid', X13:'Object', X15:'Grid'),
      f(paint, X15:'Grid', X14:'Object', OUT:'Grid')
    ].
solve('1f0c79e5', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(replace, IN:'Grid', 'TWO':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(leastcolor, X2:'Element', X3:'Integer'),
      f(ofcolor, X2:'Grid', X3:'Integer', X4:'Indices'),
      f(combine, X1:'Container', X4:'Container', X5:'Container'),
      f(recolor, X3:'Integer', X5:'Patch', X6:'Object'),
      f(compose, decrement, double, X7:'Callable'),
      f(ulcorner, X5:'Patch', X8:'Point'),
      f(invert, X8:'Numerical', X9:'Numerical'),
      f(shift, X1:'Patch', X9:'Point', X10:'Patch'),
      f(apply, X7, X10:'Container', X11:'Container'),
      f(interval, 'ZERO':'Integer', 'NINE':'Integer', 'ONE':'Integer', X12:'Tuple'),
      f(prapply, multiply, X11, X12, X13),
      f(lbind, shift, X6:'Any', X14:'Callable'),
      f(mapply, X14, X13:'ContainerContainer', X15:'FrozenSet'),
      f(paint, IN:'Grid', X15:'Object', OUT:'Grid')
    ].
solve('56dc2b01', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'THREE':'Integer', X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X4:'Indices'),
      f(gravitate, X3:'Patch', X4:'Patch', X5:'Point'),
      f(first, X5:'Container', X6:'Any'),
      f(equality, X6:'Any', 'ZERO':'Any', returns=X7),
      f(branch, condition=X7, width:'Any', height:'Any', X8:'Any'),
      f(X8, X3, X9),
      f(gravitate, X4:'Patch', X3:'Patch', X10:'Point'),
      f(sign, X10:'Numerical', X11:'Numerical'),
      f(multiply, X11:'Numerical', X9:'Numerical', X12:'Numerical'),
      f(crement, X12:'Numerical', X13:'Numerical'),
      f(recolor, 'EIGHT':'Integer', X4:'Patch', X14:'Object'),
      f(shift, X14:'Patch', X13:'Point', X15:'Patch'),
      f(paint, IN:'Grid', X15:'Object', X16:'Grid'),
      f(move, X16:'Grid', X3:'Object', X5:'Point', OUT:'Grid')
    ].
solve(e48d4e1a, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X2:'Indices'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X2:'Patch', X3:'Grid'),
      f(leastcolor, X3:'Element', X4:'Integer'),
      f(size, X2:'Container', X5:'Integer'),
      f(ofcolor, IN:'Grid', X4:'Integer', X6:'Indices'),
      f(rbind, toobject, IN:'Any', X7:'Callable'),
      f(rbind, colorcount, X4:'Any', X8:'Callable'),
      f(chain, X8, X7, dneighbors, X9:'Callable'),
      f(matcher, X9, 'FOUR':'Any', X10:'Callable'),
      f(extract, X6:'Container', X10, X11:'Any'),
      f(multiply, (1, -1):'Numerical', X5:'Numerical', X12:'Numerical'),
      f(add, X12:'Numerical', X11:'Numerical', X13:'Numerical'),
      f(canvas, 'ZERO':'Integer', X1:'Point', X14:'Grid'),
      f(fork, combine, vfrontier, hfrontier, X15:'Callable'),
      f(X15, X13, X16),
      f(fill, X14:'Grid', X4:'Integer', X16:'Patch', OUT:'Grid')
    ].
solve('6773b310', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:'Grid'),
      f(neighbors, (0, 0):'Point', X2:'Indices'),
      f(insert, (0, 0):'Any', X2:'FrozenSet', X3:'FrozenSet'),
      f(rbind, multiply, 'THREE':'Any', X4:'Callable'),
      f(apply, X4, X3:'Container', X5:'Container'),
      f(astuple, 'FOUR':'Integer', 'FOUR':'Integer', X6:'Point'),
      f(shift, X5:'Patch', X6:'Point', X7:'Patch'),
      f(fork, insert, identity, neighbors, X8:'Callable'),
      f(apply, X8, X7:'Container', X9:'Container'),
      f(rbind, toobject, X1:'Any', X10:'Callable'),
      f(apply, X10, X9:'Container', X11:'Container'),
      f(rbind, colorcount, 'SIX':'Any', X12:'Callable'),
      f(matcher, X12, 'TWO':'Any', X13:'Callable'),
      f(mfilter, X11:'Container', X13, X14:'FrozenSet'),
      f(fill, X1:'Grid', 'ONE':'Integer', X14:'Patch', X15:'Grid'),
      f(replace, X15:'Grid', 'SIX':'Integer', 'ZERO':'Integer', X16:'Grid'),
      f(downscale, X16:'Grid', 'THREE':'Integer', OUT:'Grid')
    ].
solve('780d0b14', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(rbind, greater, 'TWO':'Any', X3:'Callable'),
      f(compose, X3, size, X4:'Callable'),
      f(sfilter, X2:'Container', X4, X5:'Container'),
      f(totuple, X5:'FrozenSet', X6:'Tuple'),
      f(apply, color, X6:'Container', X7:'Container'),
      f(apply, center, X6:'Container', X8:'Container'),
      f(pair, X7:'Tuple', X8:'Tuple', X9:'TupleTuple'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X1:'Patch', X10:'Grid'),
      f(paint, X10:'Grid', X9:'Object', X11:'Grid'),
      f(rbind, greater, 'ONE':'Any', X12:'Callable'),
      f(compose, dedupe, totuple, X13:'Callable'),
      f(chain, X12, size, X13, X14:'Callable'),
      f(sfilter, X11:'Container', X14, X15:'Container'),
      f(rot90, X15:'Grid', X16:'Grid'),
      f(sfilter, X16:'Container', X14, X17:'Container'),
      f(rot270, X17:'Grid', OUT:'Grid')
    ].
solve('2204b7a8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(lbind, sfilter, X1:'Any', X2:'Callable'),
      f(compose, size, X2, X3:'Callable'),
      f(X3, vline, X4),
      f(X3, hline, X5),
      f(greater, X4:'Integer', X5:'Integer', returns=X6),
      f(branch, condition=X6, lefthalf:'Any', tophalf:'Any', X7:'Any'),
      f(branch, condition=X6, righthalf:'Any', bottomhalf:'Any', X8:'Any'),
      f(branch, condition=X6, hconcat:'Any', vconcat:'Any', X9:'Any'),
      f(X7, IN, X10),
      f(X8, IN, X11),
      f(index, X10:'Grid', (0, 0):'Point', X12:'Integer'),
      f(shape, X11:'Piece', X13:'Point'),
      f(decrement, X13:'Numerical', X14:'Numerical'),
      f(index, X11:'Grid', X14:'Point', X15:'Integer'),
      f(replace, X10:'Grid', 'THREE':'Integer', X12:'Integer', X16:'Grid'),
      f(replace, X11:'Grid', 'THREE':'Integer', X15:'Integer', X17:'Grid'),
      f(X9, X16, X17, OUT)
    ].
solve(d9f24cd1, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X2:'Indices'),
      f(prapply, connect, X1, X2, X3),
      f(mfilter, X3:'Container', vline, X4:'FrozenSet'),
      f(underfill, IN:'Grid', 'TWO':'Integer', X4:'Patch', X5:'Grid'),
      f(matcher, numcolors, 'TWO':'Any', X6:'Callable'),
      f(objects,
        X5:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X7:'Objects'),
      f(sfilter, X7:'Container', X6, X8:'Container'),
      f(difference, X7:'FrozenSet', X8:'FrozenSet', X9:'FrozenSet'),
      f(colorfilter, X9:'Objects', 'TWO':'Integer', X10:'Objects'),
      f(mapply, toindices, X10:'ContainerContainer', X11:'FrozenSet'),
      f(apply, urcorner, X8:'Container', X12:'Container'),
      f(shift, X12:'Patch', (1, 1):'Point', X13:'Patch'),
      f(rbind, shoot, (-1, 0):'Any', X14:'Callable'),
      f(mapply, X14, X13:'ContainerContainer', X15:'FrozenSet'),
      f(fill, X5:'Grid', 'TWO':'Integer', X15:'Patch', X16:'Grid'),
      f(mapply, vfrontier, X11:'ContainerContainer', X17:'FrozenSet'),
      f(fill, X16:'Grid', 'TWO':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve(b782dc8a, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(ofcolor, IN:'Grid', X1:'Integer', X3:'Indices'),
      f(first, X3:'Container', X4:'Any'),
      f(dneighbors, X4:'Point', X5:'Indices'),
      f(toobject, X5:'Patch', IN:'Grid', X6:'Object'),
      f(mostcolor, X6:'Element', X7:'Integer'),
      f(ofcolor, IN:'Grid', X7:'Integer', X8:'Indices'),
      f(colorfilter, X2:'Objects', 'ZERO':'Integer', X9:'Objects'),
      f(rbind, adjacent, X8:'Any', X10:'Callable'),
      f(mfilter, X9:'Container', X10, X11:'FrozenSet'),
      f(toindices, X11:'Patch', X12:'Indices'),
      f(rbind, manhattan, X3:'Any', X13:'Callable'),
      f(chain, even, X13, initset, X14:'Callable'),
      f(sfilter, X12:'Container', X14, X15:'Container'),
      f(difference,
        X12:'FrozenSet',
        X15:'FrozenSet',
        X16:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X15:'Patch', X17:'Grid'),
      f(fill, X17:'Grid', X7:'Integer', X16:'Patch', OUT:'Grid')
    ].
solve('673ef223', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X2:'Indices'),
      f(replace, IN:'Grid', 'EIGHT':'Integer', 'FOUR':'Integer', X3:'Grid'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X4:'Objects'),
      f(argmin, X1:'Container', uppermost, X5:'Any'),
      f(apply, uppermost, X4:'Container', X6:'Container'),
      f(fork, subtract, maximum, minimum, X7:'Callable'),
      f(X7, X6, X8),
      f(toivec, X8:'Integer', X9:'Point'),
      f(leftmost, X5:'Patch', X10:'Integer'),
      f(equality, X10:'Any', 'ZERO':'Any', returns=X11),
      f(branch, condition=X11, (0, -1):'Any', (0, 1):'Any', X12:'Any'),
      f(rbind, shoot, X12:'Any', X13:'Callable'),
      f(mapply, X13, X2:'ContainerContainer', X14:'FrozenSet'),
      f(underfill, X3:'Grid', 'EIGHT':'Integer', X14:'Patch', X15:'Grid'),
      f(shift, X2:'Patch', X9:'Point', X16:'Patch'),
      f(mapply, hfrontier, X16:'ContainerContainer', X17:'FrozenSet'),
      f(underfill, X15:'Grid', 'EIGHT':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve(f5b8619d, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(height, IN:'Piece', X3:'Integer'),
      f(righthalf, IN:'Grid', X4:'Grid'),
      f(halve, X2:'Numerical', X5:'Numerical'),
      f(even, X2:'Integer', returns=X6),
      f(branch, condition=X6, identity:'Any', increment:'Any', X7:'Any'),
      f(X7, X5, X8),
      f(astuple, X3:'Integer', X8:'Integer', X9:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X9:'Point', X10:'Grid'),
      f(vconcat, X10:'Grid', X10:'Grid', X11:'Grid'),
      f(vconcat, X4:'Grid', X4:'Grid', X12:'Grid'),
      f(hconcat, X12:'Grid', X11:'Grid', X13:'Grid'),
      f(hconcat, X11:'Grid', X13:'Grid', X14:'Grid'),
      f(hconcat, X14:'Grid', X12:'Grid', X15:'Grid'),
      f(ofcolor, X15:'Grid', X1:'Integer', X16:'Indices'),
      f(mapply, vfrontier, X16:'ContainerContainer', X17:'FrozenSet'),
      f(underfill, X15:'Grid', 'EIGHT':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve(f8c80d96, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(colorfilter, X2:'Objects', X1:'Integer', X3:'Objects'),
      f(argmax, X3:'Container', size, X4:'Any'),
      f(argmin, X2:'Container', width, X5:'Any'),
      f(size, X5:'Container', X6:'Integer'),
      f(equality, X6:'Any', 'ONE':'Any', returns=X7),
      f(branch, condition=X7, identity:'Any', outbox:'Any', X8:'Any'),
      f(chain, outbox, outbox, X8, X9:'Callable'),
      f(power, X9, 'TWO':'Integer', X10:'Callable'),
      f(power, X9, 'THREE':'Integer', X11:'Callable'),
      f(X9, X4, X12),
      f(X10, X4, X13),
      f(X11, X4, X14),
      f(fill, IN:'Grid', X1:'Integer', X12:'Patch', X15:'Grid'),
      f(fill, X15:'Grid', X1:'Integer', X13:'Patch', X16:'Grid'),
      f(fill, X16:'Grid', X1:'Integer', X14:'Patch', X17:'Grid'),
      f(replace, X17:'Grid', 'ZERO':'Integer', 'FIVE':'Integer', OUT:'Grid')
    ].
solve(ecdecbb3, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X2:'Objects'),
      f(colorfilter, X1:'Objects', 'EIGHT':'Integer', X3:'Objects'),
      f(product, X2:'Container', X3:'Container', X4:'FrozenSet'),
      f(fork, gravitate, first, last, X5:'Callable'),
      f(compose, crement, X5, X6:'Callable'),
      f(compose, center, first, X7:'Callable'),
      f(fork, add, X7, X6, X8:'Callable'),
      f(fork, connect, X7, X8, X9:'Callable'),
      f(apply, X9, X4:'Container', X10:'Container'),
      f(lbind, greater, 'EIGHT':'Any', X11:'Callable'),
      f(compose, X11, size, X12:'Callable'),
      f(mfilter, X10:'Container', X12, X13:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X13:'Patch', X14:'Grid'),
      f(apply, X8, X4:'Container', X15:'Container'),
      f(intersection,
        X13:'FrozenSet',
        X15:'FrozenSet',
        X16:'FrozenSet'),
      f(mapply, neighbors, X16:'ContainerContainer', X17:'FrozenSet'),
      f(fill, X14:'Grid', 'EIGHT':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve(e5062a87, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(recolor, 'ZERO':'Integer', X1:'Patch', X2:'Object'),
      f(normalize, X2:'Patch', X3:'Patch'),
      f(occurrences, IN:'Grid', X2:'Object', X4:'Indices'),
      f(lbind, shift, X3:'Any', X5:'Callable'),
      f(apply, X5, X4:'Container', X6:'Container'),
      f(astuple, 'ONE':'Integer', 'THREE':'Integer', X7:'Point'),
      f(astuple, 'FIVE':'Integer', 'ONE':'Integer', X8:'Point'),
      f(astuple, 'TWO':'Integer', 'SIX':'Integer', X9:'Point'),
      f(initset, X7:'Any', X10:'FrozenSet'),
      f(insert, X8:'Any', X10:'FrozenSet', X11:'FrozenSet'),
      f(insert, X9:'Any', X11:'FrozenSet', X12:'FrozenSet'),
      f(rbind, contained, X12:'Any', X13:'Callable'),
      f(chain, flip, X13, ulcorner, X14:'Callable'),
      f(sfilter, X6:'Container', X14, X15:'Container'),
      f(merge, X15:'ContainerContainer', X16:'Container'),
      f(recolor, 'TWO':'Integer', X16:'Patch', X17:'Object'),
      f(paint, IN:'Grid', X17:'Object', OUT:'Grid')
    ].
solve(a8d7556c, IN, OUT) :-
    [ f(initset, (0, 0):'Any', X1:'FrozenSet'),
      f(recolor, 'ZERO':'Integer', X1:'Patch', X2:'Object'),
      f(upscale, X2:'Element', 'TWO':'Integer', X3:'Element'),
      f(occurrences, IN:'Grid', X3:'Object', X4:'Indices'),
      f(lbind, shift, X3:'Any', X5:'Callable'),
      f(mapply, X5, X4:'ContainerContainer', X6:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X6:'Patch', X7:'Grid'),
      f(add, 'SIX':'Numerical', 'SIX':'Numerical', X8:'Numerical'),
      f(astuple, 'EIGHT':'Integer', X8:'Integer', X9:'Point'),
      f(index, X7:'Grid', X9:'Point', X10:'Integer'),
      f(equality, X10:'Any', 'TWO':'Any', returns=X11),
      f(initset, X9:'Any', X12:'FrozenSet'),
      f(add, X9:'Numerical', (1, 0):'Numerical', X13:'Numerical'),
      f(insert, X13:'Any', X12:'FrozenSet', X14:'FrozenSet'),
      f(toobject, X14:'Patch', X7:'Grid', X15:'Object'),
      f(toobject, X14:'Patch', IN:'Grid', X16:'Object'),
      f(branch, condition=X11, X16:'Any', X15:'Any', X17:'Any'),
      f(paint, X7:'Grid', X17:'Object', OUT:'Grid')
    ].
solve('4938f0c2', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(vmirror, X2:'Piece', X3:'Piece'),
      f(height, X2:'Piece', X4:'Integer'),
      f(width, X2:'Piece', X5:'Integer'),
      f(toivec, X4:'Integer', X6:'Point'),
      f(tojvec, X5:'Integer', X7:'Point'),
      f(add, X7:'Numerical', (0, 2):'Numerical', X8:'Numerical'),
      f(add, X6:'Numerical', (2, 0):'Numerical', X9:'Numerical'),
      f(shift, X3:'Patch', X8:'Point', X10:'Patch'),
      f(fill, IN:'Grid', 'TWO':'Integer', X10:'Patch', X11:'Grid'),
      f(ofcolor, X11:'Grid', 'TWO':'Integer', X12:'Indices'),
      f(hmirror, X12:'Piece', X13:'Piece'),
      f(shift, X13:'Patch', X9:'Point', X14:'Patch'),
      f(fill, X11:'Grid', 'TWO':'Integer', X14:'Patch', X15:'Grid'),
      f(size, X1:'Container', X16:'Integer'),
      f(greater, X16:'Integer', 'FOUR':'Integer', returns=X17),
      f(branch, condition=X17, IN:'Any', X15:'Any', OUT:'Any')
    ].
solve('834ec97d', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(shift, X3:'Patch', (1, 0):'Point', X4:'Patch'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X3:'Patch', X5:'Grid'),
      f(paint, X5:'Grid', X4:'Object', X6:'Grid'),
      f(uppermost, X4:'Patch', X7:'Integer'),
      f(leftmost, X4:'Patch', X8:'Integer'),
      f(subtract, X8:'Numerical', 'TEN':'Numerical', X9:'Numerical'),
      f(add, X8:'Numerical', 'TEN':'Numerical', X10:'Numerical'),
      f(interval,
        X9:'Integer',
        X10:'Integer',
        'TWO':'Integer',
        X11:'Tuple'),
      f(lbind, greater, X7:'Any', X12:'Callable'),
      f(compose, X12, first, X13:'Callable'),
      f(rbind, contained, X11:'Any', X14:'Callable'),
      f(compose, X14, last, X15:'Callable'),
      f(sfilter, X1:'Container', X13, X16:'Container'),
      f(sfilter, X16:'Container', X15, X17:'Container'),
      f(fill, X6:'Grid', 'FOUR':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve('846bdb03', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(rbind, colorcount, 'FOUR':'Any', X2:'Callable'),
      f(matcher, X2, 'ZERO':'Any', X3:'Callable'),
      f(extract, X1:'Container', X3, X4:'Any'),
      f(remove, X4:'Any', X1:'Container', X5:'Container'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(subgrid, X6:'Patch', IN:'Grid', X7:'Grid'),
      f(index, X7:'Grid', (1, 0):'Point', X8:'Integer'),
      f(subgrid, X4:'Patch', IN:'Grid', X9:'Grid'),
      f(lefthalf, X9:'Grid', X10:'Grid'),
      f(palette, X10:'Element', X11:'IntegerSet'),
      f(other, X11:'Container', 'ZERO':'Any', X12:'Any'),
      f(equality, X8:'Any', X12:'Any', returns=X13),
      f(branch, condition=X13, identity:'Any', vmirror:'Any', X14:'Any'),
      f(X14, X4, X15),
      f(normalize, X15:'Patch', X16:'Patch'),
      f(shift, X16:'Patch', (1, 1):'Point', X17:'Patch'),
      f(paint, X7:'Grid', X17:'Object', OUT:'Grid')
    ].
solve('90f3ed37', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(order, X1:'Container', uppermost, X2:'Tuple'),
      f(first, X2:'Container', X3:'Any'),
      f(remove, X3:'Any', X2:'Container', X4:'Container'),
      f(normalize, X3:'Patch', X5:'Patch'),
      f(lbind, shift, X5:'Any', X6:'Callable'),
      f(compose, X6, ulcorner, X7:'Callable'),
      f(interval, 'TWO':'Integer', 'NEG_ONE':'Integer', 'NEG_ONE':'Integer', X8:'Tuple'),
      f(apply, tojvec, X8:'Container', X9:'Container'),
      f(rbind, apply, X9:'Any', X10:'Callable'),
      f(lbind, compose, size:'Any', X11:'Callable'),
      f(lbind, lbind, intersection:'Any', X12:'Callable'),
      f(compose, X11, X12, X13:'Callable'),
      f(lbind, lbind, shift:'Any', X14:'Callable'),
      f(chain, X10, X14, X7, X15:'Callable'),
      f(fork, argmax, X15, X13, X16:'Callable'),
      f(mapply, X16, X4:'ContainerContainer', X17:'FrozenSet'),
      f(underfill, IN:'Grid', 'ONE':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve('8403a5d5', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(color, X3:'Object', X4:'Integer'),
      f(leftmost, X3:'Patch', X5:'Integer'),
      f(interval, X5:'Integer', 'TEN':'Integer', 'TWO':'Integer', X6:'Tuple'),
      f(rbind, contained, X6:'Any', X7:'Callable'),
      f(compose, X7, last, X8:'Callable'),
      f(sfilter, X1:'Container', X8, X9:'Container'),
      f(increment, X5:'Numerical', X10:'Numerical'),
      f(add, X5:'Numerical', 'THREE':'Numerical', X11:'Numerical'),
      f(interval, X10:'Integer', 'TEN':'Integer', 'FOUR':'Integer', X12:'Tuple'),
      f(interval, X11:'Integer', 'TEN':'Integer', 'FOUR':'Integer', X13:'Tuple'),
      f(lbind, astuple, 'NINE':'Any', X14:'Callable'),
      f(apply, tojvec, X12:'Container', X15:'Container'),
      f(apply, X14, X13:'Container', X16:'Container'),
      f(fill, IN:'Grid', X4:'Integer', X9:'Patch', X17:'Grid'),
      f(fill, X17:'Grid', 'FIVE':'Integer', X15:'Patch', X18:'Grid'),
      f(fill, X18:'Grid', 'FIVE':'Integer', X16:'Patch', OUT:'Grid')
    ].
solve(91413438, IN, OUT) :-
    [ f(colorcount, IN:'Element', 'ZERO':'Integer', X1:'Integer'),
      f(subtract, 'NINE':'Numerical', X1:'Numerical', X2:'Numerical'),
      f(multiply, X1:'Numerical', 'THREE':'Numerical', X3:'Numerical'),
      f(multiply, X3:'Numerical', X1:'Numerical', X4:'Numerical'),
      f(subtract, X4:'Numerical', 'THREE':'Numerical', X5:'Numerical'),
      f(astuple, 'THREE':'Integer', X5:'Integer', X6:'Point'),
      f(canvas, 'ZERO':'Integer', X6:'Point', X7:'Grid'),
      f(hconcat, IN:'Grid', X7:'Grid', X8:'Grid'),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X9:'Objects'),
      f(first, X9:'Container', X10:'Any'),
      f(lbind, shift, X10:'Any', X11:'Callable'),
      f(compose, X11, tojvec, X12:'Callable'),
      f(interval, 'ZERO':'Integer', X2:'Integer', 'ONE':'Integer', X13:'Tuple'),
      f(rbind, multiply, 'THREE':'Any', X14:'Callable'),
      f(apply, X14, X13:'Container', X15:'Container'),
      f(mapply, X12, X15:'ContainerContainer', X16:'FrozenSet'),
      f(paint, X8:'Grid', X16:'Object', X17:'Grid'),
      f(hsplit, X17:'Grid', X1:'Integer', X18:'Tuple'),
      f(merge, X18:'ContainerContainer', OUT:'Container')
    ].
solve('539a4f51', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(index, IN:'Grid', (0, 0):'Point', X2:'Integer'),
      f(colorcount, IN:'Element', 'ZERO':'Integer', X3:'Integer'),
      f(decrement, X1:'Numerical', X4:'Numerical'),
      f(positive, X3:'Integer', returns=X5),
      f(branch, condition=X5, X4:'Any', X1:'Any', X6:'Any'),
      f(crop, IN:'Grid', (0, 0):'Point', X6:'Point', X7:'Grid'),
      f(width, X7:'Piece', X8:'Integer'),
      f(astuple, 'ONE':'Integer', X8:'Integer', X9:'Point'),
      f(crop, X7:'Grid', (0, 0):'Point', X9:'Point', X10:'Grid'),
      f(vupscale, X10:'Grid', X8:'Integer', X11:'Grid'),
      f(dmirror, X11:'Piece', X12:'Piece'),
      f(hconcat, X7:'Grid', X11:'Grid', X13:'Grid'),
      f(hconcat, X12:'Grid', X7:'Grid', X14:'Grid'),
      f(vconcat, X13:'Grid', X14:'Grid', X15:'Grid'),
      f(asobject, X15:'Grid', X16:'Object'),
      f(multiply, (1, 1):'Numerical', 'TEN':'Numerical', X17:'Numerical'),
      f(canvas, X2:'Integer', X17:'Point', X18:'Grid'),
      f(paint, X18:'Grid', X16:'Object', OUT:'Grid')
    ].
solve('5daaa586', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(rbind, bordering, IN:'Any', X3:'Callable'),
      f(compose, flip, X3, X4:'Callable'),
      f(extract, X2:'Container', X4, X5:'Any'),
      f(outbox, X5:'Patch', X6:'Indices'),
      f(subgrid, X6:'Patch', IN:'Grid', X7:'Grid'),
      f(fgpartition, X7:'Grid', X8:'Objects'),
      f(argmax, X8:'Container', size, X9:'Any'),
      f(color, X9:'Object', X10:'Integer'),
      f(toindices, X9:'Patch', X11:'Indices'),
      f(prapply, connect, X11, X11, X12),
      f(mfilter, X12:'Container', vline, X13:'FrozenSet'),
      f(mfilter, X12:'Container', hline, X14:'FrozenSet'),
      f(size, X13:'Container', X15:'Integer'),
      f(size, X14:'Container', X16:'Integer'),
      f(greater, X15:'Integer', X16:'Integer', returns=X17),
      f(branch, condition=X17, X13:'Any', X14:'Any', X18:'Any'),
      f(fill, X7:'Grid', X10:'Integer', X18:'Patch', OUT:'Grid')
    ].
solve('3bdb4ada', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(compose, increment, ulcorner, X3:'Callable'),
      f(compose, decrement, lrcorner, X4:'Callable'),
      f(apply, X3, X2:'Container', X5:'Container'),
      f(apply, X4, X2:'Container', X6:'Container'),
      f(papply, connect, X5:'Tuple', X6:'Tuple', X7:'Tuple'),
      f(apply, last, X5:'Container', X8:'Container'),
      f(compose, last, first, X9:'Callable'),
      f(power, last, 'TWO':'Integer', X10:'Callable'),
      f(fork, subtract, X9, X10, X11:'Callable'),
      f(compose, even, X11, X12:'Callable'),
      f(lbind, rbind, astuple:'Any', X13:'Callable'),
      f(lbind, compose, X12:'Any', X14:'Callable'),
      f(compose, X14, X13, X15:'Callable'),
      f(fork, sfilter, first, X15, X16:'Callable'),
      f(pair, X7:'Tuple', X8:'Tuple', X17:'TupleTuple'),
      f(mapply, X16, X17:'ContainerContainer', X18:'FrozenSet'),
      f(fill, IN:'Grid', 'ZERO':'Integer', X18:'Patch', OUT:'Grid')
    ].
solve(ec883f72, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(fork, multiply, height, width, X3:'Callable'),
      f(argmax, X2:'Container', X3, X4:'Any'),
      f(color, X4:'Object', X5:'Integer'),
      f(remove, 'ZERO':'Any', X1:'Container', X6:'Container'),
      f(other, X6:'Container', X5:'Any', X7:'Any'),
      f(lrcorner, X4:'Patch', X8:'Point'),
      f(llcorner, X4:'Patch', X9:'Point'),
      f(urcorner, X4:'Patch', X10:'Point'),
      f(ulcorner, X4:'Patch', X11:'Point'),
      f(shoot, X8:'Point', (1, 1):'Point', X12:'Indices'),
      f(shoot, X9:'Point', (1, -1):'Point', X13:'Indices'),
      f(shoot, X10:'Point', (-1, 1):'Point', X14:'Indices'),
      f(shoot, X11:'Point', (-1, -1):'Point', X15:'Indices'),
      f(combine, X12:'Container', X13:'Container', X16:'Container'),
      f(combine, X14:'Container', X15:'Container', X17:'Container'),
      f(combine, X16:'Container', X17:'Container', X18:'Container'),
      f(underfill,
        IN:'Grid',
        X7:'Integer',
        X18:'Patch',
        OUT:'Grid')
    ].
solve('2bee17df', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(rot90, IN:'Grid', X2:'Grid'),
      f(subtract, X1:'Numerical', 'TWO':'Numerical', X3:'Numerical'),
      f(interval, 'ZERO':'Integer', X1:'Integer', 'ONE':'Integer', X4:'Tuple'),
      f(rbind, colorcount, 'ZERO':'Any', X5:'Callable'),
      f(matcher, X5, X3:'Any', X6:'Callable'),
      f(rbind, vsplit, X1:'Any', X7:'Callable'),
      f(lbind, apply, X6:'Any', X8:'Callable'),
      f(compose, X8, X7, X9:'Callable'),
      f(X9, IN, X10),
      f(pair, X4:'Tuple', X10:'Tuple', X11:'TupleTuple'),
      f(sfilter, X11:'Container', last, X12:'Container'),
      f(mapply, hfrontier, X12:'ContainerContainer', X13:'FrozenSet'),
      f(X9, X2, X14),
      f(pair, X14:'Tuple', X4:'Tuple', X15:'TupleTuple'),
      f(sfilter, X15:'Container', first, X16:'Container'),
      f(mapply, vfrontier, X16:'ContainerContainer', X17:'FrozenSet'),
      f(astuple, X13:'Integer', X17:'Integer', X18:'Point'),
      f(merge, X18:'ContainerContainer', X19:'Container'),
      f(underfill, IN:'Grid', 'THREE':'Integer', X19:'Patch', OUT:'Grid')
    ].
solve(e8dc4411, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X2:'Indices'),
      f(ofcolor, IN:'Grid', X1:'Integer', X3:'Indices'),
      f(position, X2:'Patch', X3:'Patch', X4:'Point'),
      f(fork, connect, ulcorner, lrcorner, X5:'Callable'),
      f(X5, X2, X6),
      f(intersection, X2:'FrozenSet', X6:'FrozenSet', X7:'FrozenSet'),
      f(equality, X6:'Any', X7:'Any', returns=X8),
      f(fork, subtract, identity, crement, X9:'Callable'),
      f(fork, add, identity, X9, X10:'Callable'),
      f(branch, condition=X8, identity:'Any', X10:'Any', X11:'Any'),
      f(shape, X2:'Piece', X12:'Point'),
      f(multiply, X12:'Numerical', X4:'Numerical', X13:'Numerical'),
      f(apply, X11, X13:'Container', X14:'Container'),
      f(interval, 'ONE':'Integer', 'FIVE':'Integer', 'ONE':'Integer', X15:'Tuple'),
      f(lbind, multiply, X14:'Any', X16:'Callable'),
      f(apply, X16, X15:'Container', X17:'Container'),
      f(lbind, shift, X2:'Any', X18:'Callable'),
      f(mapply, X18, X17:'ContainerContainer', X19:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X19:'Patch', OUT:'Grid')
    ].
solve(e40b9e2f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(neighbors, (0, 0):'Point', X2:'Indices'),
      f(mapply, neighbors, X2:'ContainerContainer', X3:'FrozenSet'),
      f(first, X1:'Container', X4:'Any'),
      f(lbind, intersection, X4:'Any', X5:'Callable'),
      f(compose, hmirror, vmirror, X6:'Callable'),
      f(X6, X4, X7),
      f(lbind, shift, X7:'Any', X8:'Callable'),
      f(apply, X8, X3:'Container', X9:'Container'),
      f(argmax, X9:'Container', X5, X10:'Any'),
      f(paint, IN:'Grid', X10:'Object', X11:'Grid'),
      f(objects,
        X11:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X12:'Objects'),
      f(first, X12:'Container', X13:'Any'),
      f(compose, size, X5, X14:'Callable'),
      f(compose, vmirror, dmirror, X15:'Callable'),
      f(X15, X13, X16),
      f(lbind, shift, X16:'Any', X17:'Callable'),
      f(apply, X17, X3:'Container', X18:'Container'),
      f(argmax, X18:'Container', X14, X19:'Any'),
      f(paint, X11:'Grid', X19:'Object', OUT:'Grid')
    ].
solve(29623171, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(interval, 'ZERO':'Integer', 'NINE':'Integer', 'FOUR':'Integer', X2:'Tuple'),
      f(product, X2:'Container', X2:'Container', X3:'FrozenSet'),
      f(rbind, add, 'THREE':'Any', X4:'Callable'),
      f(rbind, interval, 'ONE':'Any', X5:'Callable'),
      f(fork, X5, identity, X4, X6:'Callable'),
      f(compose, X6, first, X7:'Callable'),
      f(compose, X6, last, X8:'Callable'),
      f(fork, product, X7, X8, X9:'Callable'),
      f(rbind, colorcount, X1:'Any', X10:'Callable'),
      f(rbind, toobject, IN:'Any', X11:'Callable'),
      f(compose, X10, X11, X12:'Callable'),
      f(apply, X9, X3:'Container', X13:'Container'),
      f(valmax, X13:'Container', X12, X14:'Integer'),
      f(matcher, X12, X14:'Any', X15:'Callable'),
      f(compose, flip, X15, X16:'Callable'),
      f(mfilter, X13:'Container', X15, X17:'FrozenSet'),
      f(mfilter, X13:'Container', X16, X18:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X17:'Patch', X19:'Grid'),
      f(fill, X19:'Grid', 'ZERO':'Integer', X18:'Patch', OUT:'Grid')
    ].
solve(a2fd1cf0, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'THREE':'Integer', X2:'Indices'),
      f(uppermost, X1:'Patch', X3:'Integer'),
      f(leftmost, X1:'Patch', X4:'Integer'),
      f(uppermost, X2:'Patch', X5:'Integer'),
      f(leftmost, X2:'Patch', X6:'Integer'),
      f(astuple, X3:'Integer', X5:'Integer', X7:'Point'),
      f(minimum, X7:'IntegerSet', X8:'Integer'),
      f(maximum, X7:'IntegerSet', X9:'Integer'),
      f(astuple, X8:'Integer', X6:'Integer', X10:'Point'),
      f(astuple, X9:'Integer', X6:'Integer', X11:'Point'),
      f(connect, X10:'Point', X11:'Point', X12:'Indices'),
      f(astuple, X4:'Integer', X6:'Integer', X13:'Point'),
      f(minimum, X13:'IntegerSet', X14:'Integer'),
      f(maximum, X13:'IntegerSet', X15:'Integer'),
      f(astuple, X3:'Integer', X14:'Integer', X16:'Point'),
      f(astuple, X3:'Integer', X15:'Integer', X17:'Point'),
      f(connect, X16:'Point', X17:'Point', X18:'Indices'),
      f(combine, X12:'Container', X18:'Container', X19:'Container'),
      f(underfill, IN:'Grid', 'EIGHT':'Integer', X19:'Patch', OUT:'Grid')
    ].
solve(b0c4d837, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X2:'Indices'),
      f(height, X1:'Piece', X3:'Integer'),
      f(decrement, X3:'Numerical', X4:'Numerical'),
      f(height, X2:'Piece', X5:'Integer'),
      f(subtract, X4:'Numerical', X5:'Numerical', X6:'Numerical'),
      f(astuple, 'ONE':'Integer', X6:'Integer', X7:'Point'),
      f(canvas, 'EIGHT':'Integer', X7:'Point', X8:'Grid'),
      f(subtract, 'SIX':'Numerical', X6:'Numerical', X9:'Numerical'),
      f(astuple, 'ONE':'Integer', X9:'Integer', X10:'Point'),
      f(canvas, 'ZERO':'Integer', X10:'Point', X11:'Grid'),
      f(hconcat, X8:'Grid', X11:'Grid', X12:'Grid'),
      f(hsplit, X12:'Grid', 'TWO':'Integer', X13:'Tuple'),
      f(first, X13:'Container', X14:'Any'),
      f(last, X13:'Container', X15:'Any'),
      f(vmirror, X15:'Piece', X16:'Piece'),
      f(vconcat, X14:'Grid', X16:'Grid', X17:'Grid'),
      f(astuple, 'ONE':'Integer', 'THREE':'Integer', X18:'Point'),
      f(canvas, 'ZERO':'Integer', X18:'Point', X19:'Grid'),
      f(vconcat, X17:'Grid', X19:'Grid', OUT:'Grid')
    ].
solve('8731374e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(height, X3:'Piece', X4:'Integer'),
      f(width, X3:'Piece', X5:'Integer'),
      f(vsplit, X3:'Grid', X4:'Integer', X6:'Tuple'),
      f(lbind, greater, 'FOUR':'Any', X7:'Callable'),
      f(compose, X7, numcolors, X8:'Callable'),
      f(sfilter, X6:'Container', X8, X9:'Container'),
      f(merge, X9:'ContainerContainer', X10:'Container'),
      f(rot90, X10:'Grid', X11:'Grid'),
      f(vsplit, X11:'Grid', X5:'Integer', X12:'Tuple'),
      f(sfilter, X12:'Container', X8, X13:'Container'),
      f(merge, X13:'ContainerContainer', X14:'Container'),
      f(rot270, X14:'Grid', X15:'Grid'),
      f(leastcolor, X15:'Element', X16:'Integer'),
      f(ofcolor, X15:'Grid', X16:'Integer', X17:'Indices'),
      f(fork, combine, vfrontier, hfrontier, X18:'Callable'),
      f(mapply, X18, X17:'ContainerContainer', X19:'FrozenSet'),
      f(fill, X15:'Grid', X16:'Integer', X19:'Patch', OUT:'Grid')
    ].
solve('272f95fa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(apply, toindices, X2:'Container', X3:'Container'),
      f(rbind, bordering, IN:'Any', X4:'Callable'),
      f(compose, flip, X4, X5:'Callable'),
      f(extract, X3:'Container', X5, X6:'Any'),
      f(remove, X6:'Any', X3:'Container', X7:'Container'),
      f(lbind, vmatching, X6:'Any', X8:'Callable'),
      f(lbind, hmatching, X6:'Any', X9:'Callable'),
      f(sfilter, X7:'Container', X8, X10:'Container'),
      f(sfilter, X7:'Container', X9, X11:'Container'),
      f(argmin, X10:'Container', uppermost, X12:'Any'),
      f(argmax, X10:'Container', uppermost, X13:'Any'),
      f(argmin, X11:'Container', leftmost, X14:'Any'),
      f(argmax, X11:'Container', leftmost, X15:'Any'),
      f(fill, IN:'Grid', 'SIX':'Integer', X6:'Patch', X16:'Grid'),
      f(fill, X16:'Grid', 'TWO':'Integer', X12:'Patch', X17:'Grid'),
      f(fill, X17:'Grid', 'ONE':'Integer', X13:'Patch', X18:'Grid'),
      f(fill, X18:'Grid', 'FOUR':'Integer', X14:'Patch', X19:'Grid'),
      f(fill, X19:'Grid', 'THREE':'Integer', X15:'Patch', OUT:'Grid')
    ].
solve(db93a21d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'NINE':'Integer', X2:'Indices'),
      f(colorfilter, X1:'Objects', 'NINE':'Integer', X3:'Objects'),
      f(rbind, shoot, (1, 0):'Any', X4:'Callable'),
      f(mapply, X4, X2:'ContainerContainer', X5:'FrozenSet'),
      f(underfill, IN:'Grid', 'ONE':'Integer', X5:'Patch', X6:'Grid'),
      f(compose, halve, width, X7:'Callable'),
      f(rbind, greater, 'ONE':'Any', X8:'Callable'),
      f(compose, X8, X7, X9:'Callable'),
      f(matcher, X7, 'THREE':'Any', X10:'Callable'),
      f(power, outbox, 'TWO':'Integer', X11:'Callable'),
      f(power, outbox, 'THREE':'Integer', X12:'Callable'),
      f(mapply, outbox, X3:'ContainerContainer', X13:'FrozenSet'),
      f(sfilter, X3:'Container', X9, X14:'Container'),
      f(sfilter, X3:'Container', X10, X15:'Container'),
      f(mapply, X11, X14:'ContainerContainer', X16:'FrozenSet'),
      f(mapply, X12, X15:'ContainerContainer', X17:'FrozenSet'),
      f(fill, X6:'Grid', 'THREE':'Integer', X13:'Patch', X18:'Grid'),
      f(fill, X18:'Grid', 'THREE':'Integer', X16:'Patch', X19:'Grid'),
      f(fill, X19:'Grid', 'THREE':'Integer', X17:'Patch', OUT:'Grid')
    ].
solve('53b68214', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(vperiod, X3:'Object', X4:'Integer'),
      f(toivec, X4:'Integer', X5:'Point'),
      f(interval, 'ZERO':'Integer', 'NINE':'Integer', 'ONE':'Integer', X6:'Tuple'),
      f(lbind, multiply, X5:'Any', X7:'Callable'),
      f(apply, X7, X6:'Container', X8:'Container'),
      f(lbind, shift, X3:'Any', X9:'Callable'),
      f(mapply, X9, X8:'ContainerContainer', X10:'FrozenSet'),
      f(astuple, X1:'Integer', X1:'Integer', X11:'Point'),
      f(portrait, X3:'Piece', returns=X12),
      f(shape, X3:'Piece', X13:'Point'),
      f(add, (1, 0):'Numerical', X13:'Numerical', X14:'Numerical'),
      f(decrement, X14:'Numerical', X15:'Numerical'),
      f(shift, X3:'Patch', X15:'Point', X16:'Patch'),
      f(branch, condition=X12, X10:'Any', X16:'Any', X17:'Any'),
      f(canvas, 'ZERO':'Integer', X11:'Point', X18:'Grid'),
      f(paint, X18:'Grid', X3:'Object', X19:'Grid'),
      f(paint, X19:'Grid', X17:'Object', OUT:'Grid')
    ].
solve(d6ad076f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(argmax, X1:'Container', size, X3:'Any'),
      f(vmatching, X2:'Patch', X3:'Patch', returns=X4),
      f(branch, condition=X4, (1, 0):'Any', (0, 1):'Any', X5:'Any'),
      f(branch, condition=X4, uppermost:'Any', leftmost:'Any', X6:'Any'),
      f(valmax, X1:'Container', X6, X7:'Integer'),
      f(X6, X2, X8),
      f(equality, X7:'Any', X8:'Any', returns=X9),
      f(branch, condition=X9, 'NEG_ONE':'Any', 'ONE':'Any', X10:'Any'),
      f(multiply, X5:'Numerical', X10:'Numerical', X11:'Numerical'),
      f(inbox, X2:'Patch', X12:'Indices'),
      f(rbind, shoot, X11:'Any', X13:'Callable'),
      f(mapply, X13, X12:'ContainerContainer', X14:'FrozenSet'),
      f(underfill, IN:'Grid', 'EIGHT':'Integer', X14:'Patch', X15:'Grid'),
      f(objects,
        X15:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X16:'Objects'),
      f(colorfilter, X16:'Objects', 'EIGHT':'Integer', X17:'Objects'),
      f(rbind, bordering, IN:'Any', X18:'Callable'),
      f(mfilter, X17:'Container', X18, X19:'FrozenSet'),
      f(cover, X15:'Grid', X19:'Patch', OUT:'Grid')
    ].
solve('6cdd2623', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:'Integer'),
      f(height, IN:'Piece', X2:'Integer'),
      f(width, IN:'Piece', X3:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:'Objects'),
      f(merge, X4:'ContainerContainer', X5:'Container'),
      f(cover, IN:'Grid', X5:'Patch', X6:'Grid'),
      f(ofcolor, IN:'Grid', X1:'Integer', X7:'Indices'),
      f(prapply, connect, X7, X7, X8),
      f(merge, X8:'ContainerContainer', X9:'Container'),
      f(decrement, X2:'Numerical', X10:'Numerical'),
      f(decrement, X3:'Numerical', X11:'Numerical'),
      f(lbind, greater, X10:'Any', X12:'Callable'),
      f(lbind, greater, X11:'Any', X13:'Callable'),
      f(fork, both, positive, X12, X14:'Callable'),
      f(compose, X14, first, X15:'Callable'),
      f(fork, both, positive, X13, X16:'Callable'),
      f(compose, X16, last, X17:'Callable'),
      f(fork, both, X15, X17, X18:'Callable'),
      f(sfilter, X9:'Container', X18, X19:'Container'),
      f(fill, X6:'Grid', X1:'Integer', X19:'Patch', X20:'Grid'),
      f(fill, X20:'Grid', X1:'Integer', X7:'Patch', OUT:'Grid')
    ].
solve(a3df8b1e, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X2:'Indices'),
      f(first, X2:'Container', X3:'Any'),
      f(shoot, X3:'Point', (-1, 1):'Point', X4:'Indices'),
      f(fill, IN:'Grid', 'ONE':'Integer', X4:'Patch', X5:'Grid'),
      f(ofcolor, X5:'Grid', 'ONE':'Integer', X6:'Indices'),
      f(urcorner, X6:'Patch', X7:'Point'),
      f(shoot, X7:'Point', (-1, -1):'Point', X8:'Indices'),
      f(fill, X5:'Grid', 'ONE':'Integer', X8:'Patch', X9:'Grid'),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X10:'Objects'),
      f(first, X10:'Container', X11:'Any'),
      f(subgrid, X11:'Patch', X9:'Grid', X12:'Grid'),
      f(shape, X12:'Piece', X13:'Point'),
      f(subtract, X13:'Numerical', (1, 0):'Numerical', X14:'Numerical'),
      f(crop, X12:'Grid', (1, 0):'Point', X14:'Point', X15:'Grid'),
      f(vconcat, X15:'Grid', X15:'Grid', X16:'Grid'),
      f(vconcat, X16:'Grid', X16:'Grid', X17:'Grid'),
      f(vconcat, X17:'Grid', X17:'Grid', X18:'Grid'),
      f(hmirror, X18:'Piece', X19:'Piece'),
      f(crop, X19:'Grid', (0, 0):'Point', X1:'Point', X20:'Grid'),
      f(hmirror, X20:'Piece', OUT:'Piece')
    ].
solve('8d510a79', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(halve, X1:'Numerical', X2:'Numerical'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X3:'Indices'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X4:'Indices'),
      f(ofcolor, IN:'Grid', 'FIVE':'Integer', X5:'Indices'),
      f(rbind, gravitate, X5:'Any', X6:'Callable'),
      f(compose, X6, initset, X7:'Callable'),
      f(fork, add, identity, X7, X8:'Callable'),
      f(fork, connect, identity, X8, X9:'Callable'),
      f(mapply, X9, X4:'ContainerContainer', X10:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X10:'Patch', X11:'Grid'),
      f(rbind, greater, X2:'Any', X12:'Callable'),
      f(compose, X12, first, X13:'Callable'),
      f(sfilter, X3:'Container', X13, X14:'Container'),
      f(difference, X3:'FrozenSet', X14:'FrozenSet', X15:'FrozenSet'),
      f(rbind, shoot, (-1, 0):'Any', X16:'Callable'),
      f(rbind, shoot, (1, 0):'Any', X17:'Callable'),
      f(mapply, X16, X15:'ContainerContainer', X18:'FrozenSet'),
      f(mapply, X17, X14:'ContainerContainer', X19:'FrozenSet'),
      f(combine, X18:'Container', X19:'Container', X20:'Container'),
      f(fill, X11:'Grid', 'ONE':'Integer', X20:'Patch', OUT:'Grid')
    ].
solve(cdecee7f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(astuple, 'ONE':'Integer', 'THREE':'Integer', X2:'Point'),
      f(size, X1:'Container', X3:'Integer'),
      f(order, X1:'Container', leftmost, X4:'Tuple'),
      f(apply, color, X4:'Container', X5:'Container'),
      f(rbind, canvas, (1, 1):'Any', X6:'Callable'),
      f(apply, X6, X5:'Container', X7:'Container'),
      f(merge, X7:'ContainerContainer', X8:'Container'),
      f(dmirror, X8:'Piece', X9:'Piece'),
      f(subtract, 'NINE':'Numerical', X3:'Numerical', X10:'Numerical'),
      f(astuple, 'ONE':'Integer', X10:'Integer', X11:'Point'),
      f(canvas, 'ZERO':'Integer', X11:'Point', X12:'Grid'),
      f(hconcat, X9:'Grid', X12:'Grid', X13:'Grid'),
      f(hsplit, X13:'Grid', 'THREE':'Integer', X14:'Tuple'),
      f(merge, X14:'ContainerContainer', X15:'Container'),
      f(crop, X15:'Grid', (0, 0):'Point', X2:'Point', X16:'Grid'),
      f(crop, X15:'Grid', (1, 0):'Point', X2:'Point', X17:'Grid'),
      f(crop, X15:'Grid', (2, 0):'Point', X2:'Point', X18:'Grid'),
      f(vmirror, X17:'Piece', X19:'Piece'),
      f(vconcat, X16:'Grid', X19:'Grid', X20:'Grid'),
      f(vconcat, X20:'Grid', X18:'Grid', OUT:'Grid')
    ].
solve('3345333e', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(asindices, IN:'Grid', X2:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X3:'Objects'),
      f(first, X3:'Container', X4:'Any'),
      f(mostcolor, X4:'Element', X5:'Integer'),
      f(matcher, first, X5:'Any', X6:'Callable'),
      f(sfilter, X4:'Container', X6, X7:'Container'),
      f(toindices, X7:'Patch', X8:'Indices'),
      f(ulcorner, X7:'Patch', X9:'Point'),
      f(difference, X2:'FrozenSet', X8:'FrozenSet', X10:'FrozenSet'),
      f(fill, IN:'Grid', X1:'Integer', X10:'Patch', X11:'Grid'),
      f(subgrid, X7:'Patch', X11:'Grid', X12:'Grid'),
      f(vmirror, X12:'Piece', X13:'Piece'),
      f(ofcolor, X13:'Grid', X5:'Integer', X14:'Indices'),
      f(last, X9:'Container', X15:'Any'),
      f(even, X15:'Integer', returns=X16),
      f(invert, X16:'Numerical', X17:'Numerical'),
      f(tojvec, X17:'Integer', X18:'Point'),
      f(add, X9:'Numerical', X18:'Numerical', X19:'Numerical'),
      f(shift, X14:'Patch', X19:'Point', X20:'Patch'),
      f(fill, X11:'Grid', X5:'Integer', X20:'Patch', OUT:'Grid')
    ].
solve(b190f7f5, IN, OUT) :-
    [ f(dmirror, IN:'Piece', X1:'Piece'),
      f(portrait, IN:'Piece', returns=X2),
      f(branch, condition=X2, X1:'Any', IN:'Any', X3:'Any'),
      f(lefthalf, X3:'Grid', X4:'Grid'),
      f(righthalf, X3:'Grid', X5:'Grid'),
      f(palette, X4:'Element', X6:'IntegerSet'),
      f(contained, 'EIGHT':'Any', X6:'Container', returns=X7),
      f(branch, condition=X7, X4:'Any', X5:'Any', X8:'Any'),
      f(branch, condition=X7, X5:'Any', X4:'Any', X9:'Any'),
      f(width, X9:'Piece', X10:'Integer'),
      f(upscale, X9:'Element', X10:'Integer', X11:'Element'),
      f(repeat, X8:'Any', X10:'Integer', X12:'Tuple'),
      f(merge, X12:'ContainerContainer', X13:'Container'),
      f(dmirror, X13:'Piece', X14:'Piece'),
      f(repeat, X14:'Any', X10:'Integer', X15:'Tuple'),
      f(merge, X15:'ContainerContainer', X16:'Container'),
      f(dmirror, X16:'Piece', X17:'Piece'),
      f(ofcolor, X17:'Grid', 'ZERO':'Integer', X18:'Indices'),
      f(fill, X11:'Grid', 'ZERO':'Integer', X18:'Patch', X19:'Grid'),
      f(dmirror, X19:'Piece', X20:'Piece'),
      f(branch, condition=X2, X20:'Any', X19:'Any', OUT:'Any')
    ].
solve(caa06a1f, IN, OUT) :-
    [ f(asobject, IN:'Grid', X1:'Object'),
      f(shape, IN:'Piece', X2:'Point'),
      f(decrement, X2:'Numerical', X3:'Numerical'),
      f(index, IN:'Grid', X3:'Point', X4:'Integer'),
      f(double, X2:'Numerical', X5:'Numerical'),
      f(canvas, X4:'Integer', X5:'Point', X6:'Grid'),
      f(paint, X6:'Grid', X1:'Object', X7:'Grid'),
      f(objects,
        X7:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X8:'Objects'),
      f(first, X8:'Container', X9:'Any'),
      f(shift, X9:'Patch', (0, -1):'Point', X10:'Patch'),
      f(vperiod, X10:'Object', X11:'Integer'),
      f(hperiod, X10:'Object', X12:'Integer'),
      f(neighbors, (0, 0):'Point', X13:'Indices'),
      f(lbind, mapply, neighbors:'Any', X14:'Callable'),
      f(power, X14, 'TWO':'Integer', X15:'Callable'),
      f(X15, X13, X16),
      f(astuple, X11:'Integer', X12:'Integer', X17:'Point'),
      f(lbind, multiply, X17:'Any', X18:'Callable'),
      f(apply, X18, X16:'Container', X19:'Container'),
      f(lbind, shift, X10:'Any', X20:'Callable'),
      f(mapply, X20, X19:'ContainerContainer', X21:'FrozenSet'),
      f(paint, IN:'Grid', X21:'Object', OUT:'Grid')
    ].
solve(e21d9049, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(leastcolor, IN:'Element', X2:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:'Objects'),
      f(ofcolor, IN:'Grid', X2:'Integer', X4:'Indices'),
      f(merge, X3:'ContainerContainer', X5:'Container'),
      f(shape, X5:'Piece', X6:'Point'),
      f(neighbors, (0, 0):'Point', X7:'Indices'),
      f(lbind, mapply, neighbors:'Any', X8:'Callable'),
      f(power, X8, 'TWO':'Integer', X9:'Callable'),
      f(X9, X7, X10),
      f(lbind, multiply, X6:'Any', X11:'Callable'),
      f(lbind, shift, X5:'Any', X12:'Callable'),
      f(apply, X11, X10:'Container', X13:'Container'),
      f(mapply, X12, X13:'ContainerContainer', X14:'FrozenSet'),
      f(lbind, hmatching, X4:'Any', X15:'Callable'),
      f(lbind, vmatching, X4:'Any', X16:'Callable'),
      f(fork, either, X15, X16, X17:'Callable'),
      f(compose, X17, initset, X18:'Callable'),
      f(paint, IN:'Grid', X14:'Object', X19:'Grid'),
      f(sfilter, X1:'Container', X18, X20:'Container'),
      f(difference, X1:'FrozenSet', X20:'FrozenSet', X21:'FrozenSet'),
      f(cover, X19:'Grid', X21:'Patch', OUT:'Grid')
    ].
solve(d89b689b, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X2:'Indices'),
      f(replace, IN:'Grid', 'EIGHT':'Integer', 'ZERO':'Integer', X3:'Grid'),
      f(vsplit, X3:'Grid', 'TWO':'Integer', X4:'Tuple'),
      f(rbind, order, leftmost:'Any', X5:'Callable'),
      f(lbind, apply, color:'Any', X6:'Callable'),
      f(rbind, repeat, 'ONE':'Any', X7:'Callable'),
      f(chain, X7, X6, X5, X8:'Callable'),
      f(matcher, first, 'ZERO':'Any', X9:'Callable'),
      f(compose, flip, X9, X10:'Callable'),
      f(rbind, sfilter, X10:'Any', X11:'Callable'),
      f(lbind, apply, initset:'Any', X12:'Callable'),
      f(chain, X12, X11, asobject, X13:'Callable'),
      f(compose, X8, X13, X14:'Callable'),
      f(apply, X14, X4:'Container', X15:'Container'),
      f(merge, X15:'ContainerContainer', X16:'Container'),
      f(ulcorner, X2:'Patch', X17:'Point'),
      f(asindices, X16:'Grid', X18:'Indices'),
      f(toobject, X18:'Patch', X16:'Grid', X19:'Object'),
      f(shift, X19:'Patch', X17:'Point', X20:'Patch'),
      f(cover, IN:'Grid', X1:'Patch', X21:'Grid'),
      f(paint, X21:'Grid', X20:'Object', OUT:'Grid')
    ].
solve('746b3537', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(sfilter, X2:'Container', vline, X3:'Container'),
      f(compose, positive, size, X4:'Callable'),
      f(X4, X3, X5),
      f(branch, condition=X5, X1:'Any', IN:'Any', X6:'Any'),
      f(height, X6:'Piece', X7:'Integer'),
      f(astuple, X7:'Integer', 'ONE':'Integer', X8:'Point'),
      f(crop, X6:'Grid', (0, 0):'Point', X8:'Point', X9:'Grid'),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X10:'Objects'),
      f(asindices, X9:'Grid', X11:'Indices'),
      f(apply, center, X10:'Container', X12:'Container'),
      f(difference,
        X11:'FrozenSet',
        X12:'FrozenSet',
        X13:'FrozenSet'),
      f(fill, X9:'Grid', 'ZERO':'Integer', X13:'Patch', X14:'Grid'),
      f(vsplit, X14:'Grid', X7:'Integer', X15:'Tuple'),
      f(canvas, 'ZERO':'Integer', (1, 1):'Point', X16:'Grid'),
      f(rbind, equality, X16:'Any', X17:'Callable'),
      f(compose, flip, X17, X18:'Callable'),
      f(sfilter, X15:'Container', X18, X19:'Container'),
      f(merge, X19:'ContainerContainer', X20:'Container'),
      f(dmirror, X20:'Piece', X21:'Piece'),
      f(branch, condition=X5, X21:'Any', X20:'Any', OUT:'Any')
    ].
solve(63613498, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(crop, IN:'Grid', (0, 0):'Point', (3, 3):'Point', X2:'Grid'),
      f(partition, X2:'Grid', X3:'Objects'),
      f(colorfilter, X3:'Objects', 'ZERO':'Integer', X4:'Objects'),
      f(difference, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(first, X5:'Container', X6:'Any'),
      f(toindices, X6:'Patch', X7:'Indices'),
      f(ulcorner, X7:'Patch', X8:'Point'),
      f(invert, X8:'Numerical', X9:'Numerical'),
      f(shift, X7:'Patch', X9:'Point', X10:'Patch'),
      f(totuple, X1:'FrozenSet', X11:'Tuple'),
      f(apply, toindices, X11:'Container', X12:'Container'),
      f(apply, normalize, X12:'Container', X13:'Container'),
      f(pair, X11:'Tuple', X13:'Tuple', X14:'TupleTuple'),
      f(matcher, last, X10:'Any', X15:'Callable'),
      f(sfilter, X14:'Container', X15, X16:'Container'),
      f(matcher, first, X6:'Any', X17:'Callable'),
      f(compose, flip, X17, X18:'Callable'),
      f(extract, X16:'Container', X18, X19:'Any'),
      f(first, X19:'Container', X20:'Any'),
      f(recolor, 'FIVE':'Integer', X20:'Patch', X21:'Object'),
      f(paint, IN:'Grid', X21:'Object', OUT:'Grid')
    ].
solve('06df4c85', IN, OUT) :-
    [ f(partition, IN:'Grid', X1:'Objects'),
      f(mostcolor, IN:'Element', X2:'Integer'),
      f(ofcolor, IN:'Grid', X2:'Integer', X3:'Indices'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X4:'Objects'),
      f(argmax, X1:'Container', size, X5:'Any'),
      f(difference, X1:'FrozenSet', X4:'FrozenSet', X6:'FrozenSet'),
      f(remove, X5:'Any', X6:'Container', X7:'Container'),
      f(merge, X7:'ContainerContainer', X8:'Container'),
      f(product, X8:'Container', X8:'Container', X9:'FrozenSet'),
      f(power, first, 'TWO':'Integer', X10:'Callable'),
      f(compose, first, last, X11:'Callable'),
      f(fork, equality, X10, X11, X12:'Callable'),
      f(sfilter, X9:'Container', X12, X13:'Container'),
      f(compose, last, first, X14:'Callable'),
      f(power, last, 'TWO':'Integer', X15:'Callable'),
      f(fork, connect, X14, X15, X16:'Callable'),
      f(fork, recolor, color, X16, X17:'Callable'),
      f(apply, X17, X13:'Container', X18:'Container'),
      f(fork, either, vline, hline, X19:'Callable'),
      f(mfilter, X18:'Container', X19, X20:'FrozenSet'),
      f(paint, IN:'Grid', X20:'Object', X21:'Grid'),
      f(fill, X21:'Grid', X2:'Integer', X3:'Patch', OUT:'Grid')
    ].
solve(f9012d9b, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X2:'Indices'),
      f(lbind, contained, 'ZERO':'Any', X3:'Callable'),
      f(chain, flip, X3, palette, X4:'Callable'),
      f(mfilter, X1:'Container', X4, X5:'FrozenSet'),
      f(vsplit, IN:'Grid', 'TWO':'Integer', X6:'Tuple'),
      f(hsplit, IN:'Grid', 'TWO':'Integer', X7:'Tuple'),
      f(extract, X6:'Container', X4, X8:'Any'),
      f(extract, X7:'Container', X4, X9:'Any'),
      f(asobject, X8:'Grid', X10:'Object'),
      f(asobject, X9:'Grid', X11:'Object'),
      f(vperiod, X10:'Object', X12:'Integer'),
      f(hperiod, X11:'Object', X13:'Integer'),
      f(neighbors, (0, 0):'Point', X14:'Indices'),
      f(mapply, neighbors, X14:'ContainerContainer', X15:'FrozenSet'),
      f(astuple, X12:'Integer', X13:'Integer', X16:'Point'),
      f(rbind, multiply, X16:'Any', X17:'Callable'),
      f(apply, X17, X15:'Container', X18:'Container'),
      f(lbind, shift, X5:'Any', X19:'Callable'),
      f(mapply, X19, X18:'ContainerContainer', X20:'FrozenSet'),
      f(paint, IN:'Grid', X20:'Object', X21:'Grid'),
      f(subgrid, X2:'Patch', X21:'Grid', OUT:'Grid')
    ].
solve('4522001f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(toindices, X2:'Patch', X3:'Indices'),
      f(contained, (0, 2):'Any', X3:'Container', returns=X4),
      f(contained, (2, 2):'Any', X3:'Container', returns=X5),
      f(contained, (2, 0):'Any', X3:'Container', returns=X6),
      f(astuple, 'NINE':'Integer', 'NINE':'Integer', X7:'Point'),
      f(canvas, 'ZERO':'Integer', X7:'Point', X8:'Grid'),
      f(astuple, 'THREE':'Integer', (0, 0):'Integer', X9:'Point'),
      f(initset, X9:'Any', X10:'FrozenSet'),
      f(upscale, X10:'Element', 'TWO':'Integer', X11:'Element'),
      f(upscale, X11:'Element', 'TWO':'Integer', X12:'Element'),
      f(shape, X12:'Piece', X13:'Point'),
      f(shift, X12:'Patch', X13:'Point', X14:'Patch'),
      f(combine, X12:'Container', X14:'Container', X15:'Container'),
      f(paint, X8:'Grid', X15:'Object', X16:'Grid'),
      f(rot90, X16:'Grid', X17:'Grid'),
      f(rot180, X16:'Grid', X18:'Grid'),
      f(rot270, X16:'Grid', X19:'Grid'),
      f(branch, condition=X4, X17:'Any', X16:'Any', X20:'Any'),
      f(branch, condition=X5, X18:'Any', X20:'Any', X21:'Any'),
      f(branch, condition=X6, X19:'Any', X21:'Any', OUT:'Any')
    ].
solve(a48eeaf7, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X3:'Objects'),
      f(rbind, gravitate, X2:'Any', X4:'Callable'),
      f(fork, shift, identity, X4, X5:'Callable'),
      f(mapply, X5, X3:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(rbind, vmatching, X2:'Any', X8:'Callable'),
      f(rbind, hmatching, X2:'Any', X9:'Callable'),
      f(fork, either, X8, X9, X10:'Callable'),
      f(sfilter, X3:'Container', X10, X11:'Container'),
      f(merge, X3:'ContainerContainer', X12:'Container'),
      f(cover, X7:'Grid', X12:'Patch', X13:'Grid'),
      f(difference, X3:'FrozenSet', X11:'FrozenSet', X14:'FrozenSet'),
      f(rbind, position, X2:'Any', X15:'Callable'),
      f(rbind, manhattan, X2:'Any', X16:'Callable'),
      f(compose, halve, X16, X17:'Callable'),
      f(fork, multiply, X17, X15, X18:'Callable'),
      f(fork, subtract, X18, X15, X19:'Callable'),
      f(fork, shift, identity, X19, X20:'Callable'),
      f(mapply, X20, X14:'ContainerContainer', X21:'FrozenSet'),
      f(paint, X13:'Grid', X21:'Object', OUT:'Grid')
    ].
solve(eb5a1d5d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(color, X2:'Object', X3:'Integer'),
      f(compose, invert, width, X4:'Callable'),
      f(order, X1:'Container', X4, X5:'Tuple'),
      f(apply, color, X5:'Container', X6:'Container'),
      f(size, X5:'Container', X7:'Integer'),
      f(double, X7:'Numerical', X8:'Numerical'),
      f(decrement, X8:'Numerical', X9:'Numerical'),
      f(interval, 'ZERO':'Integer', X7:'Integer', 'ONE':'Integer', X10:'Tuple'),
      f(pair, X10:'Tuple', X10:'Tuple', X11:'TupleTuple'),
      f(decrement, X9:'Numerical', X12:'Numerical'),
      f(interval,
        X12:'Integer',
        'ZERO':'Integer',
        'NEG_TWO':'Integer',
        X13:'Tuple'),
      f(papply, add, X13:'Tuple', X10:'Tuple', X14:'Tuple'),
      f(order, X14:'Container', invert, X15:'Tuple'),
      f(pair, X15:'Tuple', X15:'Tuple', X16:'TupleTuple'),
      f(pair, X11:'Tuple', X16:'Tuple', X17:'TupleTuple'),
      f(apply, box, X17:'Container', X18:'Container'),
      f(mpapply, recolor, X6:'Tuple', X18:'Tuple', X19:'Tuple'),
      f(astuple, X9:'Integer', X9:'Integer', X20:'Point'),
      f(canvas, 'ZERO':'Integer', X20:'Point', X21:'Grid'),
      f(paint, X21:'Grid', X19:'Object', X22:'Grid'),
      f(replace, X22:'Grid', 'ZERO':'Integer', X3:'Integer', OUT:'Grid')
    ].
solve(e179c5f4, IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X2:'Indices'),
      f(first, X2:'Container', X3:'Any'),
      f(shoot, X3:'Point', (-1, 1):'Point', X4:'Indices'),
      f(fill, IN:'Grid', 'ONE':'Integer', X4:'Patch', X5:'Grid'),
      f(ofcolor, X5:'Grid', 'ONE':'Integer', X6:'Indices'),
      f(urcorner, X6:'Patch', X7:'Point'),
      f(shoot, X7:'Point', (-1, -1):'Point', X8:'Indices'),
      f(fill, X5:'Grid', 'ONE':'Integer', X8:'Patch', X9:'Grid'),
      f(ofcolor, X9:'Grid', 'ONE':'Integer', X10:'Indices'),
      f(subgrid, X10:'Patch', X9:'Grid', X11:'Grid'),
      f(height, X11:'Piece', X12:'Integer'),
      f(width, X11:'Piece', X13:'Integer'),
      f(decrement, X12:'Numerical', X14:'Numerical'),
      f(astuple, X14:'Integer', X13:'Integer', X15:'Point'),
      f(ulcorner, X10:'Patch', X16:'Point'),
      f(crop, X9:'Grid', X16:'Point', X15:'Point', X17:'Grid'),
      f(repeat, X17:'Any', 'NINE':'Integer', X18:'Tuple'),
      f(merge, X18:'ContainerContainer', X19:'Container'),
      f(astuple, X1:'Integer', X13:'Integer', X20:'Point'),
      f(crop, X19:'Grid', (0, 0):'Point', X20:'Point', X21:'Grid'),
      f(hmirror, X21:'Piece', X22:'Piece'),
      f(replace, X22:'Grid', 'ZERO':'Integer', 'EIGHT':'Integer', OUT:'Grid')
    ].
solve('228f6490', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'ZERO':'Integer', X2:'Objects'),
      f(rbind, bordering, IN:'Any', X3:'Callable'),
      f(compose, flip, X3, X4:'Callable'),
      f(sfilter, X2:'Container', X4, X5:'Container'),
      f(first, X5:'Container', X6:'Any'),
      f(last, X5:'Container', X7:'Any'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X8:'FrozenSet'),
      f(compose, normalize, toindices, X9:'Callable'),
      f(X9, X6, X10),
      f(X9, X7, X11),
      f(matcher, X9, X10:'Any', X12:'Callable'),
      f(matcher, X9, X11:'Any', X13:'Callable'),
      f(extract, X8:'Container', X12, X14:'Any'),
      f(extract, X8:'Container', X13, X15:'Any'),
      f(ulcorner, X6:'Patch', X16:'Point'),
      f(ulcorner, X7:'Patch', X17:'Point'),
      f(ulcorner, X14:'Patch', X18:'Point'),
      f(ulcorner, X15:'Patch', X19:'Point'),
      f(subtract, X16:'Numerical', X18:'Numerical', X20:'Numerical'),
      f(subtract, X17:'Numerical', X19:'Numerical', X21:'Numerical'),
      f(move, IN:'Grid', X14:'Object', X20:'Point', X22:'Grid'),
      f(move, X22:'Grid', X15:'Object', X21:'Point', OUT:'Grid')
    ].
solve('995c5fa3', IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':'Integer', X1:'Tuple'),
      f(astuple, 'TWO':'Integer', 'ONE':'Integer', X2:'Point'),
      f(rbind, ofcolor, 'ZERO':'Any', X3:'Callable'),
      f(compose, ulcorner, X3, X4:'Callable'),
      f(compose, size, X3, X5:'Callable'),
      f(matcher, X5, 'ZERO':'Any', X6:'Callable'),
      f(matcher, X4, (1, 1):'Any', X7:'Callable'),
      f(matcher, X4, (1, 0):'Any', X8:'Callable'),
      f(matcher, X4, X2:'Any', X9:'Callable'),
      f(rbind, multiply, 'THREE':'Any', X10:'Callable'),
      f(power, double, 'TWO':'Integer', X11:'Callable'),
      f(compose, double, X6, X12:'Callable'),
      f(chain, X11, double, X7, X13:'Callable'),
      f(compose, X10, X8, X14:'Callable'),
      f(compose, X11, X9, X15:'Callable'),
      f(fork, add, X12, X13, X16:'Callable'),
      f(fork, add, X14, X15, X17:'Callable'),
      f(fork, add, X16, X17, X18:'Callable'),
      f(rbind, canvas, (1, 1):'Any', X19:'Callable'),
      f(compose, X19, X18, X20:'Callable'),
      f(apply, X20, X1:'Container', X21:'Container'),
      f(merge, X21:'ContainerContainer', X22:'Container'),
      f(hupscale, X22:'Grid', 'THREE':'Integer', OUT:'Grid')
    ].
solve(d06dbe63, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':'Integer', X1:'Indices'),
      f(center, X1:'Patch', X2:'Point'),
      f(connect, (0, 0):'Point', (1, 0):'Point', X3:'Indices'),
      f(connect, (0, 0):'Point', (0, 2):'Point', X4:'Indices'),
      f(combine, X3:'Container', X4:'Container', X5:'Container'),
      f(subtract, X2:'Numerical', (2, 0):'Numerical', X6:'Numerical'),
      f(shift, X5:'Patch', X6:'Point', X7:'Patch'),
      f(astuple, 'NEG_TWO':'Integer', 'TWO':'Integer', X8:'Point'),
      f(interval, 'ZERO':'Integer', 'FIVE':'Integer', 'ONE':'Integer', X9:'Tuple'),
      f(lbind, multiply, X8:'Any', X10:'Callable'),
      f(apply, X10, X9:'Container', X11:'Container'),
      f(lbind, shift, X7:'Any', X12:'Callable'),
      f(mapply, X12, X11:'ContainerContainer', X13:'FrozenSet'),
      f(fill, IN:'Grid', 'FIVE':'Integer', X13:'Patch', X14:'Grid'),
      f(rot180, X14:'Grid', X15:'Grid'),
      f(ofcolor, X15:'Grid', 'EIGHT':'Integer', X16:'Indices'),
      f(center, X16:'Patch', X17:'Point'),
      f(subtract, X17:'Numerical', X6:'Numerical', X18:'Numerical'),
      f(shift, X13:'Patch', X18:'Point', X19:'Patch'),
      f(toivec, 'NEG_TWO':'Integer', X20:'Point'),
      f(shift, X19:'Patch', X20:'Point', X21:'Patch'),
      f(fill, X15:'Grid', 'FIVE':'Integer', X21:'Patch', X22:'Grid'),
      f(rot180, X22:'Grid', OUT:'Grid')
    ].
solve('36fdfd69', IN, OUT) :-
    [ f(upscale, IN:'Element', 'TWO':'Integer', X1:'Element'),
      f(ofcolor, X1:'Grid', 'TWO':'Integer', X2:'Indices'),
      f(mapply, neighbors, X2:'ContainerContainer', X3:'FrozenSet'),
      f(difference, X3:'FrozenSet', X2:'FrozenSet', X4:'FrozenSet'),
      f(fill, X1:'Grid', 'FOUR':'Integer', X4:'Patch', X5:'Grid'),
      f(objects,
        X5:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X6:'Objects'),
      f(colorfilter, X6:'Objects', 'FOUR':'Integer', X7:'Objects'),
      f(totuple, X7:'FrozenSet', X8:'Tuple'),
      f(rbind, subgrid, X5:'Any', X9:'Callable'),
      f(apply, X9, X8:'Container', X10:'Container'),
      f(apply, ulcorner, X8:'Container', X11:'Container'),
      f(rbind, ofcolor, 'TWO':'Any', X12:'Callable'),
      f(apply, X12, X10:'Container', X13:'Container'),
      f(papply, subgrid, X13:'Tuple', X10:'Tuple', X14:'Tuple'),
      f(rbind, downscale, 'TWO':'Any', X15:'Callable'),
      f(apply, X15, X14:'Container', X16:'Container'),
      f(apply, asindices, X16:'Container', X17:'Container'),
      f(apply, increment, X11:'Container', X18:'Container'),
      f(apply, halve, X18:'Container', X19:'Container'),
      f(mpapply, shift, X17:'Tuple', X19:'Tuple', X20:'Tuple'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X20:'Patch', X21:'Grid'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X22:'Indices'),
      f(fill, X21:'Grid', 'TWO':'Integer', X22:'Patch', OUT:'Grid')
    ].
solve('0a938d79', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch, condition=X1, dmirror:'Any', identity:'Any', X2:'Any'),
      f(X2, IN, X3),
      f(objects,
        X3:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:'Objects'),
      f(argmin, X4:'Container', leftmost, X5:'Any'),
      f(argmax, X4:'Container', leftmost, X6:'Any'),
      f(color, X5:'Object', X7:'Integer'),
      f(color, X6:'Object', X8:'Integer'),
      f(leftmost, X5:'Patch', X9:'Integer'),
      f(leftmost, X6:'Patch', X10:'Integer'),
      f(subtract, X10:'Numerical', X9:'Numerical', X11:'Numerical'),
      f(double, X11:'Numerical', X12:'Numerical'),
      f(multiply, 'THREE':'Numerical', 'TEN':'Numerical', X13:'Numerical'),
      f(interval,
        X9:'Integer',
        X13:'Integer',
        X12:'Integer',
        X14:'Tuple'),
      f(interval,
        X10:'Integer',
        X13:'Integer',
        X12:'Integer',
        X15:'Tuple'),
      f(compose, vfrontier, tojvec, X16:'Callable'),
      f(mapply, X16, X14:'ContainerContainer', X17:'FrozenSet'),
      f(mapply, X16, X15:'ContainerContainer', X18:'FrozenSet'),
      f(recolor, X7:'Integer', X17:'Patch', X19:'Object'),
      f(recolor, X8:'Integer', X18:'Patch', X20:'Object'),
      f(combine, X19:'Container', X20:'Container', X21:'Container'),
      f(paint, X3:'Grid', X21:'Object', X22:'Grid'),
      f(X2, X22, OUT)
    ].
solve('045e512c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(apply, size, X1:'Container', X2:'Container'),
      f(maximum, X2:'IntegerSet', X3:'Integer'),
      f(lbind, greater, X3:'Any', X4:'Callable'),
      f(compose, X4, size, X5:'Callable'),
      f(sfilter, X1:'Container', X5, X6:'Container'),
      f(difference, X1:'FrozenSet', X6:'FrozenSet', X7:'FrozenSet'),
      f(first, X7:'Container', X8:'Any'),
      f(interval, 'ONE':'Integer', 'FOUR':'Integer', 'ONE':'Integer', X9:'Tuple'),
      f(lbind, multiply, 'FOUR':'Any', X10:'Callable'),
      f(apply, X10, X9:'Container', X11:'Container'),
      f(product, X6:'Container', X11:'Container', X12:'FrozenSet'),
      f(totuple, X12:'FrozenSet', X13:'Tuple'),
      f(apply, first, X13:'Container', X14:'Container'),
      f(apply, last, X13:'Container', X15:'Container'),
      f(apply, color, X14:'Container', X16:'Container'),
      f(lbind, position, X8:'Any', X17:'Callable'),
      f(apply, X17, X14:'Container', X18:'Container'),
      f(papply, multiply, X18:'Tuple', X15:'Tuple', X19:'Tuple'),
      f(rbind, recolor, X8:'Any', X20:'Callable'),
      f(apply, X20, X16:'Container', X21:'Container'),
      f(mpapply, shift, X21:'Tuple', X19:'Tuple', X22:'Tuple'),
      f(paint, IN:'Grid', X22:'Object', X23:'Grid'),
      f(paint, X23:'Grid', X8:'Object', OUT:'Grid')
    ].
solve(82819916, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(index, IN:'Grid', (1, 0):'Point', X2:'Integer'),
      f(argmax, X1:'Container', size, X3:'Any'),
      f(remove, X3:'Any', X1:'Container', X4:'Container'),
      f(matcher, first, X2:'Any', X5:'Callable'),
      f(sfilter, X3:'Container', X5, X6:'Container'),
      f(difference, X3:'FrozenSet', X6:'FrozenSet', X7:'FrozenSet'),
      f(lbind, shift, X6:'Any', X8:'Callable'),
      f(lbind, shift, X7:'Any', X9:'Callable'),
      f(totuple, X4:'FrozenSet', X10:'Tuple'),
      f(apply, ulcorner, X10:'Container', X11:'Container'),
      f(apply, urcorner, X10:'Container', X12:'Container'),
      f(apply, first, X11:'Container', X13:'Container'),
      f(apply, decrement, X13:'Container', X14:'Container'),
      f(apply, toivec, X14:'Container', X15:'Container'),
      f(lbind, index, IN:'Any', X16:'Callable'),
      f(apply, X16, X11:'Container', X17:'Container'),
      f(apply, X16, X12:'Container', X18:'Container'),
      f(apply, X8, X15:'Container', X19:'Container'),
      f(apply, X9, X15:'Container', X20:'Container'),
      f(mpapply, recolor, X17:'Tuple', X19:'Tuple', X21:'Tuple'),
      f(mpapply, recolor, X18:'Tuple', X20:'Tuple', X22:'Tuple'),
      f(paint, IN:'Grid', X21:'Object', X23:'Grid'),
      f(paint, X23:'Grid', X22:'Object', OUT:'Grid')
    ].
solve('99fa7670', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:'Point'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(rbind, shoot, (0, 1):'Any', X3:'Callable'),
      f(compose, X3, center, X4:'Callable'),
      f(fork, recolor, color, X4, X5:'Callable'),
      f(mapply, X5, X2:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(add, X1:'Numerical', (1, -1):'Numerical', X8:'Numerical'),
      f(initset, X8:'Any', X9:'FrozenSet'),
      f(recolor, 'ZERO':'Integer', X9:'Patch', X10:'Object'),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X11:'Objects'),
      f(insert, X10:'Any', X11:'FrozenSet', X12:'FrozenSet'),
      f(order, X12:'Container', uppermost, X13:'Tuple'),
      f(first, X13:'Container', X14:'Any'),
      f(remove, X10:'Any', X13:'Container', X15:'Container'),
      f(remove, X14:'Any', X13:'Container', X16:'Container'),
      f(compose, lrcorner, first, X17:'Callable'),
      f(compose, lrcorner, last, X18:'Callable'),
      f(fork, connect, X17, X18, X19:'Callable'),
      f(compose, color, first, X20:'Callable'),
      f(fork, recolor, X20, X19, X21:'Callable'),
      f(pair, X15:'Tuple', X16:'Tuple', X22:'TupleTuple'),
      f(mapply, X21, X22:'ContainerContainer', X23:'FrozenSet'),
      f(underpaint, X7:'Grid', X23:'Object', OUT:'Grid')
    ].
solve('72322fa7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(matcher, numcolors, 'ONE':'Any', X2:'Callable'),
      f(sfilter, X1:'Container', X2, X3:'Container'),
      f(difference, X1:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(lbind, matcher, first:'Any', X5:'Callable'),
      f(compose, X5, mostcolor, X6:'Callable'),
      f(fork, sfilter, identity, X6, X7:'Callable'),
      f(fork, difference, identity, X7, X8:'Callable'),
      f(lbind, occurrences, IN:'Any', X9:'Callable'),
      f(compose, X9, X7, X10:'Callable'),
      f(compose, X9, X8, X11:'Callable'),
      f(compose, ulcorner, X8, X12:'Callable'),
      f(fork, subtract, ulcorner, X12, X13:'Callable'),
      f(lbind, rbind, add:'Any', X14:'Callable'),
      f(compose, X14, X13, X15:'Callable'),
      f(fork, apply, X15, X11, X16:'Callable'),
      f(lbind, lbind, shift:'Any', X17:'Callable'),
      f(compose, X17, normalize, X18:'Callable'),
      f(fork, mapply, X18, X10, X19:'Callable'),
      f(fork, mapply, X18, X16, X20:'Callable'),
      f(mapply, X19, X4:'ContainerContainer', X21:'FrozenSet'),
      f(mapply, X20, X4:'ContainerContainer', X22:'FrozenSet'),
      f(paint, IN:'Grid', X21:'Object', X23:'Grid'),
      f(paint, X23:'Grid', X22:'Object', OUT:'Grid')
    ].
solve('855e0971', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:'Objects'),
      f(sizefilter, X2:'Container', 'ONE':'Integer', X3:'FrozenSet'),
      f(difference, X2:'FrozenSet', X3:'FrozenSet', X4:'FrozenSet'),
      f(first, X4:'Container', X5:'Any'),
      f(portrait, X5:'Piece', returns=X6),
      f(branch, condition=X6, X1:'Any', IN:'Any', X7:'Any'),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X8:'Objects'),
      f(sizefilter, X8:'Container', 'ONE':'Integer', X9:'FrozenSet'),
      f(difference, X8:'FrozenSet', X9:'FrozenSet', X10:'FrozenSet'),
      f(rbind, subgrid, X7:'Any', X11:'Callable'),
      f(rbind, ofcolor, 'ZERO':'Any', X12:'Callable'),
      f(lbind, mapply, vfrontier:'Any', X13:'Callable'),
      f(chain, X13, X12, X11, X14:'Callable'),
      f(lbind, recolor, 'ZERO':'Any', X15:'Callable'),
      f(compose, X15, X14, X16:'Callable'),
      f(fork, paint, X11, X16, X17:'Callable'),
      f(fork, toobject, asindices, identity, X18:'Callable'),
      f(compose, X18, X17, X19:'Callable'),
      f(fork, shift, X19, ulcorner, X20:'Callable'),
      f(mapply, X20, X10:'ContainerContainer', X21:'FrozenSet'),
      f(paint, X7:'Grid', X21:'Object', X22:'Grid'),
      f(rot270, X22:'Grid', X23:'Grid'),
      f(branch, condition=X6, X23:'Any', X22:'Any', OUT:'Any')
    ].
solve(a78176bb, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(remove, 'ZERO':'Any', X1:'Container', X3:'Container'),
      f(other, X3:'Container', 'FIVE':'Any', X4:'Any'),
      f(colorfilter, X2:'Objects', 'FIVE':'Integer', X5:'Objects'),
      f(lbind, index, IN:'Any', X6:'Callable'),
      f(compose, X6, urcorner, X7:'Callable'),
      f(matcher, X7, 'FIVE':'Any', X8:'Callable'),
      f(sfilter, X5:'Container', X8, X9:'Container'),
      f(difference, X5:'FrozenSet', X9:'FrozenSet', X10:'FrozenSet'),
      f(apply, urcorner, X9:'Container', X11:'Container'),
      f(apply, llcorner, X10:'Container', X12:'Container'),
      f(rbind, add, (-1, 1):'Any', X13:'Callable'),
      f(rbind, add, (1, -1):'Any', X14:'Callable'),
      f(apply, X13, X11:'Container', X15:'Container'),
      f(apply, X14, X12:'Container', X16:'Container'),
      f(rbind, shoot, (1, 1):'Any', X17:'Callable'),
      f(rbind, shoot, (-1, -1):'Any', X18:'Callable'),
      f(fork, combine, X17, X18, X19:'Callable'),
      f(mapply, X19, X15:'ContainerContainer', X20:'FrozenSet'),
      f(mapply, X19, X16:'ContainerContainer', X21:'FrozenSet'),
      f(combine, X20:'Container', X21:'Container', X22:'Container'),
      f(fill, IN:'Grid', X4:'Integer', X22:'Patch', X23:'Grid'),
      f(replace, X23:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', OUT:'Grid')
    ].
solve('952a094c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(first, X1:'Container', X2:'Any'),
      f(inbox, X2:'Patch', X3:'Indices'),
      f(toobject, X3:'Patch', IN:'Grid', X4:'Object'),
      f(dmirror, X4:'Piece', X5:'Piece'),
      f(cmirror, X5:'Piece', X6:'Piece'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(lbind, index, X7:'Any', X8:'Callable'),
      f(fork, astuple, X8, identity, X9:'Callable'),
      f(compose, initset, X9, X10:'Callable'),
      f(double, (-1, -1):'Numerical', X11:'Numerical'),
      f(astuple, 'NEG_TWO':'Integer', 'TWO':'Integer', X12:'Point'),
      f(astuple, 'TWO':'Integer', 'NEG_TWO':'Integer', X13:'Point'),
      f(ulcorner, X3:'Patch', X14:'Point'),
      f(urcorner, X3:'Patch', X15:'Point'),
      f(llcorner, X3:'Patch', X16:'Point'),
      f(lrcorner, X3:'Patch', X17:'Point'),
      f(X10, X14, X18),
      f(move, X7:'Grid', X18:'Object', X11:'Point', X19:'Grid'),
      f(X10, X15, X20),
      f(move, X19:'Grid', X20:'Object', X12:'Point', X21:'Grid'),
      f(X10, X16, X22),
      f(move, X21:'Grid', X22:'Object', X13:'Point', X23:'Grid'),
      f(X10, X17, X24),
      f(move, X23:'Grid', X24:'Object', (2, 2):'Point', OUT:'Grid')
    ].
solve('6d58a25d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(remove, X2:'Any', X1:'Container', X3:'Container'),
      f(first, X3:'Container', X4:'Any'),
      f(color, X4:'Object', X5:'Integer'),
      f(leftmost, X2:'Patch', X6:'Integer'),
      f(rightmost, X2:'Patch', X7:'Integer'),
      f(center, X2:'Patch', X8:'Point'),
      f(first, X8:'Container', X9:'Any'),
      f(rbind, greater, X6:'Any', X10:'Callable'),
      f(compose, X10, leftmost, X11:'Callable'),
      f(lbind, greater, X7:'Any', X12:'Callable'),
      f(compose, X12, rightmost, X13:'Callable'),
      f(rbind, greater, X9:'Any', X14:'Callable'),
      f(compose, X14, lowermost, X15:'Callable'),
      f(fork, both, X11, X13, X16:'Callable'),
      f(fork, both, X16, X15, X17:'Callable'),
      f(sfilter, X3:'Container', X17, X18:'Container'),
      f(mapply, toindices, X18:'ContainerContainer', X19:'FrozenSet'),
      f(apply, last, X19:'Container', X20:'Container'),
      f(lbind, astuple, X9:'Any', X21:'Callable'),
      f(apply, X21, X20:'Container', X22:'Container'),
      f(rbind, shoot, (1, 0):'Any', X23:'Callable'),
      f(mapply, X23, X22:'ContainerContainer', X24:'FrozenSet'),
      f(underfill,
        IN:'Grid',
        X5:'Integer',
        X24:'Patch',
        OUT:'Grid')
    ].
solve('6aa20dc0', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', numcolors, X2:'Any'),
      f(normalize, X2:'Patch', X3:'Patch'),
      f(lbind, matcher, first:'Any', X4:'Callable'),
      f(compose, X4, mostcolor, X5:'Callable'),
      f(fork, sfilter, identity, X5, X6:'Callable'),
      f(fork, difference, identity, X6, X7:'Callable'),
      f(lbind, rbind, upscale:'Any', X8:'Callable'),
      f(interval, 'ONE':'Integer', 'FOUR':'Integer', 'ONE':'Integer', X9:'Tuple'),
      f(apply, X8, X9:'Container', X10:'Container'),
      f(initset, identity:'Any', X11:'FrozenSet'),
      f(insert, vmirror:'Any', X11:'FrozenSet', X12:'FrozenSet'),
      f(insert, hmirror:'Any', X12:'FrozenSet', X13:'FrozenSet'),
      f(insert, cmirror:'Any', X13:'FrozenSet', X14:'FrozenSet'),
      f(insert, dmirror:'Any', X14:'FrozenSet', X15:'FrozenSet'),
      f(fork, compose, first, last, X16:'Callable'),
      f(lbind, occurrences, IN:'Any', X17:'Callable'),
      f(lbind, lbind, shift:'Any', X18:'Callable'),
      f(compose, X17, X7, X19:'Callable'),
      f(product, X15:'Container', X10:'Container', X20:'FrozenSet'),
      f(apply, X16, X20:'Container', X21:'Container'),
      f(rapply, X21:'Container', X3:'Any', X22:'Container'),
      f(fork, mapply, X18, X19, X23:'Callable'),
      f(mapply, X23, X22:'ContainerContainer', X24:'FrozenSet'),
      f(paint, IN:'Grid', X24:'Object', OUT:'Grid')
    ].
solve(e6721834, IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch, condition=X1, vsplit:'Any', hsplit:'Any', X2:'Any'),
      f(X2, IN, 'TWO', X3),
      f(order, X3:'Container', numcolors, X4:'Tuple'),
      f(first, X4:'Container', X5:'Any'),
      f(last, X4:'Container', X6:'Any'),
      f(objects,
        X6:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X7:'Objects'),
      f(merge, X7:'ContainerContainer', X8:'Container'),
      f(mostcolor, X8:'Element', X9:'Integer'),
      f(matcher, first, X9:'Any', X10:'Callable'),
      f(compose, flip, X10, X11:'Callable'),
      f(rbind, sfilter, X11:'Any', X12:'Callable'),
      f(lbind, occurrences, X5:'Any', X13:'Callable'),
      f(compose, X13, X12, X14:'Callable'),
      f(chain, positive, size, X14, X15:'Callable'),
      f(sfilter, X7:'Container', X15, X16:'Container'),
      f(chain, first, X13, X12, X17:'Callable'),
      f(compose, ulcorner, X12, X18:'Callable'),
      f(fork, subtract, X17, X18, X19:'Callable'),
      f(fork, shift, identity, X19, X20:'Callable'),
      f(apply, X20, X16:'Container', X21:'Container'),
      f(compose, decrement, width, X22:'Callable'),
      f(chain, positive, decrement, X22, X23:'Callable'),
      f(mfilter, X21:'Container', X23, X24:'FrozenSet'),
      f(paint, X5:'Grid', X24:'Object', OUT:'Grid')
    ].
solve('447fd412', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', numcolors, X2:'Any'),
      f(normalize, X2:'Patch', X3:'Patch'),
      f(lbind, matcher, first:'Any', X4:'Callable'),
      f(compose, X4, mostcolor, X5:'Callable'),
      f(fork, sfilter, identity, X5, X6:'Callable'),
      f(fork, difference, identity, X6, X7:'Callable'),
      f(lbind, rbind, upscale:'Any', X8:'Callable'),
      f(interval, 'ONE':'Integer', 'FOUR':'Integer', 'ONE':'Integer', X9:'Tuple'),
      f(apply, X8, X9:'Container', X10:'Container'),
      f(lbind, recolor, 'ZERO':'Any', X11:'Callable'),
      f(compose, X11, outbox, X12:'Callable'),
      f(fork, combine, identity, X12, X13:'Callable'),
      f(lbind, occurrences, IN:'Any', X14:'Callable'),
      f(lbind, rbind, subtract:'Any', X15:'Callable'),
      f(lbind, apply, increment:'Any', X16:'Callable'),
      f(lbind, lbind, shift:'Any', X17:'Callable'),
      f(chain, X15, ulcorner, X7, X18:'Callable'),
      f(chain, X14, X13, X7, X19:'Callable'),
      f(fork, apply, X18, X19, X20:'Callable'),
      f(compose, X16, X20, X21:'Callable'),
      f(fork, mapply, X17, X21, X22:'Callable'),
      f(rapply, X10:'Container', X3:'Any', X23:'Container'),
      f(mapply, X22, X23:'ContainerContainer', X24:'FrozenSet'),
      f(paint, IN:'Grid', X24:'Object', OUT:'Grid')
    ].
solve('2bcee788', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(replace, IN:'Grid', X1:'Integer', 'THREE':'Integer', X3:'Grid'),
      f(argmax, X2:'Container', size, X4:'Any'),
      f(argmin, X2:'Container', size, X5:'Any'),
      f(position, X4:'Patch', X5:'Patch', X6:'Point'),
      f(first, X6:'Container', X7:'Any'),
      f(last, X6:'Container', X8:'Any'),
      f(subgrid, X4:'Patch', X3:'Grid', X9:'Grid'),
      f(hline, X5:'Patch', returns=X10),
      f(hmirror, X9:'Piece', X11:'Piece'),
      f(vmirror, X9:'Piece', X12:'Piece'),
      f(branch, condition=X10, X11:'Any', X12:'Any', X13:'Any'),
      f(branch, condition=X10, X7:'Any', 'ZERO':'Any', X14:'Any'),
      f(branch, condition=X10, 'ZERO':'Any', X8:'Any', X15:'Any'),
      f(asobject, X13:'Grid', X16:'Object'),
      f(matcher, first, 'THREE':'Any', X17:'Callable'),
      f(compose, flip, X17, X18:'Callable'),
      f(sfilter, X16:'Container', X18, X19:'Container'),
      f(ulcorner, X4:'Patch', X20:'Point'),
      f(shape, X4:'Piece', X21:'Point'),
      f(astuple, X14:'Integer', X15:'Integer', X22:'Point'),
      f(multiply, X21:'Numerical', X22:'Numerical', X23:'Numerical'),
      f(add, X20:'Numerical', X23:'Numerical', X24:'Numerical'),
      f(shift, X19:'Patch', X24:'Point', X25:'Patch'),
      f(paint, X3:'Grid', X25:'Object', OUT:'Grid')
    ].
solve('776ffc46', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X2:'Objects'),
      f(totuple, X2:'FrozenSet', X3:'Tuple'),
      f(rbind, subgrid, IN:'Any', X4:'Callable'),
      f(apply, X4, X3:'Container', X5:'Container'),
      f(multiply, 'FOUR':'Numerical', 'SIX':'Numerical', X6:'Numerical'),
      f(rbind, ofcolor, 'FIVE':'Any', X7:'Callable'),
      f(compose, size, X7, X8:'Callable'),
      f(matcher, X8, X6:'Any', X9:'Callable'),
      f(extract, X5:'Container', X9, X10:'Any'),
      f(astuple, 'FIVE':'Integer', 'FIVE':'Integer', X11:'Point'),
      f(crop, X10:'Grid', (1, 1):'Point', X11:'Point', X12:'Grid'),
      f(objects,
        X12:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X13:'Objects'),
      f(first, X13:'Container', X14:'Any'),
      f(color, X14:'Object', X15:'Integer'),
      f(normalize, X14:'Patch', X16:'Patch'),
      f(toindices, X16:'Patch', X17:'Indices'),
      f(totuple, X1:'FrozenSet', X18:'Tuple'),
      f(apply, normalize, X18:'Container', X19:'Container'),
      f(apply, toindices, X19:'Container', X20:'Container'),
      f(pair, X18:'Tuple', X20:'Tuple', X21:'TupleTuple'),
      f(matcher, last, X17:'Any', X22:'Callable'),
      f(sfilter, X21:'Container', X22, X23:'Container'),
      f(mapply, first, X23:'ContainerContainer', X24:'FrozenSet'),
      f(recolor, X15:'Integer', X24:'Patch', X25:'Object'),
      f(paint, IN:'Grid', X25:'Object', OUT:'Grid')
    ].
solve(f35d900a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(hmirror, X2:'Piece', X3:'Piece'),
      f(compose, neighbors, last, X4:'Callable'),
      f(fork, recolor, first, X4, X5:'Callable'),
      f(mapply, X5, X3:'ContainerContainer', X6:'FrozenSet'),
      f(paint, IN:'Grid', X6:'Object', X7:'Grid'),
      f(outbox, X2:'Patch', X8:'Indices'),
      f(ulcorner, X8:'Patch', X9:'Point'),
      f(subgrid, X8:'Patch', X7:'Grid', X10:'Grid'),
      f(dneighbors, (0, 0):'Point', X11:'Indices'),
      f(rbind, multiply, 'FOUR':'Any', X12:'Callable'),
      f(apply, double, X11:'Container', X13:'Container'),
      f(apply, X12, X11:'Container', X14:'Container'),
      f(apply, increment, X13:'Container', X15:'Container'),
      f(apply, increment, X14:'Container', X16:'Container'),
      f(combine, X15:'Container', X16:'Container', X17:'Container'),
      f(underfill, X10:'Grid', 'FIVE':'Integer', X17:'Patch', X18:'Grid'),
      f(vmirror, X18:'Piece', X19:'Piece'),
      f(underfill, X19:'Grid', 'FIVE':'Integer', X17:'Patch', X20:'Grid'),
      f(ofcolor, X20:'Grid', 'FIVE':'Integer', X21:'Indices'),
      f(hmirror, X20:'Piece', X22:'Piece'),
      f(underfill, X22:'Grid', 'FIVE':'Integer', X21:'Patch', X23:'Grid'),
      f(ofcolor, X23:'Grid', 'FIVE':'Integer', X24:'Indices'),
      f(shift, X24:'Patch', X9:'Point', X25:'Patch'),
      f(fill, X7:'Grid', 'FIVE':'Integer', X25:'Patch', OUT:'Grid')
    ].
solve('0dfd9992', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(partition, IN:'Grid', X3:'Objects'),
      f(colorfilter, X3:'Objects', 'ZERO':'Integer', X4:'Objects'),
      f(difference, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(astuple, X1:'Integer', 'ONE':'Integer', X7:'Point'),
      f(astuple, 'ONE':'Integer', X2:'Integer', X8:'Point'),
      f(decrement, X1:'Numerical', X9:'Numerical'),
      f(decrement, X2:'Numerical', X10:'Numerical'),
      f(toivec, X10:'Integer', X11:'Point'),
      f(tojvec, X9:'Integer', X12:'Point'),
      f(crop, IN:'Grid', X11:'Point', X8:'Point', X13:'Grid'),
      f(crop, IN:'Grid', X12:'Point', X7:'Point', X14:'Grid'),
      f(asobject, X14:'Grid', X15:'Object'),
      f(asobject, X13:'Grid', X16:'Object'),
      f(vperiod, X15:'Object', X17:'Integer'),
      f(hperiod, X16:'Object', X18:'Integer'),
      f(astuple, X17:'Integer', X18:'Integer', X19:'Point'),
      f(lbind, multiply, X19:'Any', X20:'Callable'),
      f(neighbors, (0, 0):'Point', X21:'Indices'),
      f(mapply, neighbors, X21:'ContainerContainer', X22:'FrozenSet'),
      f(apply, X20, X22:'Container', X23:'Container'),
      f(lbind, shift, X6:'Any', X24:'Callable'),
      f(mapply, X24, X23:'ContainerContainer', X25:'FrozenSet'),
      f(paint, IN:'Grid', X25:'Object', OUT:'Grid')
    ].
solve('29ec7d0e', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(partition, IN:'Grid', X3:'Objects'),
      f(colorfilter, X3:'Objects', 'ZERO':'Integer', X4:'Objects'),
      f(difference, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(astuple, X1:'Integer', 'ONE':'Integer', X7:'Point'),
      f(astuple, 'ONE':'Integer', X2:'Integer', X8:'Point'),
      f(decrement, X1:'Numerical', X9:'Numerical'),
      f(decrement, X2:'Numerical', X10:'Numerical'),
      f(toivec, X10:'Integer', X11:'Point'),
      f(tojvec, X9:'Integer', X12:'Point'),
      f(crop, IN:'Grid', X11:'Point', X8:'Point', X13:'Grid'),
      f(crop, IN:'Grid', X12:'Point', X7:'Point', X14:'Grid'),
      f(asobject, X14:'Grid', X15:'Object'),
      f(asobject, X13:'Grid', X16:'Object'),
      f(vperiod, X15:'Object', X17:'Integer'),
      f(hperiod, X16:'Object', X18:'Integer'),
      f(astuple, X17:'Integer', X18:'Integer', X19:'Point'),
      f(lbind, multiply, X19:'Any', X20:'Callable'),
      f(neighbors, (0, 0):'Point', X21:'Indices'),
      f(mapply, neighbors, X21:'ContainerContainer', X22:'FrozenSet'),
      f(apply, X20, X22:'Container', X23:'Container'),
      f(lbind, shift, X6:'Any', X24:'Callable'),
      f(mapply, X24, X23:'ContainerContainer', X25:'FrozenSet'),
      f(paint, IN:'Grid', X25:'Object', OUT:'Grid')
    ].
solve('36d67576', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', numcolors, X2:'Any'),
      f(astuple, 'TWO':'Integer', 'FOUR':'Integer', X3:'Point'),
      f(rbind, contained, X3:'Any', X4:'Callable'),
      f(compose, X4, first, X5:'Callable'),
      f(rbind, sfilter, X5:'Any', X6:'Callable'),
      f(lbind, rbind, subtract:'Any', X7:'Callable'),
      f(lbind, occurrences, IN:'Any', X8:'Callable'),
      f(lbind, lbind, shift:'Any', X9:'Callable'),
      f(compose, X7, ulcorner, X10:'Callable'),
      f(chain, X10, X6, normalize, X11:'Callable'),
      f(chain, X8, X6, normalize, X12:'Callable'),
      f(fork, apply, X11, X12, X13:'Callable'),
      f(compose, X9, normalize, X14:'Callable'),
      f(fork, mapply, X14, X13, X15:'Callable'),
      f(astuple, cmirror:'Integer', dmirror:'Integer', X16:'Point'),
      f(astuple, hmirror:'Integer', vmirror:'Integer', X17:'Point'),
      f(combine, X16:'Container', X17:'Container', X18:'Container'),
      f(product, X18:'Container', X18:'Container', X19:'FrozenSet'),
      f(fork, compose, first, last, X20:'Callable'),
      f(apply, X20, X19:'Container', X21:'Container'),
      f(totuple, X21:'FrozenSet', X22:'Tuple'),
      f(combine, X18:'Container', X22:'Container', X23:'Container'),
      f(rapply, X23:'Container', X2:'Any', X24:'Container'),
      f(mapply, X15, X24:'ContainerContainer', X25:'FrozenSet'),
      f(paint, IN:'Grid', X25:'Object', OUT:'Grid')
    ].
solve('98cf29f8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(fork, multiply, height, width, X2:'Callable'),
      f(fork, equality, size, X2, X3:'Callable'),
      f(extract, X1:'Container', X3, X4:'Any'),
      f(other, X1:'Container', X4:'Any', X5:'Any'),
      f(toindices, X5:'Patch', X6:'Indices'),
      f(rbind, add, (0, -1):'Any', X7:'Callable'),
      f(rbind, add, (0, 1):'Any', X8:'Callable'),
      f(rbind, add, (-1, 0):'Any', X9:'Callable'),
      f(rbind, add, (1, 0):'Any', X10:'Callable'),
      f(initset, 'ZERO':'Any', X11:'FrozenSet'),
      f(compose, initset, X8, X12:'Callable'),
      f(compose, initset, X10, X13:'Callable'),
      f(fork, insert, X7, X12, X14:'Callable'),
      f(fork, insert, X9, X13, X15:'Callable'),
      f(matcher, palette, X11:'Any', X16:'Callable'),
      f(rbind, toobject, IN:'Any', X17:'Callable'),
      f(chain, X16, X17, X14, X18:'Callable'),
      f(chain, X16, X17, X15, X19:'Callable'),
      f(fork, either, X18, X19, X20:'Callable'),
      f(sfilter, X6:'Container', X20, X21:'Container'),
      f(cover, IN:'Grid', X21:'Patch', X22:'Grid'),
      f(difference, X6:'FrozenSet', X21:'FrozenSet', X23:'FrozenSet'),
      f(gravitate, X23:'Patch', X4:'Patch', X24:'Point'),
      f(toobject, X23:'Patch', X22:'Grid', X25:'Object'),
      f(move, X22:'Grid', X25:'Object', X24:'Point', OUT:'Grid')
    ].
solve('469497ad', IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:'IntegerSet'),
      f(decrement, X1:'Numerical', X2:'Numerical'),
      f(upscale, IN:'Element', X2:'Integer', X3:'Element'),
      f(objects,
        X3:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X4:'Objects'),
      f(argmin, X4:'Container', size, X5:'Any'),
      f(ulcorner, X5:'Patch', X6:'Point'),
      f(llcorner, X5:'Patch', X7:'Point'),
      f(shoot, X6:'Point', (-1, -1):'Point', X8:'Indices'),
      f(shoot, X6:'Point', (1, 1):'Point', X9:'Indices'),
      f(shoot, X7:'Point', (1, -1):'Point', X10:'Indices'),
      f(shoot, X7:'Point', (-1, 1):'Point', X11:'Indices'),
      f(combine, X8:'Container', X9:'Container', X12:'Container'),
      f(combine, X10:'Container', X11:'Container', X13:'Container'),
      f(combine, X12:'Container', X13:'Container', X14:'Container'),
      f(underfill, X3:'Grid', 'TWO':'Integer', X14:'Patch', X15:'Grid'),
      f(objects,
        X15:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X16:'Objects'),
      f(argmax, X16:'Container', lrcorner, X17:'Any'),
      f(urcorner, X17:'Patch', X18:'Point'),
      f(tojvec, 'NEG_TWO':'Integer', X19:'Point'),
      f(add, X18:'Numerical', X19:'Numerical', X20:'Numerical'),
      f(connect, X18:'Point', X20:'Point', X21:'Indices'),
      f(toobject, X21:'Patch', X15:'Grid', X22:'Object'),
      f(shift, X22:'Patch', (-1, 0):'Point', X23:'Patch'),
      f(color, X23:'Object', X24:'Integer'),
      f(equality, X24:'Any', 'SIX':'Any', returns=X25),
      f(branch, condition=X25, X23:'Any', X17:'Any', X26:'Any'),
      f(paint, X15:'Grid', X26:'Object', OUT:'Grid')
    ].
solve('39e1d7f9', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(order, X1:'Container', height, X3:'Tuple'),
      f(last, X3:'Container', X4:'Any'),
      f(remove, X4:'Any', X3:'Container', X5:'Container'),
      f(last, X5:'Container', X6:'Any'),
      f(color, X6:'Object', X7:'Integer'),
      f(colorfilter, X2:'Objects', X7:'Integer', X8:'Objects'),
      f(power, outbox, 'TWO':'Integer', X9:'Callable'),
      f(rbind, toobject, IN:'Any', X10:'Callable'),
      f(chain, numcolors, X10, X9, X11:'Callable'),
      f(argmax, X8:'Container', X11, X12:'Any'),
      f(ulcorner, X12:'Patch', X13:'Point'),
      f(shape, X12:'Piece', X14:'Point'),
      f(subtract, X13:'Numerical', X14:'Numerical', X15:'Numerical'),
      f(decrement, X15:'Numerical', X16:'Numerical'),
      f(multiply, X14:'Numerical', 'THREE':'Numerical', X17:'Numerical'),
      f(add, X17:'Numerical', (2, 2):'Numerical', X18:'Numerical'),
      f(crop, IN:'Grid', X16:'Point', X18:'Point', X19:'Grid'),
      f(asobject, X19:'Grid', X20:'Object'),
      f(apply, ulcorner, X8:'Container', X21:'Container'),
      f(increment, X14:'Numerical', X22:'Numerical'),
      f(rbind, subtract, X22:'Any', X23:'Callable'),
      f(apply, X23, X21:'Container', X24:'Container'),
      f(lbind, shift, X20:'Any', X25:'Callable'),
      f(mapply, X25, X24:'ContainerContainer', X26:'FrozenSet'),
      f(paint, IN:'Grid', X26:'Object', OUT:'Grid')
    ].
solve('484b58aa', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(partition, IN:'Grid', X3:'Objects'),
      f(colorfilter, X3:'Objects', 'ZERO':'Integer', X4:'Objects'),
      f(difference, X3:'FrozenSet', X4:'FrozenSet', X5:'FrozenSet'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(astuple, X1:'Integer', 'TWO':'Integer', X7:'Point'),
      f(astuple, 'TWO':'Integer', X2:'Integer', X8:'Point'),
      f(power, decrement, 'TWO':'Integer', X9:'Callable'),
      f(X9, X1, X10),
      f(X9, X2, X11),
      f(toivec, X11:'Integer', X12:'Point'),
      f(tojvec, X10:'Integer', X13:'Point'),
      f(crop, IN:'Grid', X12:'Point', X8:'Point', X14:'Grid'),
      f(crop, IN:'Grid', X13:'Point', X7:'Point', X15:'Grid'),
      f(asobject, X15:'Grid', X16:'Object'),
      f(asobject, X14:'Grid', X17:'Object'),
      f(vperiod, X16:'Object', X18:'Integer'),
      f(hperiod, X17:'Object', X19:'Integer'),
      f(astuple, X18:'Integer', X19:'Integer', X20:'Point'),
      f(lbind, multiply, X20:'Any', X21:'Callable'),
      f(neighbors, (0, 0):'Point', X22:'Indices'),
      f(mapply, neighbors, X22:'ContainerContainer', X23:'FrozenSet'),
      f(apply, X21, X23:'Container', X24:'Container'),
      f(lbind, shift, X6:'Any', X25:'Callable'),
      f(mapply, X25, X24:'ContainerContainer', X26:'FrozenSet'),
      f(paint, IN:'Grid', X26:'Object', OUT:'Grid')
    ].
solve('3befdf3e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(totuple, X1:'FrozenSet', X2:'Tuple'),
      f(apply, mostcolor, X2:'Container', X3:'Container'),
      f(apply, leastcolor, X2:'Container', X4:'Container'),
      f(apply, width, X2:'Container', X5:'Container'),
      f(rbind, subtract, 'TWO':'Any', X6:'Callable'),
      f(apply, X6, X5:'Container', X7:'Container'),
      f(apply, invert, X7:'Container', X8:'Container'),
      f(papply, recolor, X4:'Tuple', X2:'Tuple', X9:'Tuple'),
      f(apply, toivec, X7:'Container', X10:'Container'),
      f(mpapply, shift, X9:'Tuple', X10:'Tuple', X11:'Tuple'),
      f(paint, IN:'Grid', X11:'Object', X12:'Grid'),
      f(apply, toivec, X8:'Container', X13:'Container'),
      f(mpapply, shift, X9:'Tuple', X13:'Tuple', X14:'Tuple'),
      f(paint, X12:'Grid', X14:'Object', X15:'Grid'),
      f(apply, tojvec, X7:'Container', X16:'Container'),
      f(mpapply, shift, X9:'Tuple', X16:'Tuple', X17:'Tuple'),
      f(paint, X15:'Grid', X17:'Object', X18:'Grid'),
      f(apply, tojvec, X8:'Container', X19:'Container'),
      f(mpapply, shift, X9:'Tuple', X19:'Tuple', X20:'Tuple'),
      f(paint, X18:'Grid', X20:'Object', X21:'Grid'),
      f(merge, X2:'ContainerContainer', X22:'Container'),
      f(paint, X21:'Grid', X22:'Object', X23:'Grid'),
      f(first, X4:'Container', X24:'Any'),
      f(first, X3:'Container', X25:'Any'),
      f(replace,
        X23:'Grid',
        X24:'Integer',
        'NEG_ONE':'Integer',
        X26:'Grid'),
      f(replace,
        X26:'Grid',
        X25:'Integer',
        X24:'Integer',
        X27:'Grid'),
      f(replace,
        X27:'Grid',
        'NEG_ONE':'Integer',
        X25:'Integer',
        OUT:'Grid')
    ].
solve('9aec4887', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'EIGHT':'Integer', X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(other, X1:'Container', X3:'Any', X4:'Any'),
      f(subgrid, X4:'Patch', IN:'Grid', X5:'Grid'),
      f(normalize, X3:'Patch', X6:'Patch'),
      f(shift, X6:'Patch', (1, 1):'Point', X7:'Patch'),
      f(paint, X5:'Grid', X7:'Object', X8:'Grid'),
      f(palette, X8:'Element', X9:'IntegerSet'),
      f(remove, 'ZERO':'Any', X9:'Container', X10:'Container'),
      f(remove, 'EIGHT':'Any', X10:'Container', X11:'Container'),
      f(lbind, ofcolor, X8:'Any', X12:'Callable'),
      f(rbind, remove, X11:'Any', X13:'Callable'),
      f(lbind, mapply, X12:'Any', X14:'Callable'),
      f(lbind, rbind, manhattan:'Any', X15:'Callable'),
      f(chain, X15, X14, X13, X16:'Callable'),
      f(rbind, compose, initset:'Any', X17:'Callable'),
      f(lbind, lbind, manhattan:'Any', X18:'Callable'),
      f(chain, X17, X18, X12, X19:'Callable'),
      f(compose, X17, X16, X20:'Callable'),
      f(lbind, fork, greater:'Any', X21:'Callable'),
      f(fork, X21, X20, X19, X22:'Callable'),
      f(ofcolor, X8:'Grid', 'EIGHT':'Integer', X23:'Indices'),
      f(lbind, sfilter, X23:'Any', X24:'Callable'),
      f(compose, X24, X22, X25:'Callable'),
      f(fork, recolor, identity, X25, X26:'Callable'),
      f(mapply, X26, X11:'ContainerContainer', X27:'FrozenSet'),
      f(paint, X8:'Grid', X27:'Object', OUT:'Grid')
    ].
solve('49d1d64f', IN, OUT) :-
    [ f(upscale, IN:'Element', 'TWO':'Integer', X1:'Element'),
      f(asindices, X1:'Grid', X2:'Indices'),
      f(corners, X2:'Patch', X3:'Indices'),
      f(fill, X1:'Grid', 'ZERO':'Integer', X3:'Patch', X4:'Grid'),
      f(height, X4:'Piece', X5:'Integer'),
      f(width, X4:'Piece', X6:'Integer'),
      f(equality, X5:'Any', 'SIX':'Any', returns=X7),
      f(equality, X6:'Any', 'SIX':'Any', returns=X8),
      f(compose, decrement, halve, X9:'Callable'),
      f(X9, X5, X10),
      f(X9, X6, X11),
      f(astuple, X10:'Integer', X6:'Integer', X12:'Point'),
      f(crop, X4:'Grid', (0, 0):'Point', X12:'Point', X13:'Grid'),
      f(increment, X10:'Numerical', X14:'Numerical'),
      f(toivec, X14:'Integer', X15:'Point'),
      f(astuple, X14:'Integer', X6:'Integer', X16:'Point'),
      f(crop, X4:'Grid', X15:'Point', X16:'Point', X17:'Grid'),
      f(vconcat, X13:'Grid', X17:'Grid', X18:'Grid'),
      f(branch, condition=X7, X18:'Any', X4:'Any', X19:'Any'),
      f(decrement, X5:'Numerical', X20:'Numerical'),
      f(branch, condition=X7, X20:'Any', X5:'Any', X21:'Any'),
      f(astuple, X21:'Integer', X11:'Integer', X22:'Point'),
      f(crop, X19:'Grid', (0, 0):'Point', X22:'Point', X23:'Grid'),
      f(increment, X11:'Numerical', X24:'Numerical'),
      f(tojvec, X24:'Integer', X25:'Point'),
      f(astuple, X21:'Integer', X24:'Integer', X26:'Point'),
      f(crop, X19:'Grid', X25:'Point', X26:'Point', X27:'Grid'),
      f(hconcat, X23:'Grid', X27:'Grid', X28:'Grid'),
      f(branch, condition=X8, X28:'Any', X19:'Any', OUT:'Any')
    ].
solve('57aa92db', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(lbind, lbind, colorcount:'Any', X3:'Callable'),
      f(fork, apply, X3, palette, X4:'Callable'),
      f(compose, maximum, X4, X5:'Callable'),
      f(compose, minimum, X4, X6:'Callable'),
      f(fork, subtract, X5, X6, X7:'Callable'),
      f(argmax, X1:'Container', X7, X8:'Any'),
      f(leastcolor, X8:'Element', X9:'Integer'),
      f(normalize, X8:'Patch', X10:'Patch'),
      f(matcher, first, X9:'Any', X11:'Callable'),
      f(sfilter, X10:'Container', X11, X12:'Container'),
      f(ulcorner, X12:'Patch', X13:'Point'),
      f(colorfilter, X2:'Objects', X9:'Integer', X14:'Objects'),
      f(rbind, toobject, IN:'Any', X15:'Callable'),
      f(lbind, remove, 'ZERO':'Any', X16:'Callable'),
      f(chain, first, X16, palette, X17:'Callable'),
      f(chain, X17, X15, outbox, X18:'Callable'),
      f(lbind, multiply, X13:'Any', X19:'Callable'),
      f(compose, X19, width, X20:'Callable'),
      f(fork, subtract, ulcorner, X20, X21:'Callable'),
      f(lbind, shift, X10:'Any', X22:'Callable'),
      f(compose, X22, X21, X23:'Callable'),
      f(fork, upscale, X23, width, X24:'Callable'),
      f(fork, recolor, X18, X24, X25:'Callable'),
      f(mapply, X25, X14:'ContainerContainer', X26:'FrozenSet'),
      f(paint, IN:'Grid', X26:'Object', X27:'Grid'),
      f(merge, X2:'ContainerContainer', X28:'Container'),
      f(paint, X27:'Grid', X28:'Object', OUT:'Grid')
    ].
solve(aba27056, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(mapply, toindices, X1:'ContainerContainer', X2:'FrozenSet'),
      f(box, X2:'Patch', X3:'Indices'),
      f(difference, X3:'FrozenSet', X2:'FrozenSet', X4:'FrozenSet'),
      f(delta, X2:'Patch', X5:'Indices'),
      f(position, X5:'Patch', X4:'Patch', X6:'Point'),
      f(interval, 'ZERO':'Integer', 'NINE':'Integer', 'ONE':'Integer', X7:'Tuple'),
      f(lbind, multiply, X6:'Any', X8:'Callable'),
      f(apply, X8, X7:'Container', X9:'Container'),
      f(lbind, shift, X4:'Any', X10:'Callable'),
      f(mapply, X10, X9:'ContainerContainer', X11:'FrozenSet'),
      f(fill, IN:'Grid', 'FOUR':'Integer', X5:'Patch', X12:'Grid'),
      f(fill, X12:'Grid', 'FOUR':'Integer', X11:'Patch', X13:'Grid'),
      f(corners, X4:'Patch', X14:'Indices'),
      f(ofcolor, X13:'Grid', 'ZERO':'Integer', X15:'Indices'),
      f(rbind, toobject, X13:'Any', X16:'Callable'),
      f(rbind, colorcount, 'ZERO':'Any', X17:'Callable'),
      f(chain, X17, X16, dneighbors, X18:'Callable'),
      f(matcher, X18, 'TWO':'Any', X19:'Callable'),
      f(rbind, adjacent, X2:'Any', X20:'Callable'),
      f(rbind, adjacent, X11:'Any', X21:'Callable'),
      f(fork, both, X20, X21, X22:'Callable'),
      f(compose, X22, initset, X23:'Callable'),
      f(sfilter, X15:'Container', X19, X24:'Container'),
      f(sfilter, X24:'Container', X23, X25:'Container'),
      f(product, X14:'Container', X25:'Container', X26:'FrozenSet'),
      f(fork, subtract, last, first, X27:'Callable'),
      f(fork, shoot, first, X27, X28:'Callable'),
      f(mapply, X28, X26:'ContainerContainer', X29:'FrozenSet'),
      f(fill, X13:'Grid', 'FOUR':'Integer', X29:'Patch', OUT:'Grid')
    ].
solve(f1cefba8, IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(ofcolor, IN:'Grid', 'ZERO':'Integer', X3:'Indices'),
      f(first, X2:'Container', X4:'Any'),
      f(ulcorner, X4:'Patch', X5:'Point'),
      f(subgrid, X4:'Patch', IN:'Grid', X6:'Grid'),
      f(power, trim, 'TWO':'Integer', X7:'Callable'),
      f(X7, X6, X8),
      f(asindices, X8:'Grid', X9:'Indices'),
      f(shift, X9:'Patch', (2, 2):'Point', X10:'Patch'),
      f(fill, X6:'Grid', 'ZERO':'Integer', X10:'Patch', X11:'Grid'),
      f(leastcolor, X11:'Element', X12:'Integer'),
      f(remove, 'ZERO':'Any', X1:'Container', X13:'Container'),
      f(other, X13:'Container', X12:'Any', X14:'Any'),
      f(ofcolor, X11:'Grid', X12:'Integer', X15:'Indices'),
      f(shift, X15:'Patch', X5:'Point', X16:'Patch'),
      f(ofcolor, IN:'Grid', X12:'Integer', X17:'Indices'),
      f(uppermost, X17:'Patch', X18:'Integer'),
      f(lowermost, X17:'Patch', X19:'Integer'),
      f(matcher, first, X18:'Any', X20:'Callable'),
      f(matcher, first, X19:'Any', X21:'Callable'),
      f(fork, either, X20, X21, X22:'Callable'),
      f(sfilter, X16:'Container', X22, X23:'Container'),
      f(difference,
        X16:'FrozenSet',
        X23:'FrozenSet',
        X24:'FrozenSet'),
      f(mapply, vfrontier, X23:'ContainerContainer', X25:'FrozenSet'),
      f(mapply, hfrontier, X24:'ContainerContainer', X26:'FrozenSet'),
      f(combine, X25:'Container', X26:'Container', X27:'Container'),
      f(intersection,
        X3:'FrozenSet',
        X27:'FrozenSet',
        X28:'FrozenSet'),
      f(fill, IN:'Grid', X14:'Integer', X27:'Patch', X29:'Grid'),
      f(fill, X29:'Grid', X12:'Integer', X28:'Patch', OUT:'Grid')
    ].
solve('1e32b0e9', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(mostcolor, IN:'Element', X2:'Integer'),
      f(asobject, IN:'Grid', X3:'Object'),
      f(subtract, X1:'Numerical', 'TWO':'Numerical', X4:'Numerical'),
      f(divide, X4:'Numerical', 'THREE':'Numerical', X5:'Numerical'),
      f(astuple, X5:'Integer', X5:'Integer', X6:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X6:'Point', X7:'Grid'),
      f(partition, X7:'Grid', X8:'Objects'),
      f(matcher, color, 'ZERO':'Any', X9:'Callable'),
      f(compose, flip, X9, X10:'Callable'),
      f(extract, X8:'Container', X10, X11:'Any'),
      f(initset, X2:'Any', X12:'FrozenSet'),
      f(palette, X3:'Element', X13:'IntegerSet'),
      f(palette, X11:'Element', X14:'IntegerSet'),
      f(difference,
        X13:'FrozenSet',
        X14:'FrozenSet',
        X15:'FrozenSet'),
      f(difference,
        X15:'FrozenSet',
        X12:'FrozenSet',
        X16:'FrozenSet'),
      f(first, X16:'Container', X17:'Any'),
      f(interval, 'ZERO':'Integer', 'THREE':'Integer', 'ONE':'Integer', X18:'Tuple'),
      f(product, X18:'Container', X18:'Container', X19:'FrozenSet'),
      f(totuple, X19:'FrozenSet', X20:'Tuple'),
      f(apply, first, X20:'Container', X21:'Container'),
      f(apply, last, X20:'Container', X22:'Container'),
      f(lbind, multiply, X5:'Any', X23:'Callable'),
      f(apply, X23, X21:'Container', X24:'Container'),
      f(apply, X23, X22:'Container', X25:'Container'),
      f(papply, add, X24:'Tuple', X21:'Tuple', X26:'Tuple'),
      f(papply, add, X25:'Tuple', X22:'Tuple', X27:'Tuple'),
      f(papply, astuple, X26:'Tuple', X27:'Tuple', X28:'Tuple'),
      f(lbind, shift, X11:'Any', X29:'Callable'),
      f(mapply, X29, X28:'ContainerContainer', X30:'FrozenSet'),
      f(underfill,
        IN:'Grid',
        X17:'Integer',
        X30:'Patch',
        OUT:'Grid')
    ].
solve('28e73c20', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(astuple, 'ONE':'Integer', 'TWO':'Integer', X2:'Point'),
      f(astuple, 'TWO':'Integer', 'TWO':'Integer', X3:'Point'),
      f(astuple, 'TWO':'Integer', 'ONE':'Integer', X4:'Point'),
      f(astuple, 'THREE':'Integer', 'ONE':'Integer', X5:'Point'),
      f(canvas, 'THREE':'Integer', (1, 1):'Point', X6:'Grid'),
      f(upscale, X6:'Element', 'FOUR':'Integer', X7:'Element'),
      f(initset, (1, 0):'Any', X8:'FrozenSet'),
      f(insert, (1, 1):'Any', X8:'FrozenSet', X9:'FrozenSet'),
      f(insert, X2:'Any', X9:'FrozenSet', X10:'FrozenSet'),
      f(insert, X3:'Any', X10:'FrozenSet', X11:'FrozenSet'),
      f(fill, X7:'Grid', 'ZERO':'Integer', X11:'Patch', X12:'Grid'),
      f(vupscale, X6:'Grid', 'FIVE':'Integer', X13:'Grid'),
      f(hupscale, X13:'Grid', 'THREE':'Integer', X14:'Grid'),
      f(insert, X4:'Any', X9:'FrozenSet', X15:'FrozenSet'),
      f(insert, X5:'Any', X15:'FrozenSet', X16:'FrozenSet'),
      f(fill, X14:'Grid', 'ZERO':'Integer', X16:'Patch', X17:'Grid'),
      f(even, X1:'Integer', returns=X18),
      f(branch, condition=X18, X12:'Any', X17:'Any', X19:'Any'),
      f(canvas, 'ZERO':'Integer', (1, 1):'Point', X20:'Grid'),
      f(lbind, hupscale, X20:'Any', X21:'Callable'),
      f(chain, X21, decrement, height, X22:'Callable'),
      f(rbind, hconcat, X6:'Any', X23:'Callable'),
      f(compose, X23, X22, X24:'Callable'),
      f(lbind, hupscale, X6:'Any', X25:'Callable'),
      f(compose, X25, height, X26:'Callable'),
      f(fork, vconcat, X24, rot90, X27:'Callable'),
      f(fork, vconcat, X26, X27, X28:'Callable'),
      f(subtract, X1:'Numerical', 'FOUR':'Numerical', X29:'Numerical'),
      f(power, X28, X29:'Integer', X30:'Callable'),
      f(X30, X19, OUT)
    ].
solve('4c5c2cf0', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(first, X2:'Container', X3:'Any'),
      f(rbind, subgrid, IN:'Any', X4:'Callable'),
      f(fork, equality, identity, rot90, X5:'Callable'),
      f(compose, X5, X4, X6:'Callable'),
      f(extract, X1:'Container', X6, X7:'Any'),
      f(center, X7:'Patch', X8:'Point'),
      f(subgrid, X3:'Patch', IN:'Grid', X9:'Grid'),
      f(hmirror, X9:'Piece', X10:'Piece'),
      f(objects,
        X10:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X11:'Objects'),
      f(first, X11:'Container', X12:'Any'),
      f(objects,
        X10:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X13:'Objects'),
      f(extract, X13:'Container', X6, X14:'Any'),
      f(center, X14:'Patch', X15:'Point'),
      f(subtract, X8:'Numerical', X15:'Numerical', X16:'Numerical'),
      f(shift, X12:'Patch', X16:'Point', X17:'Patch'),
      f(paint, IN:'Grid', X17:'Object', X18:'Grid'),
      f(objects,
        X18:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X19:'Objects'),
      f(first, X19:'Container', X20:'Any'),
      f(subgrid, X20:'Patch', X18:'Grid', X21:'Grid'),
      f(vmirror, X21:'Piece', X22:'Piece'),
      f(objects,
        X22:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X23:'Objects'),
      f(first, X23:'Container', X24:'Any'),
      f(objects,
        X22:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X25:'Objects'),
      f(color, X7:'Object', X26:'Integer'),
      f(matcher, color, X26:'Any', X27:'Callable'),
      f(extract, X25:'Container', X27, X28:'Any'),
      f(center, X28:'Patch', X29:'Point'),
      f(subtract, X8:'Numerical', X29:'Numerical', X30:'Numerical'),
      f(shift, X24:'Patch', X30:'Point', X31:'Patch'),
      f(paint, X18:'Grid', X31:'Object', OUT:'Grid')
    ].
solve('508bd3b6', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(argmin, X2:'Container', size, X3:'Any'),
      f(argmax, X2:'Container', size, X4:'Any'),
      f(ulcorner, X3:'Patch', X5:'Point'),
      f(urcorner, X3:'Patch', X6:'Point'),
      f(index, IN:'Grid', X5:'Point', X7:'Integer'),
      f(equality, X7:'Any', 'EIGHT':'Any', returns=X8),
      f(branch, condition=X8, X5:'Any', X6:'Any', X9:'Any'),
      f(branch, condition=X8, (1, 1):'Any', (1, -1):'Any', X10:'Any'),
      f(multiply, X10:'Numerical', X1:'Numerical', X11:'Numerical'),
      f(double, X11:'Numerical', X12:'Numerical'),
      f(add, X9:'Numerical', X12:'Numerical', X13:'Numerical'),
      f(subtract, X9:'Numerical', X12:'Numerical', X14:'Numerical'),
      f(connect, X13:'Point', X14:'Point', X15:'Indices'),
      f(fill, IN:'Grid', 'THREE':'Integer', X15:'Patch', X16:'Grid'),
      f(paint, X16:'Grid', X4:'Object', X17:'Grid'),
      f(objects,
        X17:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X18:'Objects'),
      f(rbind, adjacent, X4:'Any', X19:'Callable'),
      f(extract, X18:'Container', X19, X20:'Any'),
      f(first, X20:'Container', X21:'Any'),
      f(last, X21:'Container', X22:'Any'),
      f(flip, b=X8, returns=X23),
      f(branch, condition=X23, (1, 1):'Any', (1, -1):'Any', X24:'Any'),
      f(multiply, X24:'Numerical', X1:'Numerical', X25:'Numerical'),
      f(double, X25:'Numerical', X26:'Numerical'),
      f(add, X22:'Numerical', X26:'Numerical', X27:'Numerical'),
      f(subtract, X22:'Numerical', X26:'Numerical', X28:'Numerical'),
      f(connect, X27:'Point', X28:'Point', X29:'Indices'),
      f(fill, X17:'Grid', 'THREE':'Integer', X29:'Patch', X30:'Grid'),
      f(paint, X30:'Grid', X3:'Object', X31:'Grid'),
      f(paint, X31:'Grid', X4:'Object', OUT:'Grid')
    ].
solve('6d0160f0', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':'Integer', X1:'Indices'),
      f(first, X1:'Container', X2:'Any'),
      f(first, X2:'Container', X3:'Any'),
      f(last, X2:'Container', X4:'Any'),
      f(greater, X3:'Integer', 'THREE':'Integer', returns=X5),
      f(greater, X3:'Integer', 'SEVEN':'Integer', returns=X6),
      f(greater, X4:'Integer', 'THREE':'Integer', returns=X7),
      f(greater, X4:'Integer', 'SEVEN':'Integer', returns=X8),
      f(branch, condition=X5, 'FOUR':'Any', 'ZERO':'Any', X9:'Any'),
      f(branch, condition=X6, 'EIGHT':'Any', X9:'Any', X10:'Any'),
      f(branch, condition=X7, 'FOUR':'Any', 'ZERO':'Any', X11:'Any'),
      f(branch, condition=X8, 'EIGHT':'Any', X11:'Any', X12:'Any'),
      f(astuple, X10:'Integer', X12:'Integer', X13:'Point'),
      f(initset, 'ZERO':'Any', X14:'FrozenSet'),
      f(insert, 'FOUR':'Any', X14:'FrozenSet', X15:'FrozenSet'),
      f(insert, 'EIGHT':'Any', X15:'FrozenSet', X16:'FrozenSet'),
      f(product, X16:'Container', X16:'Container', X17:'FrozenSet'),
      f(crop, IN:'Grid', (0, 0):'Point', (3, 3):'Point', X18:'Grid'),
      f(asindices, X18:'Grid', X19:'Indices'),
      f(recolor, 'ZERO':'Integer', X19:'Patch', X20:'Object'),
      f(lbind, shift, X20:'Any', X21:'Callable'),
      f(mapply, X21, X17:'ContainerContainer', X22:'FrozenSet'),
      f(paint, IN:'Grid', X22:'Object', X23:'Grid'),
      f(crop, IN:'Grid', X13:'Point', (3, 3):'Point', X24:'Grid'),
      f(replace, X24:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X25:'Grid'),
      f(ofcolor, X25:'Grid', 'FOUR':'Integer', X26:'Indices'),
      f(first, X26:'Container', X27:'Any'),
      f(asindices, X25:'Grid', X28:'Indices'),
      f(toobject, X28:'Patch', X25:'Grid', X29:'Object'),
      f(multiply, X27:'Numerical', 'FOUR':'Numerical', X30:'Numerical'),
      f(shift, X29:'Patch', X30:'Point', X31:'Patch'),
      f(paint, X23:'Grid', X31:'Object', OUT:'Grid')
    ].
solve(f8a8fe49, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(replace, IN:'Grid', 'FIVE':'Integer', 'ZERO':'Integer', X2:'Grid'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X3:'Objects'),
      f(first, X3:'Container', X4:'Any'),
      f(portrait, X4:'Piece', returns=X5),
      f(branch, condition=X5, hsplit:'Any', vsplit:'Any', X6:'Any'),
      f(branch, condition=X5, vmirror:'Any', hmirror:'Any', X7:'Any'),
      f(ofcolor, IN:'Grid', 'TWO':'Integer', X8:'Indices'),
      f(subgrid, X8:'Patch', IN:'Grid', X9:'Grid'),
      f(trim, X9:'Grid', X10:'Grid'),
      f(X7, X10, X11),
      f(X6, X11, 'TWO', X12),
      f(compose, normalize, asobject, X13:'Callable'),
      f(apply, X13, X12:'Container', X14:'Container'),
      f(last, X14:'Container', X15:'Any'),
      f(first, X14:'Container', X16:'Any'),
      f(ulcorner, X8:'Patch', X17:'Point'),
      f(increment, X17:'Numerical', X18:'Numerical'),
      f(shift, X15:'Patch', X18:'Point', X19:'Patch'),
      f(shift, X16:'Patch', X18:'Point', X20:'Patch'),
      f(branch, condition=X5, width:'Any', height:'Any', X21:'Any'),
      f(branch, condition=X5, tojvec:'Any', toivec:'Any', X22:'Any'),
      f(X21, X15, X23),
      f(double, X23:'Numerical', X24:'Numerical'),
      f(compose, X22, increment, X25:'Callable'),
      f(X25, X23, X26),
      f(invert, X26:'Numerical', X27:'Numerical'),
      f(X25, X24, X28),
      f(shift, X19:'Patch', X27:'Point', X29:'Patch'),
      f(shift, X20:'Patch', X28:'Point', X30:'Patch'),
      f(paint, X2:'Grid', X29:'Object', X31:'Grid'),
      f(paint, X31:'Grid', X30:'Object', OUT:'Grid')
    ].
solve(d07ae81c, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:'Objects'),
      f(sizefilter, X1:'Container', 'ONE':'Integer', X2:'FrozenSet'),
      f(apply, color, X2:'Container', X3:'Container'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X4:'FrozenSet'),
      f(apply, color, X4:'Container', X5:'Container'),
      f(first, X5:'Container', X6:'Any'),
      f(last, X5:'Container', X7:'Any'),
      f(ofcolor, IN:'Grid', X6:'Integer', X8:'Indices'),
      f(ofcolor, IN:'Grid', X7:'Integer', X9:'Indices'),
      f(rbind, shoot, (1, 1):'Any', X10:'Callable'),
      f(rbind, shoot, (-1, -1):'Any', X11:'Callable'),
      f(rbind, shoot, (1, -1):'Any', X12:'Callable'),
      f(rbind, shoot, (-1, 1):'Any', X13:'Callable'),
      f(fork, combine, X10, X11, X14:'Callable'),
      f(fork, combine, X12, X13, X15:'Callable'),
      f(fork, combine, X14, X15, X16:'Callable'),
      f(compose, X16, center, X17:'Callable'),
      f(mapply, X17, X2:'ContainerContainer', X18:'FrozenSet'),
      f(intersection,
        X8:'FrozenSet',
        X18:'FrozenSet',
        X19:'FrozenSet'),
      f(intersection,
        X9:'FrozenSet',
        X18:'FrozenSet',
        X20:'FrozenSet'),
      f(first, X2:'Container', X21:'Any'),
      f(color, X21:'Object', X22:'Integer'),
      f(center, X21:'Patch', X23:'Point'),
      f(neighbors, X23:'Point', X24:'Indices'),
      f(toobject, X24:'Patch', IN:'Grid', X25:'Object'),
      f(mostcolor, X25:'Element', X26:'Integer'),
      f(other, X3:'Container', X22:'Any', X27:'Any'),
      f(equality, X26:'Any', X6:'Any', returns=X28),
      f(branch, condition=X28, X22:'Any', X27:'Any', X29:'Any'),
      f(branch, condition=X28, X27:'Any', X22:'Any', X30:'Any'),
      f(fill, IN:'Grid', X29:'Integer', X19:'Patch', X31:'Grid'),
      f(fill, X31:'Grid', X30:'Integer', X20:'Patch', OUT:'Grid')
    ].
solve('6a1e5592', IN, OUT) :-
    [ f(width, IN:'Piece', X1:'Integer'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(astuple, 'FIVE':'Integer', X1:'Integer', X3:'Point'),
      f(crop, IN:'Grid', (0, 0):'Point', X3:'Point', X4:'Grid'),
      f(colorfilter, X2:'Objects', 'FIVE':'Integer', X5:'Objects'),
      f(merge, X5:'ContainerContainer', X6:'Container'),
      f(cover, IN:'Grid', X6:'Patch', X7:'Grid'),
      f(compose, toindices, normalize, X8:'Callable'),
      f(apply, X8, X5:'Container', X9:'Container'),
      f(asindices, X4:'Grid', X10:'Indices'),
      f(ofcolor, X4:'Grid', 'ZERO':'Integer', X11:'Indices'),
      f(ofcolor, X4:'Grid', 'TWO':'Integer', X12:'Indices'),
      f(rbind, multiply, 'TEN':'Any', X13:'Callable'),
      f(rbind, multiply, 'EIGHT':'Any', X14:'Callable'),
      f(rbind, intersection, X12:'Any', X15:'Callable'),
      f(rbind, intersection, X11:'Any', X16:'Callable'),
      f(rbind, intersection, X10:'Any', X17:'Callable'),
      f(chain, X13, size, X15, X18:'Callable'),
      f(chain, size, X16, delta, X19:'Callable'),
      f(compose, X14, uppermost, X20:'Callable'),
      f(chain, size, X16, outbox, X21:'Callable'),
      f(chain, X13, size, X17, X22:'Callable'),
      f(compose, invert, X18, X23:'Callable'),
      f(fork, add, X22, X23, X24:'Callable'),
      f(fork, subtract, X24, X21, X25:'Callable'),
      f(fork, subtract, X25, X20, X26:'Callable'),
      f(fork, subtract, X26, X19, X27:'Callable'),
      f(rbind, apply, X10:'Any', X28:'Callable'),
      f(lbind, lbind, shift:'Any', X29:'Callable'),
      f(rbind, argmax, X27:'Any', X30:'Callable'),
      f(chain, X30, X28, X29, X31:'Callable'),
      f(mapply, X31, X9:'ContainerContainer', X32:'FrozenSet'),
      f(fill, X7:'Grid', 'ONE':'Integer', X32:'Patch', OUT:'Grid')
    ].
solve('0e206a2e', IN, OUT) :-
    [ f(palette, IN:'Element', X1:'IntegerSet'),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(rbind, greater, 'ONE':'Any', X3:'Callable'),
      f(compose, X3, numcolors, X4:'Callable'),
      f(sfilter, X2:'Container', X4, X5:'Container'),
      f(remove, 'ZERO':'Any', X1:'Container', X6:'Container'),
      f(lbind, colorcount, IN:'Any', X7:'Callable'),
      f(argmax, X6:'Container', X7, X8:'Any'),
      f(remove, X8:'Any', X6:'Container', X9:'Container'),
      f(rbind, contained, X9:'Any', X10:'Callable'),
      f(compose, X10, first, X11:'Callable'),
      f(rbind, sfilter, X11:'Any', X12:'Callable'),
      f(lbind, rbind, subtract:'Any', X13:'Callable'),
      f(lbind, occurrences, IN:'Any', X14:'Callable'),
      f(lbind, lbind, shift:'Any', X15:'Callable'),
      f(compose, X13, ulcorner, X16:'Callable'),
      f(chain, X16, X12, normalize, X17:'Callable'),
      f(chain, X14, X12, normalize, X18:'Callable'),
      f(fork, apply, X17, X18, X19:'Callable'),
      f(compose, X15, normalize, X20:'Callable'),
      f(fork, mapply, X20, X19, X21:'Callable'),
      f(astuple, cmirror:'Integer', dmirror:'Integer', X22:'Point'),
      f(astuple, hmirror:'Integer', vmirror:'Integer', X23:'Point'),
      f(combine, X22:'Container', X23:'Container', X24:'Container'),
      f(product, X24:'Container', X24:'Container', X25:'FrozenSet'),
      f(fork, compose, first, last, X26:'Callable'),
      f(apply, X26, X25:'Container', X27:'Container'),
      f(totuple, X27:'FrozenSet', X28:'Tuple'),
      f(combine, X24:'Container', X28:'Container', X29:'Container'),
      f(lbind, rapply, X29:'Any', X30:'Callable'),
      f(mapply, X30, X5:'ContainerContainer', X31:'FrozenSet'),
      f(mapply, X21, X31:'ContainerContainer', X32:'FrozenSet'),
      f(paint, IN:'Grid', X32:'Object', X33:'Grid'),
      f(merge, X5:'ContainerContainer', X34:'Container'),
      f(cover, X33:'Grid', X34:'Patch', OUT:'Grid')
    ].
solve(d22278a0, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:'Objects'),
      f(fork, multiply, sign, identity, X3:'Callable'),
      f(lbind, apply, X3:'Any', X4:'Callable'),
      f(chain, even, maximum, X4, X5:'Callable'),
      f(lbind, sfilter, X1:'Any', X6:'Callable'),
      f(fork, add, first, last, X7:'Callable'),
      f(rbind, remove, X2:'Any', X8:'Callable'),
      f(compose, center, last, X9:'Callable'),
      f(fork, subtract, first, X9, X10:'Callable'),
      f(compose, X5, X10, X11:'Callable'),
      f(lbind, rbind, equality:'Any', X12:'Callable'),
      f(lbind, argmin, X2:'Any', X13:'Callable'),
      f(chain, X7, X4, X10, X14:'Callable'),
      f(lbind, lbind, astuple:'Any', X15:'Callable'),
      f(lbind, rbind, astuple:'Any', X16:'Callable'),
      f(lbind, compose, X11:'Any', X17:'Callable'),
      f(lbind, compose, X14:'Any', X18:'Callable'),
      f(compose, X18, X15, X19:'Callable'),
      f(compose, X18, X16, X20:'Callable'),
      f(compose, X13, X19, X21:'Callable'),
      f(rbind, compose, X21:'Any', X22:'Callable'),
      f(lbind, lbind, valmin:'Any', X23:'Callable'),
      f(rbind, compose, X19:'Any', X24:'Callable'),
      f(chain, X24, X23, X8, X25:'Callable'),
      f(lbind, fork, greater:'Any', X26:'Callable'),
      f(fork, X26, X25, X20, X27:'Callable'),
      f(chain, X6, X17, X16, X28:'Callable'),
      f(chain, X6, X22, X12, X29:'Callable'),
      f(fork, intersection, X28, X29, X30:'Callable'),
      f(compose, X6, X27, X31:'Callable'),
      f(fork, intersection, X30, X31, X32:'Callable'),
      f(fork, recolor, color, X32, X33:'Callable'),
      f(mapply, X33, X2:'ContainerContainer', X34:'FrozenSet'),
      f(paint, IN:'Grid', X34:'Object', OUT:'Grid')
    ].
solve('4290ef0e', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:'Integer'),
      f(fgpartition, IN:'Grid', X2:'Objects'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:'Objects'),
      f(rbind, valmax, width:'Any', X4:'Callable'),
      f(lbind, colorfilter, X3:'Any', X5:'Callable'),
      f(chain, X4, X5, color, X6:'Callable'),
      f(compose, maximum, shape, X7:'Callable'),
      f(fork, add, X7, X6, X8:'Callable'),
      f(compose, invert, X8, X9:'Callable'),
      f(order, X2:'Container', X9, X10:'Tuple'),
      f(rbind, argmin, centerofmass:'Any', X11:'Callable'),
      f(compose, initset, vmirror, X12:'Callable'),
      f(fork, insert, dmirror, X12, X13:'Callable'),
      f(fork, insert, cmirror, X13, X14:'Callable'),
      f(fork, insert, hmirror, X14, X15:'Callable'),
      f(compose, X11, X15, X16:'Callable'),
      f(apply, X16, X10:'Container', X17:'Container'),
      f(size, X2:'Container', X18:'Integer'),
      f(apply, size, X2:'Container', X19:'Container'),
      f(contained, 'ONE':'Any', X19:'Container', returns=X20),
      f(increment, X18:'Numerical', X21:'Numerical'),
      f(branch, condition=X20, X18:'Any', X21:'Any', X22:'Any'),
      f(double, X22:'Numerical', X23:'Numerical'),
      f(decrement, X23:'Numerical', X24:'Numerical'),
      f(apply, normalize, X17:'Container', X25:'Container'),
      f(interval, 'ZERO':'Integer', X22:'Integer', 'ONE':'Integer', X26:'Tuple'),
      f(pair, X26:'Tuple', X26:'Tuple', X27:'TupleTuple'),
      f(mpapply, shift, X25:'Tuple', X27:'Tuple', X28:'Tuple'),
      f(astuple, X24:'Integer', X24:'Integer', X29:'Point'),
      f(canvas, X1:'Integer', X29:'Point', X30:'Grid'),
      f(paint, X30:'Grid', X28:'Object', X31:'Grid'),
      f(rot90, X31:'Grid', X32:'Grid'),
      f(paint, X32:'Grid', X28:'Object', X33:'Grid'),
      f(rot90, X33:'Grid', X34:'Grid'),
      f(paint, X34:'Grid', X28:'Object', X35:'Grid'),
      f(rot90, X35:'Grid', X36:'Grid'),
      f(paint, X36:'Grid', X28:'Object', OUT:'Grid')
    ].
solve(50846271, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(prapply, connect, X1, X1, X2),
      f(lbind, greater, 'SIX':'Any', X3:'Callable'),
      f(compose, X3, size, X4:'Callable'),
      f(fork, either, vline, hline, X5:'Callable'),
      f(fork, both, X4, X5, X6:'Callable'),
      f(mfilter, X2:'Container', X6, X7:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X7:'Patch', X8:'Grid'),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X9:'Objects'),
      f(colorfilter, X9:'Objects', 'TWO':'Integer', X10:'Objects'),
      f(valmax, X10:'Container', width, X11:'Integer'),
      f(halve, X11:'Numerical', X12:'Numerical'),
      f(toivec, X12:'Integer', X13:'Point'),
      f(tojvec, X12:'Integer', X14:'Point'),
      f(rbind, add, (0, 2):'Any', X15:'Callable'),
      f(rbind, add, (2, 0):'Any', X16:'Callable'),
      f(rbind, subtract, (0, 2):'Any', X17:'Callable'),
      f(rbind, subtract, (2, 0):'Any', X18:'Callable'),
      f(rbind, colorcount, 'TWO':'Any', X19:'Callable'),
      f(rbind, toobject, X8:'Any', X20:'Callable'),
      f(compose, initset, X15, X21:'Callable'),
      f(fork, insert, X16, X21, X22:'Callable'),
      f(fork, insert, X17, X22, X23:'Callable'),
      f(fork, insert, X18, X23, X24:'Callable'),
      f(fork, combine, dneighbors, X24, X25:'Callable'),
      f(chain, X19, X20, X25, X26:'Callable'),
      f(rbind, argmax, X26:'Any', X27:'Callable'),
      f(compose, X27, toindices, X28:'Callable'),
      f(apply, X28, X10:'Container', X29:'Container'),
      f(rbind, add, X13:'Any', X30:'Callable'),
      f(rbind, subtract, X13:'Any', X31:'Callable'),
      f(rbind, add, X14:'Any', X32:'Callable'),
      f(rbind, subtract, X14:'Any', X33:'Callable'),
      f(fork, connect, X30, X31, X34:'Callable'),
      f(fork, connect, X32, X33, X35:'Callable'),
      f(fork, combine, X34, X35, X36:'Callable'),
      f(mapply, X36, X29:'ContainerContainer', X37:'FrozenSet'),
      f(fill, X8:'Grid', 'EIGHT':'Integer', X37:'Patch', X38:'Grid'),
      f(fill, X38:'Grid', 'TWO':'Integer', X1:'Patch', OUT:'Grid')
    ].
solve(b527c5c6, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(matcher, first, 'TWO':'Any', X2:'Callable'),
      f(rbind, sfilter, X2:'Any', X3:'Callable'),
      f(compose, lowermost, X3, X4:'Callable'),
      f(compose, rightmost, X3, X5:'Callable'),
      f(compose, uppermost, X3, X6:'Callable'),
      f(compose, leftmost, X3, X7:'Callable'),
      f(fork, equality, X4, lowermost, X8:'Callable'),
      f(fork, equality, X5, rightmost, X9:'Callable'),
      f(fork, equality, X6, uppermost, X10:'Callable'),
      f(fork, equality, X7, leftmost, X11:'Callable'),
      f(compose, invert, X10, X12:'Callable'),
      f(compose, invert, X11, X13:'Callable'),
      f(fork, add, X12, X8, X14:'Callable'),
      f(fork, add, X13, X9, X15:'Callable'),
      f(fork, astuple, X14, X15, X16:'Callable'),
      f(compose, center, X3, X17:'Callable'),
      f(fork, shoot, X17, X16, X18:'Callable'),
      f(mapply, X18, X1:'ContainerContainer', X19:'FrozenSet'),
      f(fill, IN:'Grid', 'TWO':'Integer', X19:'Patch', X20:'Grid'),
      f(compose, vline, X18, X21:'Callable'),
      f(sfilter, X1:'Container', X21, X22:'Container'),
      f(difference, X1:'FrozenSet', X22:'FrozenSet', X23:'FrozenSet'),
      f(chain, decrement, minimum, shape, X24:'Callable'),
      f(compose, increment, X24, X25:'Callable'),
      f(compose, invert, X24, X26:'Callable'),
      f(rbind, interval, 'ONE':'Any', X27:'Callable'),
      f(fork, X27, X26, X25, X28:'Callable'),
      f(lbind, apply, toivec:'Any', X29:'Callable'),
      f(lbind, apply, tojvec:'Any', X30:'Callable'),
      f(lbind, lbind, shift:'Any', X31:'Callable'),
      f(compose, X31, X18, X32:'Callable'),
      f(compose, X29, X28, X33:'Callable'),
      f(compose, X30, X28, X34:'Callable'),
      f(fork, mapply, X32, X33, X35:'Callable'),
      f(fork, mapply, X32, X34, X36:'Callable'),
      f(mapply, X35, X23:'ContainerContainer', X37:'FrozenSet'),
      f(mapply, X36, X22:'ContainerContainer', X38:'FrozenSet'),
      f(combine, X37:'Container', X38:'Container', X39:'Container'),
      f(underfill, X20:'Grid', 'THREE':'Integer', X39:'Patch', OUT:'Grid')
    ].
solve('150deff5', IN, OUT) :-
    [ f(canvas, 'FIVE':'Integer', (2, 2):'Point', X1:'Grid'),
      f(asobject, X1:'Grid', X2:'Object'),
      f(occurrences, IN:'Grid', X2:'Object', X3:'Indices'),
      f(lbind, shift, X2:'Any', X4:'Callable'),
      f(mapply, X4, X3:'ContainerContainer', X5:'FrozenSet'),
      f(fill, IN:'Grid', 'EIGHT':'Integer', X5:'Patch', X6:'Grid'),
      f(canvas, 'FIVE':'Integer', (1, 1):'Point', X7:'Grid'),
      f(astuple, 'TWO':'Integer', 'ONE':'Integer', X8:'Point'),
      f(canvas, 'EIGHT':'Integer', X8:'Point', X9:'Grid'),
      f(vconcat, X9:'Grid', X7:'Grid', X10:'Grid'),
      f(asobject, X10:'Grid', X11:'Object'),
      f(occurrences, X6:'Grid', X11:'Object', X12:'Indices'),
      f(lbind, shift, X11:'Any', X13:'Callable'),
      f(mapply, X13, X12:'ContainerContainer', X14:'FrozenSet'),
      f(fill, X6:'Grid', 'TWO':'Integer', X14:'Patch', X15:'Grid'),
      f(astuple, 'ONE':'Integer', 'THREE':'Integer', X16:'Point'),
      f(canvas, 'FIVE':'Integer', X16:'Point', X17:'Grid'),
      f(asobject, X17:'Grid', X18:'Object'),
      f(occurrences, X15:'Grid', X18:'Object', X19:'Indices'),
      f(lbind, shift, X18:'Any', X20:'Callable'),
      f(mapply, X20, X19:'ContainerContainer', X21:'FrozenSet'),
      f(fill, X15:'Grid', 'TWO':'Integer', X21:'Patch', X22:'Grid'),
      f(hmirror, X10:'Piece', X23:'Piece'),
      f(asobject, X23:'Grid', X24:'Object'),
      f(occurrences, X22:'Grid', X24:'Object', X25:'Indices'),
      f(lbind, shift, X24:'Any', X26:'Callable'),
      f(mapply, X26, X25:'ContainerContainer', X27:'FrozenSet'),
      f(fill, X22:'Grid', 'TWO':'Integer', X27:'Patch', X28:'Grid'),
      f(dmirror, X10:'Piece', X29:'Piece'),
      f(asobject, X29:'Grid', X30:'Object'),
      f(occurrences, X28:'Grid', X30:'Object', X31:'Indices'),
      f(lbind, shift, X30:'Any', X32:'Callable'),
      f(mapply, X32, X31:'ContainerContainer', X33:'FrozenSet'),
      f(fill, X28:'Grid', 'TWO':'Integer', X33:'Patch', X34:'Grid'),
      f(vmirror, X29:'Piece', X35:'Piece'),
      f(asobject, X35:'Grid', X36:'Object'),
      f(occurrences, X34:'Grid', X36:'Object', X37:'Indices'),
      f(lbind, shift, X36:'Any', X38:'Callable'),
      f(mapply, X38, X37:'ContainerContainer', X39:'FrozenSet'),
      f(fill, X34:'Grid', 'TWO':'Integer', X39:'Patch', OUT:'Grid')
    ].
solve(b7249182, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(merge, X1:'ContainerContainer', X2:'Container'),
      f(portrait, X2:'Piece', returns=X3),
      f(branch, condition=X3, identity:'Any', dmirror:'Any', X4:'Any'),
      f(X4, IN, X5),
      f(objects,
        X5:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X6:'Objects'),
      f(order, X6:'Container', uppermost, X7:'Tuple'),
      f(first, X7:'Container', X8:'Any'),
      f(last, X7:'Container', X9:'Any'),
      f(color, X8:'Object', X10:'Integer'),
      f(color, X9:'Object', X11:'Integer'),
      f(compose, first, toindices, X12:'Callable'),
      f(X12, X8, X13),
      f(X12, X9, X14),
      f(connect, X13:'Point', X14:'Point', X15:'Indices'),
      f(centerofmass, X15:'Patch', X16:'Point'),
      f(connect, X13:'Point', X16:'Point', X17:'Indices'),
      f(fill, X5:'Grid', X11:'Integer', X15:'Patch', X18:'Grid'),
      f(fill, X18:'Grid', X10:'Integer', X17:'Patch', X19:'Grid'),
      f(add, X16:'Numerical', (1, 0):'Numerical', X20:'Numerical'),
      f(initset, X16:'Any', X21:'FrozenSet'),
      f(insert, X20:'Any', X21:'FrozenSet', X22:'FrozenSet'),
      f(toobject, X22:'Patch', X19:'Grid', X23:'Object'),
      f(astuple, 'ZERO':'Integer', 'NEG_TWO':'Integer', X24:'Point'),
      f(shift, X23:'Patch', (0, 2):'Point', X25:'Patch'),
      f(shift, X23:'Patch', X24:'Point', X26:'Patch'),
      f(combine, X25:'Container', X26:'Container', X27:'Container'),
      f(ulcorner, X27:'Patch', X28:'Point'),
      f(urcorner, X27:'Patch', X29:'Point'),
      f(connect, X28:'Point', X29:'Point', X30:'Indices'),
      f(shift, X30:'Patch', (-1, 0):'Point', X31:'Patch'),
      f(llcorner, X27:'Patch', X32:'Point'),
      f(lrcorner, X27:'Patch', X33:'Point'),
      f(connect, X32:'Point', X33:'Point', X34:'Indices'),
      f(shift, X34:'Patch', (1, 0):'Point', X35:'Patch'),
      f(paint, X19:'Grid', X27:'Object', X36:'Grid'),
      f(fill, X36:'Grid', X10:'Integer', X31:'Patch', X37:'Grid'),
      f(fill, X37:'Grid', X11:'Integer', X35:'Patch', X38:'Grid'),
      f(cover, X38:'Grid', X22:'Patch', X39:'Grid'),
      f(X4, X39, OUT)
    ].
solve('9d9215db', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:'Grid'),
      f(rot180, IN:'Grid', X2:'Grid'),
      f(rot270, IN:'Grid', X3:'Grid'),
      f(initset, IN:'Any', X4:'FrozenSet'),
      f(chain, numcolors, lefthalf, tophalf, X5:'Callable'),
      f(insert, X1:'Any', X4:'FrozenSet', X6:'FrozenSet'),
      f(insert, X2:'Any', X6:'FrozenSet', X7:'FrozenSet'),
      f(insert, X3:'Any', X7:'FrozenSet', X8:'FrozenSet'),
      f(argmax, X8:'Container', X5, X9:'Any'),
      f(vmirror, X9:'Piece', X10:'Piece'),
      f(papply, pair, X9:'Tuple', X10:'Tuple', X11:'Tuple'),
      f(lbind, apply, maximum:'Any', X12:'Callable'),
      f(apply, X12, X11:'Container', X13:'Container'),
      f(partition, X13:'Grid', X14:'Objects'),
      f(sizefilter, X14:'Container', 'FOUR':'Integer', X15:'FrozenSet'),
      f(apply, llcorner, X15:'Container', X16:'Container'),
      f(apply, lrcorner, X15:'Container', X17:'Container'),
      f(combine, X16:'Container', X17:'Container', X18:'Container'),
      f(cover, X13:'Grid', X18:'Patch', X19:'Grid'),
      f(tojvec, 'NEG_TWO':'Integer', X20:'Point'),
      f(rbind, add, (0, 2):'Any', X21:'Callable'),
      f(rbind, add, X20:'Any', X22:'Callable'),
      f(compose, X21, ulcorner, X23:'Callable'),
      f(compose, X22, urcorner, X24:'Callable'),
      f(fork, connect, X23, X24, X25:'Callable'),
      f(compose, even, last, X26:'Callable'),
      f(rbind, sfilter, X26:'Any', X27:'Callable'),
      f(chain, normalize, X27, X25, X28:'Callable'),
      f(fork, shift, X28, X23, X29:'Callable'),
      f(fork, recolor, color, X29, X30:'Callable'),
      f(mapply, X30, X15:'ContainerContainer', X31:'FrozenSet'),
      f(paint, X19:'Grid', X31:'Object', X32:'Grid'),
      f(rot90, X32:'Grid', X33:'Grid'),
      f(rot180, X32:'Grid', X34:'Grid'),
      f(rot270, X32:'Grid', X35:'Grid'),
      f(papply, pair, X32:'Tuple', X33:'Tuple', X36:'Tuple'),
      f(apply, X12, X36:'Container', X37:'Container'),
      f(papply, pair, X37:'Tuple', X34:'Tuple', X38:'Tuple'),
      f(apply, X12, X38:'Container', X39:'Container'),
      f(papply, pair, X39:'Tuple', X35:'Tuple', X40:'Tuple'),
      f(apply, X12, X40:'Container', OUT:'Container')
    ].
solve('6855a6e4', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:'Objects'),
      f(rot90, IN:'Grid', X2:'Grid'),
      f(colorfilter, X1:'Objects', 'TWO':'Integer', X3:'Objects'),
      f(first, X3:'Container', X4:'Any'),
      f(portrait, X4:'Piece', returns=X5),
      f(branch, condition=X5, IN:'Any', X2:'Any', X6:'Any'),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X7:'Objects'),
      f(colorfilter, X7:'Objects', 'FIVE':'Integer', X8:'Objects'),
      f(apply, center, X8:'Container', X9:'Container'),
      f(valmin, X9:'Container', first, X10:'Integer'),
      f(compose, first, center, X11:'Callable'),
      f(matcher, X11, X10:'Any', X12:'Callable'),
      f(compose, flip, X12, X13:'Callable'),
      f(extract, X8:'Container', X12, X14:'Any'),
      f(extract, X8:'Container', X13, X15:'Any'),
      f(ulcorner, X14:'Patch', X16:'Point'),
      f(ulcorner, X15:'Patch', X17:'Point'),
      f(subgrid, X14:'Patch', X6:'Grid', X18:'Grid'),
      f(subgrid, X15:'Patch', X6:'Grid', X19:'Grid'),
      f(hmirror, X18:'Piece', X20:'Piece'),
      f(hmirror, X19:'Piece', X21:'Piece'),
      f(ofcolor, X20:'Grid', 'FIVE':'Integer', X22:'Indices'),
      f(recolor, 'FIVE':'Integer', X22:'Patch', X23:'Object'),
      f(ofcolor, X21:'Grid', 'FIVE':'Integer', X24:'Indices'),
      f(recolor, 'FIVE':'Integer', X24:'Patch', X25:'Object'),
      f(height, X23:'Piece', X26:'Integer'),
      f(height, X25:'Piece', X27:'Integer'),
      f(add, 'THREE':'Numerical', X26:'Numerical', X28:'Numerical'),
      f(add, 'THREE':'Numerical', X27:'Numerical', X29:'Numerical'),
      f(toivec, X28:'Integer', X30:'Point'),
      f(toivec, X29:'Integer', X31:'Point'),
      f(add, X16:'Numerical', X30:'Numerical', X32:'Numerical'),
      f(subtract, X17:'Numerical', X31:'Numerical', X33:'Numerical'),
      f(shift, X23:'Patch', X32:'Point', X34:'Patch'),
      f(shift, X25:'Patch', X33:'Point', X35:'Patch'),
      f(merge, X8:'ContainerContainer', X36:'Container'),
      f(cover, X6:'Grid', X36:'Patch', X37:'Grid'),
      f(paint, X37:'Grid', X34:'Object', X38:'Grid'),
      f(paint, X38:'Grid', X35:'Object', X39:'Grid'),
      f(rot270, X39:'Grid', X40:'Grid'),
      f(branch, condition=X5, X39:'Any', X40:'Any', OUT:'Any')
    ].
solve('264363fd', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(argmin, X1:'Container', size, X2:'Any'),
      f(normalize, X2:'Patch', X3:'Patch'),
      f(height, X2:'Piece', X4:'Integer'),
      f(width, X2:'Piece', X5:'Integer'),
      f(equality, X4:'Any', 'FIVE':'Any', returns=X6),
      f(equality, X5:'Any', 'FIVE':'Any', returns=X7),
      f(astuple, X6:'Integer', X7:'Integer', X8:'Point'),
      f(add, (1, 1):'Numerical', X8:'Numerical', X9:'Numerical'),
      f(invert, X9:'Numerical', X10:'Numerical'),
      f(center, X2:'Patch', X11:'Point'),
      f(index, IN:'Grid', X11:'Point', X12:'Integer'),
      f(branch, condition=X6, (-1, 0):'Any', (0, 1):'Any', X13:'Any'),
      f(add, X13:'Numerical', X11:'Numerical', X14:'Numerical'),
      f(index, IN:'Grid', X14:'Point', X15:'Integer'),
      f(astuple, X12:'Integer', (0, 0):'Integer', X16:'Point'),
      f(initset, X16:'Any', X17:'FrozenSet'),
      f(cover, IN:'Grid', X2:'Patch', X18:'Grid'),
      f(mostcolor, X18:'Element', X19:'Integer'),
      f(ofcolor, X18:'Grid', X19:'Integer', X20:'Indices'),
      f(occurrences, X18:'Grid', X17:'Object', X21:'Indices'),
      f(objects,
        X18:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X22:'Objects'),
      f(rbind, occurrences, X17:'Any', X23:'Callable'),
      f(rbind, subgrid, X18:'Any', X24:'Callable'),
      f(compose, X23, X24, X25:'Callable'),
      f(lbind, mapply, vfrontier:'Any', X26:'Callable'),
      f(lbind, mapply, hfrontier:'Any', X27:'Callable'),
      f(compose, X26, X25, X28:'Callable'),
      f(compose, X27, X25, X29:'Callable'),
      f(branch, condition=X6, X28:'Any', X29:'Any', X30:'Any'),
      f(branch, condition=X7, X29:'Any', X28:'Any', X31:'Any'),
      f(fork, combine, X30, X31, X32:'Callable'),
      f(lbind, recolor, X15:'Any', X33:'Callable'),
      f(compose, X33, X32, X34:'Callable'),
      f(fork, paint, X24, X34, X35:'Callable'),
      f(compose, asobject, X35, X36:'Callable'),
      f(fork, shift, X36, ulcorner, X37:'Callable'),
      f(mapply, X37, X22:'ContainerContainer', X38:'FrozenSet'),
      f(paint, X18:'Grid', X38:'Object', X39:'Grid'),
      f(shift, X3:'Patch', X10:'Point', X40:'Patch'),
      f(lbind, shift, X40:'Any', X41:'Callable'),
      f(mapply, X41, X21:'ContainerContainer', X42:'FrozenSet'),
      f(paint, X39:'Grid', X42:'Object', X43:'Grid'),
      f(fill, X43:'Grid', X19:'Integer', X20:'Patch', OUT:'Grid')
    ].
solve('7df24a62', IN, OUT) :-
    [ f(height, IN:'Piece', X1:'Integer'),
      f(width, IN:'Piece', X2:'Integer'),
      f(ofcolor, IN:'Grid', 'ONE':'Integer', X3:'Indices'),
      f(ofcolor, IN:'Grid', 'FOUR':'Integer', X4:'Indices'),
      f(ulcorner, X3:'Patch', X5:'Point'),
      f(subgrid, X3:'Patch', IN:'Grid', X6:'Grid'),
      f(rot90, X6:'Grid', X7:'Grid'),
      f(rot180, X6:'Grid', X8:'Grid'),
      f(rot270, X6:'Grid', X9:'Grid'),
      f(matcher, size, 'ZERO':'Any', X10:'Callable'),
      f(rbind, ofcolor, 'ONE':'Any', X11:'Callable'),
      f(compose, normalize, X11, X12:'Callable'),
      f(rbind, ofcolor, 'FOUR':'Any', X13:'Callable'),
      f(rbind, shift, X5:'Any', X14:'Callable'),
      f(compose, X14, X13, X15:'Callable'),
      f(lbind, subtract, X1:'Any', X16:'Callable'),
      f(chain, increment, X16, height, X17:'Callable'),
      f(lbind, subtract, X2:'Any', X18:'Callable'),
      f(chain, increment, X18, width, X19:'Callable'),
      f(rbind, interval, 'ONE':'Any', X20:'Callable'),
      f(lbind, X20, 'ZERO':'Any', X21:'Callable'),
      f(compose, X21, X17, X22:'Callable'),
      f(compose, X21, X19, X23:'Callable'),
      f(fork, product, X22, X23, X24:'Callable'),
      f(rbind, shift, (-1, -1):'Any', X25:'Callable'),
      f(lbind, lbind, shift:'Any', X26:'Callable'),
      f(chain, X26, X25, X12, X27:'Callable'),
      f(astuple, X6:'Integer', X7:'Integer', X28:'Point'),
      f(astuple, X8:'Integer', X9:'Integer', X29:'Point'),
      f(combine, X28:'Container', X29:'Container', X30:'Container'),
      f(apply, X15, X30:'Container', X31:'Container'),
      f(lbind, difference, X4:'Any', X32:'Callable'),
      f(apply, X32, X31:'Container', X33:'Container'),
      f(apply, normalize, X31:'Container', X34:'Container'),
      f(apply, X24, X34:'Container', X35:'Container'),
      f(lbind, rbind, difference:'Any', X36:'Callable'),
      f(apply, X26, X34:'Container', X37:'Container'),
      f(apply, X36, X33:'Container', X38:'Container'),
      f(papply, compose, X38:'Tuple', X37:'Tuple', X39:'Tuple'),
      f(lbind, compose, X10:'Any', X40:'Callable'),
      f(apply, X40, X39:'Container', X41:'Container'),
      f(papply, sfilter, X35:'Tuple', X41:'Tuple', X42:'Tuple'),
      f(apply, X27, X30:'Container', X43:'Container'),
      f(mpapply, mapply, X43:'Tuple', X42:'Tuple', X44:'Tuple'),
      f(fill, IN:'Grid', 'ONE':'Integer', X44:'Patch', OUT:'Grid')
    ].
solve(f15e1fac, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(portrait, X1:'Piece', returns=X2),
      f(branch, condition=X2, identity:'Any', dmirror:'Any', X3:'Any'),
      f(X3, IN, X4),
      f(leftmost, X1:'Patch', X5:'Integer'),
      f(equality, X5:'Any', 'ZERO':'Any', returns=X6),
      f(branch, condition=X6, identity:'Any', vmirror:'Any', X7:'Any'),
      f(X7, X4, X8),
      f(ofcolor, X8:'Grid', 'EIGHT':'Integer', X9:'Indices'),
      f(uppermost, X9:'Patch', X10:'Integer'),
      f(equality, X10:'Any', 'ZERO':'Any', returns=X11),
      f(branch, condition=X11, identity:'Any', hmirror:'Any', X12:'Any'),
      f(X12, X8, X13),
      f(ofcolor, X13:'Grid', 'EIGHT':'Integer', X14:'Indices'),
      f(ofcolor, X13:'Grid', 'TWO':'Integer', X15:'Indices'),
      f(rbind, shoot, (1, 0):'Any', X16:'Callable'),
      f(mapply, X16, X14:'ContainerContainer', X17:'FrozenSet'),
      f(height, X13:'Piece', X18:'Integer'),
      f(apply, first, X15:'Container', X19:'Container'),
      f(insert, 'ZERO':'Any', X19:'FrozenSet', X20:'FrozenSet'),
      f(insert, X18:'Any', X19:'FrozenSet', X21:'FrozenSet'),
      f(apply, decrement, X21:'Container', X22:'Container'),
      f(order, X20:'Container', identity, X23:'Tuple'),
      f(order, X22:'Container', identity, X24:'Tuple'),
      f(size, X15:'Container', X25:'Integer'),
      f(increment, X25:'Numerical', X26:'Numerical'),
      f(interval, 'ZERO':'Integer', X26:'Integer', 'ONE':'Integer', X27:'Tuple'),
      f(apply, tojvec, X27:'Container', X28:'Container'),
      f(pair, X23:'Tuple', X24:'Tuple', X29:'TupleTuple'),
      f(lbind, sfilter, X17:'Any', X30:'Callable'),
      f(compose, first, last, X31:'Callable'),
      f(chain, decrement, first, first, X32:'Callable'),
      f(fork, greater, X31, X32, X33:'Callable'),
      f(chain, increment, last, first, X34:'Callable'),
      f(fork, greater, X34, X31, X35:'Callable'),
      f(fork, both, X33, X35, X36:'Callable'),
      f(lbind, lbind, astuple:'Any', X37:'Callable'),
      f(lbind, compose, X36:'Any', X38:'Callable'),
      f(chain, X30, X38, X37, X39:'Callable'),
      f(apply, X39, X29:'Container', X40:'Container'),
      f(papply, shift, X40:'Tuple', X28:'Tuple', X41:'Tuple'),
      f(merge, X41:'ContainerContainer', X42:'Container'),
      f(fill, X13:'Grid', 'EIGHT':'Integer', X42:'Patch', X43:'Grid'),
      f(chain, X3, X7, X12, X44:'Callable'),
      f(X44, X43, OUT)
    ].
solve('234bbc79', IN, OUT) :-
    [ f(rbind, objects, true:'Any', X1:'Callable'),
      f(rbind, X1, false:'Any', X2:'Callable'),
      f(rbind, X2, false:'Any', X3:'Callable'),
      f(rbind, argmin, leftmost:'Any', X4:'Callable'),
      f(compose, X4, X3, X5:'Callable'),
      f(fork, remove, X5, X3, X6:'Callable'),
      f(compose, X4, X6, X7:'Callable'),
      f(compose, last, last, X8:'Callable'),
      f(matcher, first, 'FIVE':'Any', X9:'Callable'),
      f(rbind, sfilter, X9:'Any', X10:'Callable'),
      f(fork, difference, identity, X10, X11:'Callable'),
      f(rbind, argmin, X8:'Any', X12:'Callable'),
      f(compose, X12, X10, X13:'Callable'),
      f(compose, last, X13, X14:'Callable'),
      f(rbind, add, (0, 1):'Any', X15:'Callable'),
      f(compose, X14, X7, X16:'Callable'),
      f(compose, X14, X5, X17:'Callable'),
      f(fork, subtract, X16, X17, X18:'Callable'),
      f(compose, invert, X18, X19:'Callable'),
      f(compose, X15, X19, X20:'Callable'),
      f(compose, mostcolor, X11, X21:'Callable'),
      f(fork, astuple, X21, X14, X22:'Callable'),
      f(fork, remove, X13, identity, X23:'Callable'),
      f(fork, insert, X22, X23, X24:'Callable'),
      f(compose, X24, X7, X25:'Callable'),
      f(fork, cover, identity, X25, X26:'Callable'),
      f(fork, shift, X25, X20, X27:'Callable'),
      f(fork, paint, X26, X27, X28:'Callable'),
      f(rbind, argmax, X8:'Any', X29:'Callable'),
      f(chain, first, X29, X11, X30:'Callable'),
      f(fork, recolor, X30, X10, X31:'Callable'),
      f(fork, combine, X11, X31, X32:'Callable'),
      f(compose, X32, X5, X33:'Callable'),
      f(fork, paint, X28, X33, X34:'Callable'),
      f(X34, IN, X35),
      f(X34, X35, X36),
      f(palette, X36:'Element', X37:'IntegerSet'),
      f(contained, 'FIVE':'Any', X37:'Container', returns=X38),
      f(branch, condition=X38, X34:'Any', identity:'Any', X39:'Any'),
      f(X39, X36, X40),
      f(X3, X40, X41),
      f(merge, X41:'ContainerContainer', X42:'Container'),
      f(width, X42:'Piece', X43:'Integer'),
      f(astuple, 'THREE':'Integer', X43:'Integer', X44:'Point'),
      f(crop, X40:'Grid', (0, 0):'Point', X44:'Point', OUT:'Grid')
    ].
solve('22233c11', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:'Objects'),
      f(first, X1:'Container', X3:'Any'),
      f(recolor, 'EIGHT':'Integer', X3:'Patch', X4:'Object'),
      f(normalize, X4:'Patch', X5:'Patch'),
      f(totuple, X2:'FrozenSet', X6:'Tuple'),
      f(apply, width, X6:'Container', X7:'Container'),
      f(lbind, index, IN:'Any', X8:'Callable'),
      f(rbind, equality, 'ZERO':'Any', X9:'Callable'),
      f(chain, flip, X9, X8, X10:'Callable'),
      f(apply, urcorner, X6:'Container', X11:'Container'),
      f(apply, X10, X11:'Container', X12:'Container'),
      f(first, X7:'Container', X13:'Any'),
      f(halve, X13:'Numerical', X14:'Numerical'),
      f(pair, X6:'Tuple', X12:'Tuple', X15:'TupleTuple'),
      f(sfilter, X15:'Container', last, X16:'Container'),
      f(apply, first, X16:'Container', X17:'Container'),
      f(apply, flip, X12:'Container', X18:'Container'),
      f(pair, X6:'Tuple', X18:'Tuple', X19:'TupleTuple'),
      f(sfilter, X19:'Container', last, X20:'Container'),
      f(apply, first, X20:'Container', X21:'Container'),
      f(apply, urcorner, X21:'Container', X22:'Container'),
      f(invert, X14:'Numerical', X23:'Numerical'),
      f(astuple, X23:'Integer', 'ONE':'Integer', X24:'Point'),
      f(lbind, add, X24:'Any', X25:'Callable'),
      f(apply, X25, X22:'Container', X26:'Container'),
      f(lbind, shift, X5:'Any', X27:'Callable'),
      f(mapply, X27, X26:'ContainerContainer', X28:'FrozenSet'),
      f(apply, llcorner, X21:'Container', X29:'Container'),
      f(astuple, 'ONE':'Integer', X23:'Integer', X30:'Point'),
      f(lbind, add, X30:'Any', X31:'Callable'),
      f(apply, X31, X29:'Container', X32:'Container'),
      f(mapply, X27, X32:'ContainerContainer', X33:'FrozenSet'),
      f(apply, ulcorner, X17:'Container', X34:'Container'),
      f(astuple, X23:'Integer', X23:'Integer', X35:'Point'),
      f(lbind, add, X35:'Any', X36:'Callable'),
      f(apply, X36, X34:'Container', X37:'Container'),
      f(mapply, X27, X37:'ContainerContainer', X38:'FrozenSet'),
      f(apply, lrcorner, X17:'Container', X39:'Container'),
      f(lbind, add, (1, 1):'Any', X40:'Callable'),
      f(apply, X40, X39:'Container', X41:'Container'),
      f(mapply, X27, X41:'ContainerContainer', X42:'FrozenSet'),
      f(paint, IN:'Grid', X28:'Object', X43:'Grid'),
      f(paint, X43:'Grid', X33:'Object', X44:'Grid'),
      f(paint, X44:'Grid', X38:'Object', X45:'Grid'),
      f(paint, X45:'Grid', X42:'Object', OUT:'Grid')
    ].
solve('2dd70a9a', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':'Integer', X1:'Indices'),
      f(ofcolor, IN:'Grid', 'THREE':'Integer', X2:'Indices'),
      f(vline, X1:'Patch', returns=X3),
      f(vline, X2:'Patch', returns=X4),
      f(center, X1:'Patch', X5:'Point'),
      f(branch, condition=X4, uppermost:'Any', rightmost:'Any', X6:'Any'),
      f(X6, X1, X7),
      f(X6, X2, X8),
      f(greater, X7:'Integer', X8:'Integer', returns=X9),
      f(both, a=X4, b=X9, returns=X10),
      f(branch, condition=X10, lowermost:'Any', uppermost:'Any', X11:'Any'),
      f(X11, X2, X12),
      f(branch, condition=X4, leftmost:'Any', rightmost:'Any', X13:'Any'),
      f(X13, X2, X14),
      f(astuple, X12:'Integer', X14:'Integer', X15:'Point'),
      f(other, X2:'Container', X15:'Any', X16:'Any'),
      f(subtract, X15:'Numerical', X16:'Numerical', X17:'Numerical'),
      f(shoot, X15:'Point', X17:'Point', X18:'Indices'),
      f(underfill, IN:'Grid', 'ONE':'Integer', X18:'Patch', X19:'Grid'),
      f(objects,
        X19:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X20:'Objects'),
      f(colorfilter, X20:'Objects', 'ONE':'Integer', X21:'Objects'),
      f(rbind, adjacent, X2:'Any', X22:'Callable'),
      f(sfilter, X21:'Container', X22, X23:'Container'),
      f(difference,
        X21:'FrozenSet',
        X23:'FrozenSet',
        X24:'FrozenSet'),
      f(merge, X24:'ContainerContainer', X25:'Container'),
      f(cover, X19:'Grid', X25:'Patch', X26:'Grid'),
      f(shoot, X5:'Point', (1, 0):'Point', X27:'Indices'),
      f(shoot, X5:'Point', (-1, 0):'Point', X28:'Indices'),
      f(shoot, X5:'Point', (0, -1):'Point', X29:'Indices'),
      f(shoot, X5:'Point', (0, 1):'Point', X30:'Indices'),
      f(combine, X27:'Container', X28:'Container', X31:'Container'),
      f(combine, X29:'Container', X30:'Container', X32:'Container'),
      f(branch, condition=X3, X31:'Any', X32:'Any', X33:'Any'),
      f(ofcolor, X26:'Grid', 'ONE':'Integer', X34:'Indices'),
      f(initset, X15:'Any', X35:'FrozenSet'),
      f(rbind, manhattan, X35:'Any', X36:'Callable'),
      f(compose, X36, initset, X37:'Callable'),
      f(argmax, X34:'Container', X37, X38:'Any'),
      f(initset, X38:'Any', X39:'FrozenSet'),
      f(gravitate, X39:'Patch', X33:'Patch', X40:'Point'),
      f(crement, X40:'Numerical', X41:'Numerical'),
      f(add, X38:'Numerical', X41:'Numerical', X42:'Numerical'),
      f(connect, X38:'Point', X42:'Point', X43:'Indices'),
      f(fill, X26:'Grid', 'ONE':'Integer', X43:'Patch', X44:'Grid'),
      f(connect, X42:'Point', X5:'Point', X45:'Indices'),
      f(underfill, X44:'Grid', 'ONE':'Integer', X45:'Patch', X46:'Grid'),
      f(replace, X46:'Grid', 'ONE':'Integer', 'THREE':'Integer', OUT:'Grid')
    ].
solve(a64e4611, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:'Indices'),
      f(fork, product, identity, identity, X2:'Callable'),
      f(lbind, canvas, 'ZERO':'Any', X3:'Callable'),
      f(compose, asobject, X3, X4:'Callable'),
      f(fork, multiply, first, last, X5:'Callable'),
      f(compose, positive, size, X6:'Callable'),
      f(lbind, lbind, shift:'Any', X7:'Callable'),
      f(rbind, fork, X5:'Any', X8:'Callable'),
      f(lbind, X8, multiply:'Any', X9:'Callable'),
      f(lbind, chain, X6:'Any', X10:'Callable'),
      f(rbind, X10, X4:'Any', X11:'Callable'),
      f(lbind, lbind, occurrences:'Any', X12:'Callable'),
      f(chain, X9, X11, X12, X13:'Callable'),
      f(compose, X2, first, X14:'Callable'),
      f(compose, X13, last, X15:'Callable'),
      f(fork, argmax, X14, X15, X16:'Callable'),
      f(chain, X7, X4, X16, X17:'Callable'),
      f(compose, X4, X16, X18:'Callable'),
      f(fork, occurrences, last, X18, X19:'Callable'),
      f(fork, mapply, X17, X19, X20:'Callable'),
      f(multiply, 'TWO':'Numerical', 'SIX':'Numerical', X21:'Numerical'),
      f(interval, 'THREE':'Integer', X21:'Integer', 'ONE':'Integer', X22:'Tuple'),
      f(astuple, X22:'Integer', IN:'Integer', X23:'Point'),
      f(X20, X23, X24),
      f(fill, IN:'Grid', 'THREE':'Integer', X24:'Patch', X25:'Grid'),
      f(interval, 'THREE':'Integer', 'TEN':'Integer', 'ONE':'Integer', X26:'Tuple'),
      f(astuple, X26:'Integer', X25:'Integer', X27:'Point'),
      f(X20, X27, X28),
      f(fill, X25:'Grid', 'THREE':'Integer', X28:'Patch', X29:'Grid'),
      f(astuple, X26:'Integer', X29:'Integer', X30:'Point'),
      f(X20, X30, X31),
      f(fill, X29:'Grid', 'THREE':'Integer', X31:'Patch', X32:'Grid'),
      f(rbind, toobject, X32:'Any', X33:'Callable'),
      f(rbind, colorcount, 'THREE':'Any', X34:'Callable'),
      f(chain, X34, X33, neighbors, X35:'Callable'),
      f(matcher, X35, 'EIGHT':'Any', X36:'Callable'),
      f(sfilter, X1:'Container', X36, X37:'Container'),
      f(fill, IN:'Grid', 'THREE':'Integer', X37:'Patch', X38:'Grid'),
      f(ofcolor, X38:'Grid', 'ZERO':'Integer', X39:'Indices'),
      f(rbind, bordering, X38:'Any', X40:'Callable'),
      f(compose, X40, initset, X41:'Callable'),
      f(lbind, contained, 'THREE':'Any', X42:'Callable'),
      f(rbind, toobject, X38:'Any', X43:'Callable'),
      f(chain, X42, palette, X43, X44:'Callable'),
      f(compose, X44, dneighbors, X45:'Callable'),
      f(fork, both, X45, X41, X46:'Callable'),
      f(sfilter, X39:'Container', X46, X47:'Container'),
      f(fill, X38:'Grid', 'THREE':'Integer', X47:'Patch', OUT:'Grid')
    ].
solve('7837ac64', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:'Grid'),
      f(lbind, colorcount, X1:'Any', X2:'Callable'),
      f(palette, X1:'Element', X3:'IntegerSet'),
      f(order, X3:'Container', X2, X4:'Tuple'),
      f(remove, 'ZERO':'Any', X4:'Container', X5:'Container'),
      f(last, X5:'Container', X6:'Any'),
      f(replace, X1:'Grid', X6:'Integer', 'ZERO':'Integer', X7:'Grid'),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X8:'Objects'),
      f(merge, X8:'ContainerContainer', X9:'Container'),
      f(subgrid, X9:'Patch', X7:'Grid', X10:'Grid'),
      f(index, X10:'Grid', (0, 0):'Point', X11:'Integer'),
      f(vmirror, X10:'Piece', X12:'Piece'),
      f(index, X12:'Grid', (0, 0):'Point', X13:'Integer'),
      f(hmirror, X10:'Piece', X14:'Piece'),
      f(index, X14:'Grid', (0, 0):'Point', X15:'Integer'),
      f(vmirror, X14:'Piece', X16:'Piece'),
      f(index, X16:'Grid', (0, 0):'Point', X17:'Integer'),
      f(width, X10:'Piece', X18:'Integer'),
      f(subtract, X18:'Numerical', 'FOUR':'Numerical', X19:'Numerical'),
      f(divide, X19:'Numerical', 'THREE':'Numerical', X20:'Numerical'),
      f(increment, X20:'Numerical', X21:'Numerical'),
      f(tojvec, X21:'Integer', X22:'Point'),
      f(toivec, X21:'Integer', X23:'Point'),
      f(index, X10:'Grid', X22:'Point', X24:'Integer'),
      f(index, X12:'Grid', X22:'Point', X25:'Integer'),
      f(index, X14:'Grid', X22:'Point', X26:'Integer'),
      f(index, X16:'Grid', X22:'Point', X27:'Integer'),
      f(index, X10:'Grid', X23:'Point', X28:'Integer'),
      f(index, X14:'Grid', X23:'Point', X29:'Integer'),
      f(index, X12:'Grid', X23:'Point', X30:'Integer'),
      f(equality, X24:'Any', X25:'Any', returns=X31),
      f(equality, X26:'Any', X27:'Any', returns=X32),
      f(equality, X28:'Any', X29:'Any', returns=X33),
      f(equality, X29:'Any', X30:'Any', returns=X34),
      f(branch, condition=X31, X24:'Any', 'ZERO':'Any', X35:'Any'),
      f(branch, condition=X32, X26:'Any', 'ZERO':'Any', X36:'Any'),
      f(branch, condition=X33, X28:'Any', 'ZERO':'Any', X37:'Any'),
      f(branch, condition=X34, X29:'Any', 'ZERO':'Any', X38:'Any'),
      f(astuple, X11:'Integer', X35:'Integer', X39:'Point'),
      f(repeat, X13:'Any', 'ONE':'Integer', X40:'Tuple'),
      f(combine, X39:'Container', X40:'Container', X41:'Container'),
      f(astuple, X37:'Integer', 'ZERO':'Integer', X42:'Point'),
      f(repeat, X38:'Any', 'ONE':'Integer', X43:'Tuple'),
      f(combine, X42:'Container', X43:'Container', X44:'Container'),
      f(astuple, X15:'Integer', X36:'Integer', X45:'Point'),
      f(repeat, X17:'Any', 'ONE':'Integer', X46:'Tuple'),
      f(combine, X45:'Container', X46:'Container', X47:'Container'),
      f(astuple, X41:'Integer', X44:'Integer', X48:'Point'),
      f(repeat, X47:'Any', 'ONE':'Integer', X49:'Tuple'),
      f(vconcat, X48:'Grid', X49:'Grid', OUT:'Grid')
    ].
solve(a8c38be5, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:'Objects'),
      f(colorfilter, X1:'Objects', 'FIVE':'Integer', X2:'Objects'),
      f(argmax, X2:'Container', size, X3:'Any'),
      f(subgrid, X3:'Patch', IN:'Grid', X4:'Grid'),
      f(difference, X1:'FrozenSet', X2:'FrozenSet', X5:'FrozenSet'),
      f(fork, equality, height, width, X6:'Callable'),
      f(fork, greater, width, height, X7:'Callable'),
      f(sfilter, X5:'Container', X6, X8:'Container'),
      f(sfilter, X5:'Container', portrait, X9:'Container'),
      f(sfilter, X5:'Container', X7, X10:'Container'),
      f(rbind, subgrid, IN:'Any', X11:'Callable'),
      f(chain, center, delta, normalize, X12:'Callable'),
      f(order, X8:'Container', X12, X13:'Tuple'),
      f(apply, X11, X13:'Container', X14:'Container'),
      f(order, X9:'Container', X12, X15:'Tuple'),
      f(apply, X11, X15:'Container', X16:'Container'),
      f(order, X10:'Container', X12, X17:'Tuple'),
      f(apply, X11, X17:'Container', X18:'Container'),
      f(first, X14:'Container', X19:'Any'),
      f(remove, X19:'Any', X14:'Container', X20:'Container'),
      f(first, X20:'Container', X21:'Any'),
      f(remove, X21:'Any', X20:'Container', X22:'Container'),
      f(first, X22:'Container', X23:'Any'),
      f(last, X14:'Container', X24:'Any'),
      f(last, X16:'Container', X25:'Any'),
      f(first, X16:'Container', X26:'Any'),
      f(last, X18:'Container', X27:'Any'),
      f(first, X18:'Container', X28:'Any'),
      f(astuple, 'ONE':'Integer', 'TWO':'Integer', X29:'Point'),
      f(astuple, 'ONE':'Integer', 'THREE':'Integer', X30:'Point'),
      f(astuple, 'NINE':'Integer', 'ONE':'Integer', X31:'Point'),
      f(canvas, 'FIVE':'Integer', X29:'Point', X32:'Grid'),
      f(canvas, 'FIVE':'Integer', X30:'Point', X33:'Grid'),
      f(canvas, 'FIVE':'Integer', X31:'Point', X34:'Grid'),
      f(vconcat, X24:'Grid', X32:'Grid', X35:'Grid'),
      f(vconcat, X35:'Grid', X25:'Grid', X36:'Grid'),
      f(vconcat, X36:'Grid', X32:'Grid', X37:'Grid'),
      f(vconcat, X37:'Grid', X21:'Grid', X38:'Grid'),
      f(vconcat, X27:'Grid', X33:'Grid', X39:'Grid'),
      f(vconcat, X39:'Grid', X4:'Grid', X40:'Grid'),
      f(vconcat, X40:'Grid', X33:'Grid', X41:'Grid'),
      f(vconcat, X41:'Grid', X28:'Grid', X42:'Grid'),
      f(vconcat, X23:'Grid', X32:'Grid', X43:'Grid'),
      f(vconcat, X43:'Grid', X26:'Grid', X44:'Grid'),
      f(vconcat, X44:'Grid', X32:'Grid', X45:'Grid'),
      f(vconcat, X45:'Grid', X19:'Grid', X46:'Grid'),
      f(hconcat, X38:'Grid', X34:'Grid', X47:'Grid'),
      f(hconcat, X47:'Grid', X42:'Grid', X48:'Grid'),
      f(hconcat, X48:'Grid', X34:'Grid', X49:'Grid'),
      f(hconcat, X49:'Grid', X46:'Grid', OUT:'Grid')
    ].
solve(b775ac94, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(lbind, rbind, equality:'Any', X2:'Callable'),
      f(rbind, compose, first:'Any', X3:'Callable'),
      f(chain, X3, X2, mostcolor, X4:'Callable'),
      f(fork, sfilter, identity, X4, X5:'Callable'),
      f(fork, difference, identity, X5, X6:'Callable'),
      f(lbind, rbind, adjacent:'Any', X7:'Callable'),
      f(rbind, compose, initset:'Any', X8:'Callable'),
      f(chain, X8, X7, X6, X9:'Callable'),
      f(fork, extract, X5, X9, X10:'Callable'),
      f(fork, insert, X10, X6, X11:'Callable'),
      f(lbind, recolor, 'ZERO':'Any', X12:'Callable'),
      f(chain, X12, delta, X11, X13:'Callable'),
      f(fork, combine, X11, X13, X14:'Callable'),
      f(fork, position, X5, X6, X15:'Callable'),
      f(chain, toivec, first, X15, X16:'Callable'),
      f(chain, tojvec, last, X15, X17:'Callable'),
      f(fork, multiply, shape, X16, X18:'Callable'),
      f(fork, multiply, shape, X17, X19:'Callable'),
      f(fork, multiply, shape, X15, X20:'Callable'),
      f(fork, shift, hmirror, X18, X21:'Callable'),
      f(fork, shift, vmirror, X19, X22:'Callable'),
      f(compose, hmirror, vmirror, X23:'Callable'),
      f(fork, shift, X23, X20, X24:'Callable'),
      f(lbind, compose, X5:'Any', X25:'Callable'),
      f(X25, X21, X26),
      f(X25, X22, X27),
      f(X25, X24, X28),
      f(compose, crement, invert, X29:'Callable'),
      f(lbind, compose, X29:'Any', X30:'Callable'),
      f(X30, X16, X31),
      f(X30, X17, X32),
      f(X30, X15, X33),
      f(fork, shift, X26, X31, X34:'Callable'),
      f(fork, shift, X27, X32, X35:'Callable'),
      f(fork, shift, X28, X33, X36:'Callable'),
      f(lbind, index, IN:'Any', X37:'Callable'),
      f(lbind, compose, toindices:'Any', X38:'Callable'),
      f(X38, X14, X39),
      f(X38, X34, X40),
      f(X38, X35, X41),
      f(X38, X36, X42),
      f(fork, intersection, X39, X40, X43:'Callable'),
      f(fork, intersection, X39, X41, X44:'Callable'),
      f(fork, intersection, X39, X42, X45:'Callable'),
      f(chain, X37, first, X43, X46:'Callable'),
      f(chain, X37, first, X44, X47:'Callable'),
      f(chain, X37, first, X45, X48:'Callable'),
      f(fork, recolor, X46, X34, X49:'Callable'),
      f(fork, recolor, X47, X35, X50:'Callable'),
      f(fork, recolor, X48, X36, X51:'Callable'),
      f(mapply, X49, X1:'ContainerContainer', X52:'FrozenSet'),
      f(mapply, X50, X1:'ContainerContainer', X53:'FrozenSet'),
      f(mapply, X51, X1:'ContainerContainer', X54:'FrozenSet'),
      f(paint, IN:'Grid', X52:'Object', X55:'Grid'),
      f(paint, X55:'Grid', X53:'Object', X56:'Grid'),
      f(paint, X56:'Grid', X54:'Object', OUT:'Grid')
    ].
solve('97a05b5b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(argmax, X1:'Container', size, X2:'Any'),
      f(subgrid, X2:'Patch', IN:'Grid', X3:'Grid'),
      f(rbind, greater, 'ONE':'Any', X4:'Callable'),
      f(compose, X4, numcolors, X5:'Callable'),
      f(sfilter, X1:'Container', X5, X6:'Container'),
      f(lbind, rbind, subtract:'Any', X7:'Callable'),
      f(switch, X3:'Grid', 'TWO':'Integer', 'ZERO':'Integer', X8:'Grid'),
      f(lbind, occurrences, X8:'Any', X9:'Callable'),
      f(lbind, lbind, shift:'Any', X10:'Callable'),
      f(compose, X7, ulcorner, X11:'Callable'),
      f(matcher, first, 'TWO':'Any', X12:'Callable'),
      f(compose, flip, X12, X13:'Callable'),
      f(rbind, sfilter, X12:'Any', X14:'Callable'),
      f(rbind, sfilter, X13:'Any', X15:'Callable'),
      f(lbind, recolor, 'ZERO':'Any', X16:'Callable'),
      f(compose, X16, X15, X17:'Callable'),
      f(fork, combine, X17, X14, X18:'Callable'),
      f(chain, X11, X18, normalize, X19:'Callable'),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X20:'Objects'),
      f(apply, toindices, X20:'Container', X21:'Container'),
      f(chain, X9, X18, normalize, X22:'Callable'),
      f(rbind, colorcount, 'TWO':'Any', X23:'Callable'),
      f(lbind, sfilter, X21:'Any', X24:'Callable'),
      f(chain, size, first, X24, X25:'Callable'),
      f(compose, positive, size, X26:'Callable'),
      f(lbind, lbind, contained:'Any', X27:'Callable'),
      f(chain, X26, X24, X27, X28:'Callable'),
      f(compose, X25, X27, X29:'Callable'),
      f(rbind, sfilter, X28:'Any', X30:'Callable'),
      f(compose, X30, X22, X31:'Callable'),
      f(lbind, rbind, equality:'Any', X32:'Callable'),
      f(rbind, compose, X29:'Any', X33:'Callable'),
      f(chain, X33, X32, X23, X34:'Callable'),
      f(fork, sfilter, X31, X34, X35:'Callable'),
      f(fork, apply, X19, X35, X36:'Callable'),
      f(compose, X10, normalize, X37:'Callable'),
      f(fork, mapply, X37, X36, X38:'Callable'),
      f(astuple, cmirror:'Integer', dmirror:'Integer', X39:'Point'),
      f(astuple, hmirror:'Integer', vmirror:'Integer', X40:'Point'),
      f(combine, X39:'Container', X40:'Container', X41:'Container'),
      f(product, X41:'Container', X41:'Container', X42:'FrozenSet'),
      f(fork, compose, first, last, X43:'Callable'),
      f(apply, X43, X42:'Container', X44:'Container'),
      f(lbind, rapply, X44:'Any', X45:'Callable'),
      f(mapply, X45, X6:'ContainerContainer', X46:'FrozenSet'),
      f(mapply, X38, X46:'ContainerContainer', X47:'FrozenSet'),
      f(paint, X3:'Grid', X47:'Object', X48:'Grid'),
      f(palette, X47:'Element', X49:'IntegerSet'),
      f(lbind, remove, 'TWO':'Any', X50:'Callable'),
      f(X50, X49, X51),
      f(chain, first, X50, palette, X52:'Callable'),
      f(rbind, contained, X51:'Any', X53:'Callable'),
      f(chain, flip, X53, X52, X54:'Callable'),
      f(sfilter, X6:'Container', X54, X55:'Container'),
      f(fork, apply, X19, X22, X56:'Callable'),
      f(fork, mapply, X37, X56, X57:'Callable'),
      f(mapply, X45, X55:'ContainerContainer', X58:'FrozenSet'),
      f(mapply, X57, X58:'ContainerContainer', X59:'FrozenSet'),
      f(paint, X48:'Grid', X59:'Object', OUT:'Grid')
    ].
solve('3e980e27', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:'Objects'),
      f(lbind, contained, 'TWO':'Any', X2:'Callable'),
      f(compose, X2, palette, X3:'Callable'),
      f(lbind, contained, 'THREE':'Any', X4:'Callable'),
      f(compose, X4, palette, X5:'Callable'),
      f(sfilter, X1:'Container', X3, X6:'Container'),
      f(sfilter, X1:'Container', X5, X7:'Container'),
      f(compose, positive, size, X8:'Callable'),
      f(X8, X7, X9),
      f(X8, X6, X10),
      f(both, a=X9, b=X10, returns=X11),
      f(repeat, 'ZERO':'Any', 'ZERO':'Integer', X12:'Tuple'),
      f(rbind, subgrid, IN:'Any', X13:'Callable'),
      f(chain, asobject, vmirror, X13, X14:'Callable'),
      f(matcher, first, 'ZERO':'Any', X15:'Callable'),
      f(compose, flip, X15, X16:'Callable'),
      f(lbind, matcher, first:'Any', X17:'Callable'),
      f(lbind, rbind, add:'Any', X18:'Callable'),
      f(rbind, argmax, size:'Any', X19:'Callable'),
      f(chain, X18, invert, ulcorner, X20:'Callable'),
      f(lbind, lbind, shift:'Any', X21:'Callable'),
      f(lbind, occurrences, IN:'Any', X22:'Callable'),
      f(rbind, astuple, (0, 0):'Any', X23:'Callable'),
      f(chain, X22, initset, X23, X24:'Callable'),
      f(branch, condition=X9, X7:'Any', X6:'Any', X25:'Any'),
      f(X19, X25, X26),
      f(branch, condition=X9, identity:'Any', X14:'Any', X27:'Any'),
      f(branch, condition=X9, 'THREE':'Any', 'TWO':'Any', X28:'Any'),
      f(X27, X26, X29),
      f(sfilter, X29:'Container', X16, X30:'Container'),
      f(X24, X28, X31),
      f(X17, X28, X32),
      f(sfilter, X26:'Container', X32, X33:'Container'),
      f(center, X33:'Patch', X34:'Point'),
      f(remove, X34:'Any', X31:'Container', X35:'Container'),
      f(normalize, X30:'Patch', X36:'Patch'),
      f(sfilter, X36:'Container', X32, X37:'Container'),
      f(X20, X37, X38),
      f(apply, X38, X35:'Container', X39:'Container'),
      f(X21, X36, X40),
      f(mapply, X40, X39:'ContainerContainer', X41:'FrozenSet'),
      f(paint, IN:'Grid', X41:'Object', X42:'Grid'),
      f(branch, condition=X10, X6:'Any', X7:'Any', X43:'Any'),
      f(X19, X43, X44),
      f(branch, condition=X9, X14:'Any', identity:'Any', X45:'Any'),
      f(branch, condition=X10, 'TWO':'Any', 'THREE':'Any', X46:'Any'),
      f(X45, X44, X47),
      f(sfilter, X47:'Container', X16, X48:'Container'),
      f(X24, X46, X49),
      f(X17, X46, X50),
      f(sfilter, X44:'Container', X50, X51:'Container'),
      f(center, X51:'Patch', X52:'Point'),
      f(remove, X52:'Any', X49:'Container', X53:'Container'),
      f(normalize, X48:'Patch', X54:'Patch'),
      f(sfilter, X54:'Container', X50, X55:'Container'),
      f(X20, X55, X56),
      f(apply, X56, X53:'Container', X57:'Container'),
      f(branch, condition=X11, X57:'Any', X12:'Any', X58:'Any'),
      f(X21, X54, X59),
      f(mapply, X59, X58:'ContainerContainer', X60:'FrozenSet'),
      f(paint, X42:'Grid', X60:'Object', OUT:'Grid')
    ].

