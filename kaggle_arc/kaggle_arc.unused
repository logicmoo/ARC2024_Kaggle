
in_mc_10(G):- is_side(_),!,call(G).
in_mc_10(Goal):- ansi_ansi,!,call(Goal).
in_mc_10(Goal):- nb_current(in_mc_10,t),!,call(Goal).
in_mc_10(Goal):- 
  wots(S,locally(nb_setval(in_mc_10,t),Goal)),
  mc10_print(S).

mc10_print(G):- atom_contains(G,'<span '),!,write(G).
mc10_print(SS):- sformat(S,'~w',[SS]),!,atom_chars(S,Chars),maplist(mc10_put,Chars).

mc10_put(' '):- !,mc10_char('&nbsp;').
mc10_put('&'):- !,mc10_char('&amp;').
mc10_put('\t'):- !,mc10_char('&#9;').
mc10_put('\n'):- !,write('<br/>'),!.
mc10_put('\r'):- !.
mc10_put('<'):- !,mc10_char('&lt;').
mc10_put('>'):- !,mc10_char('&gt;').
mc10_put(Char):- atom_codes(Char,[C]),C<32,mc10_code(C).
mc10_put(Char):- atom_codes(Char,[C]),C>160,mc10_code(C).
mc10_put(C):- mc10_char(C).




mc10_code(C):- format('<span class="mc-10">&#~d;</span>',[C]).
mc10_char(Char):- format('<span class="mc-10">~w</span>',[Char]).


%color_sym(OS,[(black='°'),(blue='©'),(red='®'),(green=''),(yellow),(silver='O'),(purple),(orange='o'),(cyan= 248	ø ),(brown)]).
  /*

make_search_box_fresh(2,1,Center,In,Find,Cents,Inside,IBorder,OBorder):- 
  Center = [], Cents = [],  [[W,E]] = In,  IBorder = [W,E], 
  make_squarish(no_rule,In,  Find, Inside,OBorder).

make_search_box_fresh(N,1,Center,In,Find,Cents,Inside,IBorder,OBorder):- 
  Center = [], Cents = [],  [IBorder] = In,  length(IBorder,N),
  make_squarish(no_rule,In,  Find, Inside,OBorder).
*/
/*
make_search_box_fresh(1,2,Center,In,Find,Cents,Inside,IBorder,OBorder):- 
  Center = [], Cents = [],  [[N],[S]] = In,  IBorder = [N,S], 
  make_squarish(no_rule,In,  Find, Inside,OBorder).

make_search_box_fresh(2,2,Center,In,Find,Cents,Inside,IBorder,OBorder):- 
  Center = [], Cents = [],  [[NW,NE],[SW,SE]] = In,  IBorder = [NW,NE,SW,SE], 
  make_squarish(no_rule,In,  Find, Inside,OBorder).

make_search_box_fresh(3,2,Center,In,Find,Cents,Inside,IBorder,OBorder):-
  Center = [], Cents = [],  [[NW,N,NE],[SW,S,SE]] = In,  IBorder = [NW,N,NE,SW,S,SE], 
  make_squarish(no_rule,In,  Find, Inside,OBorder).

make_search_box_fresh(2,3,Center,In,Find,Cents,Inside,IBorder,OBorder):-
  Center = [], Cents = [],  [[NW,NE],[W,E],[SW,SE]] = In,  IBorder = [NW,W,NE,SW,E,SE],
  make_squarish(no_rule,In,  Find, Inside,OBorder).
*/

/*
make_search_box_fresh(3,2,Center,In,Find,Cents,Inside,IBorder,OBorder):-
  Center = [[N],[S]], Cents = [N,S],  [[NW,N,NE],[SW,S,SE]] = In,  IBorder = [NW,N,NE,SW,S,SE], 
  make_squarish(no_rule,In,  Find, Inside,OBorder).

make_search_box_fresh(2,3,Center,In,Find,Cents,Inside,IBorder,OBorder):-
  Center = [[W,E]], Cents = [W,E],  [[NW,NE],[W,E],[SW,SE]] = In,  IBorder = [NW,W,NE,SW,E,SE],
  make_squarish(no_rule,In,  Find, Inside,OBorder).
*/
/*
 
make_search_box_fresh(1,1,Center,In,Find,Cents,Inside,IBorder,OBorder):-
 make_grid(2,2,Center),
     make_squarish(no_rule,Center,  In, Cents, IBorder),
     make_squarish(no_rule,In,  Find, Inside,OBorder).
*/

/*
make_search_box_fresh(H,V,Center,In,Find,Cents,Inside,IBorder,OBorder):-
  once((
     make_grid(H,V,In),
     HH is H+2 ,VV is V+2, make_grid(HH,VV,In),
     make_squarish(no_rule,Center,  In, Cents, IBorder),
     make_squarish(no_rule,In,  Find, Inside,OBorder))).
*/


% ==============================================
% OVERLAPS
is_fti_step(find_overlaps).
% ==============================================
%ft i(VM,[find_overlaps|set(VM.program_i)]):- %cullObjectsOutsideOfRanges(VM), %  find_overlaps(How,VM).

find_overlaps(VM):-
  /*must_det_ll*/((Objs = VM.objs, pred_find_links(overlap,Objs,NewObjs))),
  gset(VM.objs) = NewObjs.

:- decl_pt(inter_object_relation,overlap(_)).
overlap(overlaping(OverlapP),O2,O1):- two_physical_objs(O1,O2), not_subsume(_,O2,O1),
  %\+ already_relation(O2,O1),
  %\+ has_prop(/*b*/iz(glyphic),O2), %\+ has_prop(/*b*/iz(glyphic),O1),
  globalpoints(O1,Ps1), globalpoints(O2,Ps2),
  intersection(Ps1,Ps2,Overlap,P1L,P2L),
  maplist(length,[Ps2,P2L,Overlap,P1L,Ps1],List),
  Overlap\==[],
  OverlapP =..[ol| List].


% ==============================================
% SUBSUMES
is_fti_step(find_subsumes).
% ==============================================
%ft i(VM,[find_subsumes|set(VM.program_i)]):- %cullObjectsOutsideOfRanges(VM), %  find_subsumes(How,VM).


% ==============================================
% TOUCHES
% ==============================================
%ft i(VM,[find_touches|set(VM.program_i)]):- %cullObjectsOutsideOfRanges(VM), %  find_touches(How,VM).
is_fti_step(find_touches).

find_touches(VM):-
  /*must_det_ll*/((Objs = VM.objs, pred_find_links(touching_object(non_overlapping_object_dir(dir_touching)),Objs,NewObjs))),
  gset(VM.objs) = NewObjs.

:- decl_pt(inter_object_relation,touching_object(_,_)).
touching_object(How,Dirs,O2,O1):- two_physical_objs(O1,O2), not_subsume(_,O2,O1),
  %has_prop(o(Y,LC,_),O1), has_prop(o(Y,LC,_),O2),
  
  %\+ already_relation(O2,O1),
  %\+ has_prop(/*b*/iz(glyphic),O2), %\+ has_prop(/*b*/iz(glyphic),O1),
  globalpoints(O1,Ps1), globalpoints(O2,Ps2),
  ignore(How=dir_touching),
  call(How,Ps2,Ps1,Dirs),!.

dir_touching(Ps1,Ps2,Dir):- member(_-P1,Ps1), is_adjacent_point(P1,Dir,P2),  member(_-P2,Ps2).



% ==============================================
% SEES
% ==============================================
%ft i(VM,[find_sees|set(VM.program_i)]):- %cullObjectsOutsideOfRanges(VM), %  find_sees(How,VM).
is_fti_step(find_sees).

find_sees(VM):-  
  /*must_det_ll*/((Objs = VM.objs, pred_find_links(seeing_object(non_overlapping_object_dir(dir_seeing)),Objs,NewObjs))),
  gset(VM.objs) = NewObjs.


:- decl_pt(inter_object_relation,seeing_object(_,_)).
seeing_object(How,Dirs,O2,O1):- two_physical_objs(O1,O2), not_subsume(_,O2,O1),
  % \+ already_relation(O2,O1),
  %\+ has_prop(/*b*/iz(glyphic),O2), %\+ has_prop(/*b*/iz(glyphic),O1),
  globalpoints(O1,Ps1), globalpoints(O2,Ps2),
  ignore(How=dir_seeing),
  call(How,Ps2,Ps1,Dirs),!.

dir_seeing(Ps1,Ps2,Dir):- member(_-P1,Ps1), is_adjacent_point(P1,Dir,P2), \+ member(_-P2,Ps1), 
  seeing_dir_soon(P1,Dir,Ps2).
    
seeing_dir_soon(P1,_Dir,Ps2):- member(_-P1,Ps2),!.
seeing_dir_soon(P1,Dir,Ps2):- is_adjacent_point(P1,Dir,P2), seeing_dir_soon(P2,Dir,Ps2).



non_overlapping_object_dir(_How,Ps1,Ps2,[overlap]):- member(P1,Ps1), \+ \+ member(P1,Ps2),!,fail.
non_overlapping_object_dir(How,Ps1,Ps2,Dirs):- findall(Dir,(member(Dir,[n,s,e,w,nw,ne,sw,se]),
  once(call(How,Ps1,Ps2,Dir))),Dirs),Dirs\==[].

pred_find_links(How,Objs,NewObjs):- 
  must_det_ll((find_links(How,Objs,Objs,NewObjs))).

link_prop(T,A):- sub_term(A,T),atom(A),!.

find_links(_How,[],_,[]):-!.
find_links(How,[Obj|ScanNext],OtherObjects,[Obj|ScanRest]):- fail,
  link_prop(How,Prop),
  has_prop(link(Prop,_,_),Obj),!,
  find_links(How,ScanNext,OtherObjects,ScanRest).

find_links(How,[Obj|ScanNext],OtherObjects,[NewObj|ScanRest]):-
  must_det_ll((
  /*must_det_ll*/(find_links_objects(How,Obj,OtherObjects,DirNewSees)),
  %pp(find_links(How)=DirNewSees),
  /*must_det_ll*/(override_object_link(DirNewSees,Obj,NewObj)),
  /*must_det_ll*/(find_links(How,ScanNext,OtherObjects,ScanRest)))).


override_object_link(_,O,O):- peek_vm(VM), ignore((var(VM.option_NoLinks),length(VM.objs,Len),
  ( Len>100 -> gset(VM.option_NoLinks)=true ; gset(VM.option_NoLinks) =false))), 
  VM.option_NoLinks==true,!.
override_object_link(P,O,OO):- override_object(P,O,OO).
/*
mention_links(Obj,[],Obj):-!.
mention_links(Obj,[link(Dir,Seen)|More],NewFObjO):- !,
  mention_links(Obj,Dir-Seen,MidObj),
  mention_links(MidObj,More,NewFObjO).
mention_links(Obj,Dir-Seen,NewObj):-
  /*must_det_ll*/(obj_to_oid(Seen,Iv)),
  /*must_det_ll*/(override_object_link(link(links,Dir,Iv),Obj,NewObj)),!.
*/

find_links_objects(_How,_,[],[]).
%find_links_objects(How,Obj,_,[]):- has_prop(iz(type(dots)),Obj),!.
find_links_objects(How,Obj,[Seen|ScanNext],[BetterSee|WillSee]):-    
 once(call(How,Dirs,Obj,Seen)),Dirs\==[],!,
 link_prop(How,Prop),
 better_sdir(Prop,Iv,Dirs,BetterSee),
 /*must_det_ll*/obj_to_oid(Seen,Iv),
 /*must_det_ll*/
 find_links_objects(How,Obj,ScanNext,WillSee),!.
find_links_objects(How,Obj,[_|ScanNext],WillSee):- /*must_det_ll*/(find_links_objects(How,Obj,ScanNext,WillSee)),!.

:- dynamic(individuated_cache/3).
:- retractall(individuated_cache(_,_,_)).


fg_subtractions(Subtraction,VM):-
 ignore((
 VMID = VM.id,
 \+ sub_var(tst,VMID),
 VMGID = VM.gid,
 \+ atom_contains(VMGID,'_fg_subtractiond'),
 Grid = VM.start_grid,
 other_grid(Grid,Other),
 other_grid(Grid,Target), 
 is_grid(Target),!,
 grid_size(Target,H,V),!,VM.h==H,VM.v==V,!,
 mapgrid(fg_subtractiond,Grid,Target,NewGrid),
 mass(NewGrid,M),mass(Grid,M2),!,
 M>0,M2\==M,Grid\==Target,NewGrid\==Grid,

 %(M==0->maplist_ignore(fg_subtractiond,Target,Grid,NewGrid); MNewGrid=NewGrid),
 must_det_ll((
  var(GOID),atomic_list_concat([VMGID,'_fg_subtractiond'],GOID), assert_grid_gid(NewGrid,GOID),
  get_vm(VMS), 
  %individuate2(_,Subtraction,GOID,NewGrid,FoundObjs),
  with_other_grid(Other,
   must_det_ll(( into_fti(VM.id,Subtraction,NewGrid,SubVM),      
      set(SubVM.gid) = GOID,
      set(SubVM.ngrid)= VM.ngrid,
      set_vm(SubVM),
      %individuals_raw(VM,GH,GV,ID,NewOptions,Reserved,Points,Grid,IndvSRaw),
      run_fti(SubVM,Subtraction)))),
 must_det_ll((
  make_indiv_object_list(SubVM,SubVM.objs,FoundObjs),
  set_vm(VMS),
  assert_grid_gid(VM.start_grid,VMGID),
  ReColored = FoundObjs,
  %globalpoints_include_bg(VM.start_grid,Recolors), maplist(recolor_object(Recolors),FoundObjs,ReColored),
  print_ss(fg_subtractions(GOID),NewGrid,FoundObjs),
  print_ss(ReColored),
  remCPoints(VM,ReColored),
  remGPoints(VM,ReColored),
  addInvObjects(VM,ReColored))))))),!.

fg_intersections0(Intersection,VM):-
 ignore((
 VMID = VM.id,
 \+ sub_var(tst,VMID),
 VMGID = VM.gid,
 \+ atom_contains(VMGID,'_fg_intersectio'),
  copy_term(VM.start_grid,Grid),
  other_grid(Grid,Other),
  fg_intersections1(Intersection,Grid,Other,VM))).

fg_intersections1(Intersection,Grid,Other,VM):-
 grid_size(Other,H,V),VM.h==H,VM.v==V,
 mapgrid(fg_intersectiond,Grid,Other,NewGrid),
 mass(NewGrid,NM), % mass(Grid,GM),!, ,!, mass(Other,OM),
 NM > 0,NewGrid\=@=Grid, !, %, 
 %(M==0->maplist_ignore(fg_intersectiond,Target,Grid,NewGrid); MNewGrid=NewGrid),
 must_det_ll((
  VMGID = VM.gid,
  mapgrid(plain_var_to(black),NewGrid),

  ignore(((NewGrid\=@=Other,NewGrid\=@=Grid,atomic_list_concat([VMGID,'_fg_intersectiond'],GOID), 
     assert_grid_gid(NewGrid,GOID)))),
  (var(GOID)-> grid_to_gid(NewGrid,GOID);true),
  get_vm(VMS),
  %individuate2(_,Intersection,GOID,NewGrid,FoundObjs),
  with_other_grid(Other,
   must_det_ll(( into_fti(VM.id,Intersection,NewGrid,SubVM),      
      set(SubVM.gid) = GOID,
      set(SubVM.ngrid)= VM.ngrid,
      set(SubVM.target_grid)= Other,
      set_vm(SubVM),
      %individuals_raw(VM,GH,GV,ID,NewOptions,Reserved,Points,Grid,IndvSRaw),
      run_fti(SubVM,Intersection),
      make_indiv_object_list(SubVM,SubVM.objs,FoundObjs),  
  set_vm(VMS),
  assert_grid_gid(VM.start_grid,VMGID),
  ReColored = FoundObjs,
  %globalpoints_include_bg(VM.start_grid,Recolors), maplist(recolor_object(Recolors),FoundObjs,ReColored),
  print_ss(fg_intersections(GOID),NewGrid,FoundObjs),
  print_ss(ReColored),
  remCPoints(VM,ReColored),
  remGPoints(VM,ReColored),
  addInvObjects(VM,ReColored)))))),!.
fg_intersections1(Intersection,Out,In,VM):-
  must_det_ll(fg_intersections2(Intersection,Out,In,VM)).
%fg_subtractiond(This,Target,Black):- \+ This \= Target,!,get_black(Black).
%fg_subtractiond(This,_,Black):-  get_black(Black), \+ This \= Black,!.
%fg_subtractiond(This,Target,This):- get_black(Black), \+ Target \= Black,!.
%fg_subtractiond(Cell,NewCell):- is_fg_color(Cell),!,decl_many_fg_colors(NewCell),NewCell=Cell.
/*
fg_subtractiond(This,Target,Target):- This =@= Target,!.
fg_subtractiond(_,_,Black):-  get_black(Black).

non_subtractiond(Black,Target,Target):- get_black(Black),!.
non_subtractiond(Target,Black,Target):- get_black(Black),!.
non_subtractiond(This,Target,Black):- This =@= Target, get_black(Black), !.
non_subtractiond(This,_,That):- copy_term(This,That),!.

non_intersectiond(Black,Target,Target):- get_black(Black),!.
non_intersectiond(Target,Black,Target):- get_black(Black),!.
non_intersectiond(This,Target,Black):- This =@= Target, get_black(Black), !.
non_intersectiond(This,_,That):- copy_term(This,That),!.

*/
% ==============================================
% ENGULFS
% ==============================================
is_fti_step(check_engulfed).
check_engulfed(VM):-
   smallest_first(VM.objs,SmallestFirst),
   set(VM.objs) = SmallestFirst,
   set(VM.program_i) = [find_engulfs|VM.program_i].

% Find object that are contained in objects and individuate them in their own way  (Todo mame this more complete)
% Find free points that are contained in objects and individuate them in their own way
%  find_engulfs(VM).   

is_fti_step(find_engulfs).
find_engulfs(VM):-
  /*must_det_ll*/((Objs = VM.objs, find_engulfs(Objs,NewObjs))),
  gset(VM.objs) = NewObjs.


find_engulfs(Objs,NewObjs):- /*must_det_ll*/((find_engulfs(Objs,Objs,NewObjs))).
find_engulfs([],_,[]):-!.
find_engulfs([Obj|ScanNext],OtherObjects,[NewObj|ScanRest]):-
  /*must_det_ll*/(find_engulfs_objects(Obj,OtherObjects,DirNewTouches)),
  /*must_det_ll*/(override_object_link(DirNewTouches,Obj,NewObj)),
  /*must_det_ll*/(find_engulfs(ScanNext,OtherObjects,ScanRest)).

find_engulfs_objects(_,[],[]).
%find_engulfs_objects(Obj,_,[]):- has_prop(link(insideOf,_),Obj),!.
%find_engulfs_objects(Obj,_,[]):- has_prop(link(contains,_),Obj),!.
find_engulfs_objects(Obj,[Target|ScanNext],[link(insideOf,Iv,Offset)|Engulfed]):-    
 once(contained_object(Offset,Obj,Target)),!,
 /*must_det_ll*/(obj_to_oid(Target,Iv)),
 /*must_det_ll*/(find_engulfs_objects(Obj,ScanNext,Engulfed)),!.
find_engulfs_objects(Obj,_,[]):- mass(Obj,Mass),Mass<5,!.
find_engulfs_objects(Obj,[Target|ScanNext],[link(contains,Iv,Offset)|Engulfed]):-    
 once(contained_object(Offset,Target,Obj)),!,
 /*must_det_ll*/(obj_to_oid(Target,Iv)),
 /*must_det_ll*/(find_engulfs_objects(Obj,ScanNext,Engulfed)),!.
find_engulfs_objects(Obj,[_|ScanNext],Engulfed):- /*must_det_ll*/(find_engulfs_objects(Obj,ScanNext,Engulfed)),!.


:- decl_pt(inter_object_relation,contained_object(_Offset)).

contained_object(Offset,O2,O1):- two_physical_objs(O1,O2), not_subsume(_,O2,O1),
  % \+ has_prop(/*b*/iz(glyphic),O2), %\+ has_prop(/*b*/iz(glyphic),O1),
  loc2D(O1,LowH1,LowV1),loc2D(O2,LowH2,LowV2),   
  LowH2 > LowH1, LowV2 > LowV1,
  vis2D(O1,H1,V1),vis2D(O2,H2,V2), 
  H1> H2, V1> V2,
  HighH1 is LowH1+H1, HighV1 is LowV1+V1,
  HighH2 is LowH2+H2, HighV2 is LowV2+V2,
  HighH1 > HighH2,
  HighV1 > HighV2,
  nop(globalpoints(O2,[Point|_])),!,
  nop(object_surrounds_point(O1,Point)),
  object_offset(O2,O1,Offset).

not_subsume(_,_O2,_O1):-!.
not_subsume(_,O2,O1):- \+ subsume(_,O2,O1),!.

/*
w_show_s31(Title,Goal,_Showing):- title_to_html(Title,HtmlTitle),!,
 gensym('accordian_css_',Sym),
 format('<input type="checkbox" id="~w" class="hidecontent">
		<label for="~w"><div class="font(1)">~w</div></label>
        <div class="content hidecontent">',[Sym,Sym,HtmlTitle]),
           goal_new_lines(Goal,_NewChars),
           format('<label for="~w" style="right: 0; position: relative; width: 8px">x</label>
			<script>
			 if(true) document.getElementById("~w").click();
			</script>
        </div>',[Sym,Sym]).

w_show_s32(Title,Goal,Showing):- title_to_html(Title,HtmlTitle),!,
 gensym('accordian_css_',Sym),
 format('<input type="checkbox" id="~w" class="hidecontent">',[Sym]),
 format('<label for="~w"><div class="font(1)">~@</div></label>',[Sym,print_title(HtmlTitle)]),
 %(Showing == true -> Class=panel_shown; Class=panel_hidden),
 Class=panel_shown,
 %format('<hr><label id="~w" onclick="clickAccordian(`~w`);" class="accordian , title"><div class="font(1)">',[Sym,Sym]),
 format('<div id="~w_panel" onmouseover="activateMenu(`~w_link`);" class="content , hidecontent">',[Sym,Sym]), 
 flag('$w_section_depth',X,X),
 format('<script>addAccordian(document.getElementById("~w").firstChild,~w);</script><p>',[Sym,X]),flush_output,
 goal_new_lines(Goal,NewChars), format('<br></div>',[]),
 ignore((  
   ((Showing==false,NewChars<600);(Showing==true,Class==panel_hidden);(Showing==false,Class==panel_shown))
    ->format('<script>document.getElementById("~w").click();</script>',[Sym]))).


w_section_html_1(Title,Goal,Showing):- gensym(accordian_,Sym), !,
   format('<label for="~w">',[Sym]),
	 format('<input id="~w" type="checkbox" />',[Sym]),
	 write('<div class="title"> <h3>'),pp(Title),write('</h3></div>'),
	 write('<div class="content">'),goal_new_lines(Goal,NewChars),
   %pp(newlines=NewChars),format('<--label for="~w" style="right: 0; position: relative; width: 8px">x</label-->',[Sym]),   
   ignore(((Showing==true;NewChars<600)->format('<script>document.getElementById("~w").click();</script>',[Sym]))),
   write('</div>'),!,write('</label>').

w_section_html_2(Title,Goal,Showing):- gensym(accordian_,Sym), !,
   format('<input type="checkbox" id="~w" class="hidecontent">',[Sym]),
   format('<label for="~w"><div class="font(1)">',[Sym]),
   pp(Title),write('</div></label><div class="content hidecontent">'),
   goal_new_lines(Goal,NewChars),
   format('<label for="~w" style="right: 0; position: relative; width: 8px">x</label>',[Sym]),
   ignore(((Showing==true;NewChars<600)->format('<script>document.getElementById("~w").click();</script>',[Sym]))),
   write('</div>').
*/
/*  
with_tagged(Spyable,Goal):- 
  once(nb_current('$w_section',Was);Was=[]), length(Was,Depth),!,wots(Ident,dash_chars(Depth,' ')),
  setup_call_cleanup(
    bfly_html_goal(format('~w<~w> ~N',[Ident,Spyable])),
    locally(b_setval('$w_section',[h(Spyable)|Was]),tabbed_print_im(Depth+2,(Goal))),
    bfly_html_goal(format('~w</~w> ',[Ident,Spyable]))).

w_section(Title,Goal,true):-
  (nb_current('$w_section',Was);Was=[]),
  length(Was,Depth),
  setup_call_cleanup(format('~N~@!mu~w! ~@ |~n',[dash_chars(Depth,' '), Type, print_title(Title)]),
                     locally(b_setval('$w_section',[Type|Was]),wots(S,Goal)), 
                     format('~N~w~@\u00A1mu~w\u00A1~n',[S,dash_chars(Depth,' '), Type])).

*/

% grid_to_obj(Grid,[colormass,fg_shapes(colormass)],Obj),print_side_by_side(Grid,Obj).
/*
trim_for_offset_1_1(II,In,OX,OY):- 
  trim_to_rect2(II,In), !, II\=@=In,
  % print_side_by_side(II,In),
  once(ogs_11(OX,OY,In,II);(OX=OY,OX=1)).
*/
/*
all_ogs1(IO,Whole,II,Out,XY):-
  findall(ogs(trim(IO),Whole,R,[loc2D(XX,YY),vis2D(SIX,SIY)]),
     (trim_for_offset_1_1(II,In,OX,OY),
       %maybe_ogs(SIX,SIY,R,In,Out),XX is X+OX-1, YY is Y+OY-1),XY),!.
  maybe_ogs(SIX,SIY,R,In,Out),XX is X, YY is Y),XY),!.
*/
/*
all_ogs1(IO,Whole,II,Out,XY):-
  findall(ogs(trim_1_1(IO),Whole,R,[loc2D(XX,YY),vis2D(SIX,SIY)]),
     (trim_for_offset_1_1(II,In,OX,OY),
       maybe_ogs(SIX,SIY,R,In,Out),XX is X-OX+1, YY is Y-OY+1),XY),!.
       %maybe_ogs(SIX,SIY,R,In,Out)),XY),!.
*/


%bg_to_plain_var(BG,BG).

/*
all_ogs2(IO,Whole,IIn,Out,XY):- 
   unbind_bg(IIn,In),
   findall(ogs(notrim(IO),Whole,R,[loc2D(XX,YY),vis2D(SIX,SIY)]),maybe_ogs(R,In,Out),XY),!.

all_ogs3(IO,Grid,Out,XY):-
  findall(ogs(notrim(IO),Named,R,[loc2D(XX,YY),vis2D(SIX,SIY)]),(fail,grid_to_so(Grid,Named,In),maybe_ogs(SIX,SIY,R,XX,YY,In,Out)),XY).

all_ogs(IO,In,Out,Set):- %member(R,[strict,loose]),
  all_ogs1(IO,whole,In,Out,XY1),
  all_ogs2(IO,whole,In,Out,XY2),
  all_ogs3(IO,In,Out,XY3),  
  flatten([XY1,XY2,XY3],XY),
  list_to_set(XY,Set).
*/
%maybe_ogs(R,In,Out):-  find_ogs(X,Y,In,Out)*->R=strict;(ogs_11(X,Y,In,Out),R=loose).

:- arc_history(test_what_unique).
test_what_unique:- get_current_test(TestID), what_unique(TestID,n=0,n>10).


:- arc_history((get_current_test(TestID),what_unique(TestID,n=0,n>10))).
get_new_uniq_dict(Dict):- 
    ArgDict = _{sharedWith:_SharedWith,object:_Obj,trait:_Trait,groupSizeMask:_GroupSizeMask,
  actualGroupSize:_ActualGroupSize,countMask:_CountMask,
  actualCount:_ActualCount,otherL:_OtherL,slistL:_ListL,
  setL:_SetL,others:_TraitCountSets,how:_How,group:_Group},
  (var(Dict)->Dict=ArgDict ; Dict >:< ArgDict).

is_fti_step(most_unique).
most_unique(symmetry_type,VM):-
  List = VM.objs,
  last(List,Obj),
  set(VM.solution)= Obj.


  

what_unique:- get_current_test(TestID),what_unique(TestID).

what_unique(TestID):- 
   get_vm(VM),
   ((VM.id \= (TestID > _ * _)), ndividuator),
   get_vm(VM2), explain_uniqueness(VM2.objs).

what_unique(TestID,Dict):- is_vm_map(Dict),!,what_unique_dict(TestID,Dict).
what_unique(TestID,Obj):- get_current_test(TestID),select_group(TestID,Group,_How), member(Obj,Group), must_det_ll(what_unique(TestID,Obj,Group)).
what_unique(TestID,Obj,Group):- (is_group(Group);is_object(Obj)),!,what_unique_obj(TestID,Obj,Group).
what_unique(TestID,CountMask,GroupSizeMask):-
  get_new_uniq_dict(Dict),
  Dict.groupSizeMask = GroupSizeMask,
  Dict.countMask = CountMask,!,
  what_unique_dict(TestID,Dict),
  report_unique(Dict).

what_unique_obj:- get_current_test(TestID),what_unique_obj(TestID,_,_).
what_unique_obj(TestID,Obj,Group):- 
  get_new_uniq_dict(Dict),
  Dict.group = Group,
  Dict.object = Obj,
  what_unique_dict(TestID,Dict),
  report_unique(Dict).

/*what_unique(TestID,CountMask,GroupSizeMask):-
 what_unique(TestID,SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,TraitCounts,How),
 report_unique(SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,TraitCounts,How).
*/
report_unique(Dict):- var(Dict),get_new_uniq_dict(Dict),!,report_unique(Dict).
report_unique(Dict):- var(Dict.actualCount),!,get_current_test(TestID), what_unique_dict(TestID,Dict),report_unique(Dict).
report_unique(Dict):-
 must_det_ll((
  ArgDict = _{sharedWith:SharedWith,object:Obj,trait:Trait,groupSizeMask:GroupSizeMask,
  actualGroupSize:ActualGroupSize,countMask:CountMask,
  actualCount:ActualCount,otherL:OtherL,listL:ListL,
  setL:SetL,others:TraitCountSets,how:How,group:Group},
  (var(Dict)->Dict=ArgDict ; Dict >:< ArgDict),
  maplist_e(tersify,TraitCountSets,HTraitSetO),
  maplist_e(tersify,SharedWith,SharedWithO),
  maplist_e(tersify,Group,GroupO),
  maplist_e(tersify,Obj,ObjO),
  %(Obj\==[] -> ignore(print_grid(Obj)) ; true),
  format('~N'), pp(what_unique(ObjO=[ActualCount/ActualGroupSize-Trait],sharedWith=SharedWithO,
  setL/listL=SetL/ListL,others=HTraitSetO,how=How,
  groupSizeMask=GroupSizeMask,group:GroupO,countMask=CountMask,otherL=OtherL)))).

maplist_e(P2,A,B):- is_list(A),!,mapgroup(P2,A,B).
maplist_e(P2,A,B):- call(P2,A,B).

:- style_check(-singleton).
%:- arc_history(what_unique(TestID,SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,Others,_How)).
:- style_check(+singleton).


obj_exclude(Obj,Group,Others):- var(Obj),!,select(Obj,Group,Others).
obj_exclude(Obj,Group,Others):- select(O,Group,Others),(O==Obj *-> true; Group=Others).


what_unique_dict(TestID,Dict):- 
  ArgDict = _{sharedWith:SharedWith,object:Obj,trait:Trait,groupSizeMask:GroupSizeMask,
  actualGroupSize:ActualGroupSize,countMask:CountMask,
  actualCount:ActualCount,otherL:OtherL,listL:ListL,
  setL:SetL,others:TraitCountSets,how:How,group:Group},
  (var(Dict)->Dict=ArgDict ; Dict >:< ArgDict),
  (var(Group)->(select_group(TestID,Group,How));true),
  obj_exclude(Obj,Group,Others),  
  length_criteria(Group,GroupSizeMask),
  length(Group,ActualGroupSize),
  mapgroup(each_trait,[Obj|Others],[_-ObjT|TraitList]),
  member(Trait,ObjT),
  \+ too_non_unique(Trait),
  \+ too_unique(Trait),
  found_in_o(Trait,TraitList,SharedWith),
  length_criteria(SharedWith,CountMask),
  length(SharedWith,ActualCount),
   freeze(B,\+ \+ (member(E,SharedWith), E==B)),
   my_partition(=(B-_),TraitList,_Mine,NotMine),
   length(NotMine,OtherL),   
   %dif(WTrait,Trait),
   functor(Trait,F,A),functor(WTrait,F,A),
   found_in_w(WTrait,NotMine,HTraitList),length(HTraitList,ListL),
   sort_safe(HTraitList,HTraitSet),length(HTraitSet,SetL),
   findall(C-HTrait,(member(HTrait,HTraitSet),found_in_w(HTrait,NotMine,LS),length(LS,C)),TraitCounts),
   sort_safe(TraitCounts,TraitCountSets),
   \+ filter_what_unique(TestID,SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,How).


explain_uniqueness(GroupWhole):-
  object_printables(GroupWhole,Group,GroupPP),
  get_current_test(TestID),!,
  forall(member(Obj,Group),
   (dash_chars,
    object_glyph(Obj,G), object_color_glyph_short(Obj,GC), object_grid(Obj,OG), 
    locally(nb_setval(color_index,[Obj|GroupPP]),print_side_by_side(GC,GroupPP,'explain_uniqueness',_,OG,G)),
    dmsg(uobj=Obj),!,
    forall(what_unique_obj(TestID,Obj,Group),true))),
  dash_chars.


% touching vs each dir
% size2D



:- style_check(-singleton).
filter_what_unique(TestID,SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,How):-
  OtherL=<1.

filter_what_unique(TestID,SharedWith,Obj,Trait,GroupSizeMask,ActualGroupSize,CountMask,ActualCount,OtherL,ListL,SetL,How):-
 ListL=SetL, SetL>1.


/*

With each type of example we can have...

values_all_same|values_all_dif
values_where_1_stand_otherwise
values_where_2_stand_otherwise

*/

